
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  0000194c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000194c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  00800302  00001b4e  00001bc2  2**0
                  ALLOC
  3 .debug_aranges 000004e8  00000000  00000000  00001bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dc0  00000000  00000000  000020aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000331d  00000000  00000000  00002e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000122d  00000000  00000000  00006187  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029e0  00000000  00000000  000073b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c0  00000000  00000000  00009d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001466  00000000  00000000  0000a654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bdb  00000000  00000000  0000baba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000590  00000000  00000000  0000d695  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
#endif


// constructor

OrangutanMotors::OrangutanMotors()
       0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
}


// constructor

OrangutanBuzzer::OrangutanBuzzer()
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
	static unsigned char isPressed(unsigned char buttons);

	
  private:

	static inline void init()
       8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
// *************************************************************************


// constructor (doesn't do anything)

OrangutanLCD::OrangutanLCD()
       c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
void readLineSensorsCalibrated(unsigned int *sensor_values)
{
	qtr3pi.readCalibrated(sensor_values);
}

unsigned int Pololu3pi::readLine(unsigned int *sensor_values, unsigned char white_line)
      10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
#include "OrangutanAnalog.h"


#ifdef LIB_POLOLU

extern "C" void set_analog_mode(unsigned char mode)
      14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>


#ifdef LIB_POLOLU
static PololuQTRRC qtr;

extern "C" void qtr_emitters_on()
      18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      34:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_13>
      38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
      8c:	04 03       	mulsu	r16, r20
      8e:	0a 03       	fmul	r16, r18
      90:	0d 03       	fmul	r16, r21
      92:	10 03       	mulsu	r17, r16
      94:	13 03       	mulsu	r17, r19
      96:	16 03       	mulsu	r17, r22
      98:	19 03       	fmul	r17, r17
      9a:	1c 03       	fmul	r17, r20
      9c:	1f 03       	fmul	r17, r23
      9e:	22 03       	mulsu	r18, r18
      a0:	25 03       	mulsu	r18, r21
      a2:	28 03       	fmul	r18, r16

000000a4 <__ctors_start>:
      a4:	d3 07       	cpc	r29, r19
      a6:	d7 0b       	sbc	r29, r23

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf ef       	ldi	r28, 0xFF	; 255
      ae:	d0 e1       	ldi	r29, 0x10	; 16
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	13 e0       	ldi	r17, 0x03	; 3
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	ec e4       	ldi	r30, 0x4C	; 76
      bc:	f9 e1       	ldi	r31, 0x19	; 25
      be:	00 e0       	ldi	r16, 0x00	; 0
      c0:	0b bf       	out	0x3b, r16	; 59
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
      c4:	07 90       	elpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a2 30       	cpi	r26, 0x02	; 2
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
      ce:	13 e0       	ldi	r17, 0x03	; 3
      d0:	a2 e0       	ldi	r26, 0x02	; 2
      d2:	b3 e0       	ldi	r27, 0x03	; 3
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	ad 39       	cpi	r26, 0x9D	; 157
      da:	b1 07       	cpc	r27, r17
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>

000000de <__do_global_ctors>:
      de:	10 e0       	ldi	r17, 0x00	; 0
      e0:	c8 ea       	ldi	r28, 0xA8	; 168
      e2:	d0 e0       	ldi	r29, 0x00	; 0
      e4:	04 c0       	rjmp	.+8      	; 0xee <.do_global_ctors_start>

000000e6 <.do_global_ctors_loop>:
      e6:	22 97       	sbiw	r28, 0x02	; 2
      e8:	fe 01       	movw	r30, r28
      ea:	0e 94 a0 0c 	call	0x1940	; 0x1940 <__tablejump__>

000000ee <.do_global_ctors_start>:
      ee:	c4 3a       	cpi	r28, 0xA4	; 164
      f0:	d1 07       	cpc	r29, r17
      f2:	c9 f7       	brne	.-14     	; 0xe6 <.do_global_ctors_loop>
      f4:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
      f8:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <_exit>

000000fc <__bad_interrupt>:
      fc:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000100 <display_readings>:
#include <pololu/3pi.h>

void display_readings(const unsigned int *calibrated_values)
{
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	8c 01       	movw	r16, r24
     10a:	c0 e0       	ldi	r28, 0x00	; 0
     10c:	d0 e0       	ldi	r29, 0x00	; 0

  for(i=0;i<5;i++) {
    const char display_characters[10] = {' ','.',',','-','+','o','O','0','@','#'};
    // values from 0 to 9
    char c = display_characters[calibrated_values[i]/101];
    print_character(c);
     10e:	f8 01       	movw	r30, r16
     110:	ec 0f       	add	r30, r28
     112:	fd 1f       	adc	r31, r29
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	65 e6       	ldi	r22, 0x65	; 101
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
     120:	fb 01       	movw	r30, r22
     122:	e6 51       	subi	r30, 0x16	; 22
     124:	fd 4f       	sbci	r31, 0xFD	; 253
     126:	80 81       	ld	r24, Z
     128:	0e 94 11 07 	call	0xe22	; 0xe22 <print_character>
     12c:	22 96       	adiw	r28, 0x02	; 2

void display_readings(const unsigned int *calibrated_values)
{
  unsigned char i;

  for(i=0;i<5;i++) {
     12e:	ca 30       	cpi	r28, 0x0A	; 10
     130:	d1 05       	cpc	r29, r1
     132:	69 f7       	brne	.-38     	; 0x10e <display_readings+0xe>
    const char display_characters[10] = {' ','.',',','-','+','o','O','0','@','#'};
    // values from 0 to 9
    char c = display_characters[calibrated_values[i]/101];
    print_character(c);
  }
}
     134:	df 91       	pop	r29
     136:	cf 91       	pop	r28
     138:	1f 91       	pop	r17
     13a:	0f 91       	pop	r16
     13c:	08 95       	ret

0000013e <main>:

int main()
{
     13e:	af 92       	push	r10
     140:	bf 92       	push	r11
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	df 93       	push	r29
     150:	cf 93       	push	r28
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	2a 97       	sbiw	r28, 0x0a	; 10
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	0f be       	out	0x3f, r0	; 63
     160:	cd bf       	out	0x3d, r28	; 61
  unsigned int counter;
  int last_y=0;

  pololu_3pi_init(2000);
     162:	80 ed       	ldi	r24, 0xD0	; 208
     164:	97 e0       	ldi	r25, 0x07	; 7
     166:	0e 94 26 08 	call	0x104c	; 0x104c <pololu_3pi_init>
     16a:	1f c0       	rjmp	.+62     	; 0x1aa <main+0x6c>
  
  while(!button_is_pressed(BUTTON_B))
  {
    int bat = battery_millivolts();
     16c:	0e 94 ef 07 	call	0xfde	; 0xfde <battery_millivolts>
     170:	7c 01       	movw	r14, r24

    clear();
     172:	0e 94 fe 06 	call	0xdfc	; 0xdfc <clear>
    print_long(bat);
     176:	00 27       	eor	r16, r16
     178:	f7 fc       	sbrc	r15, 7
     17a:	00 95       	com	r16
     17c:	10 2f       	mov	r17, r16
     17e:	c8 01       	movw	r24, r16
     180:	b7 01       	movw	r22, r14
     182:	0e 94 ab 07 	call	0xf56	; 0xf56 <print_long>
    print("mV");
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 22 07 	call	0xe44	; 0xe44 <print>
    lcd_goto_xy(0,1);
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <lcd_goto_xy>
    print("Press B");
     19a:	83 e0       	ldi	r24, 0x03	; 3
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 22 07 	call	0xe44	; 0xe44 <print>

    delay_ms(50);
     1a2:	82 e3       	ldi	r24, 0x32	; 50
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 29 08 	call	0x1052	; 0x1052 <delay_ms>
  unsigned int counter;
  int last_y=0;

  pololu_3pi_init(2000);
  
  while(!button_is_pressed(BUTTON_B))
     1aa:	80 e1       	ldi	r24, 0x10	; 16
     1ac:	0e 94 f7 05 	call	0xbee	; 0xbee <button_is_pressed>
     1b0:	88 23       	and	r24, r24
     1b2:	e1 f2       	breq	.-72     	; 0x16c <main+0x2e>
    print("Press B");

    delay_ms(50);
  }

  wait_for_button_release(BUTTON_B);
     1b4:	80 e1       	ldi	r24, 0x10	; 16
     1b6:	0e 94 3c 06 	call	0xc78	; 0xc78 <wait_for_button_release>
  delay_ms(500);
     1ba:	84 ef       	ldi	r24, 0xF4	; 244
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 29 08 	call	0x1052	; 0x1052 <delay_ms>
     1c2:	0c ee       	ldi	r16, 0xEC	; 236
     1c4:	1f ef       	ldi	r17, 0xFF	; 255

  for(counter=0;counter<80;counter++)
  {
    if(counter < 20 || counter >= 60)
     1c6:	08 32       	cpi	r16, 0x28	; 40
     1c8:	11 05       	cpc	r17, r1
     1ca:	28 f0       	brcs	.+10     	; 0x1d6 <main+0x98>
      set_motors(40,-40);
     1cc:	68 ed       	ldi	r22, 0xD8	; 216
     1ce:	7f ef       	ldi	r23, 0xFF	; 255
     1d0:	88 e2       	ldi	r24, 0x28	; 40
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <main+0xa0>
    else
      set_motors(-40,40);
     1d6:	68 e2       	ldi	r22, 0x28	; 40
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	88 ed       	ldi	r24, 0xD8	; 216
     1dc:	9f ef       	ldi	r25, 0xFF	; 255
     1de:	0e 94 00 02 	call	0x400	; 0x400 <set_motors>

    clear();
     1e2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <clear>
    lcd_goto_xy(0,1);
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <lcd_goto_xy>
    print("Press B");
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	0e 94 22 07 	call	0xe44	; 0xe44 <print>

    calibrate_line_sensors();
     1fa:	0e 94 f9 07 	call	0xff2	; 0xff2 <calibrate_line_sensors>

    delay_ms(20);
     1fe:	84 e1       	ldi	r24, 0x14	; 20
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 29 08 	call	0x1052	; 0x1052 <delay_ms>
     206:	0f 5f       	subi	r16, 0xFF	; 255
     208:	1f 4f       	sbci	r17, 0xFF	; 255
  }

  wait_for_button_release(BUTTON_B);
  delay_ms(500);

  for(counter=0;counter<80;counter++)
     20a:	0c 33       	cpi	r16, 0x3C	; 60
     20c:	11 05       	cpc	r17, r1
     20e:	d9 f6       	brne	.-74     	; 0x1c6 <main+0x88>

    calibrate_line_sensors();

    delay_ms(20);
  }
  set_motors(0,0);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 00 02 	call	0x400	; 0x400 <set_motors>

  while(!button_is_pressed(BUTTON_B))
  {
    unsigned int sensors[5] = {1,2,3,4,5};
     21c:	6e 01       	movw	r12, r28
     21e:	08 94       	sec
     220:	c1 1c       	adc	r12, r1
     222:	d1 1c       	adc	r13, r1
     224:	21 c0       	rjmp	.+66     	; 0x268 <main+0x12a>
     226:	d6 01       	movw	r26, r12
     228:	e0 ee       	ldi	r30, 0xE0	; 224
     22a:	f2 e0       	ldi	r31, 0x02	; 2
     22c:	8a e0       	ldi	r24, 0x0A	; 10
     22e:	01 90       	ld	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	81 50       	subi	r24, 0x01	; 1
     234:	e1 f7       	brne	.-8      	; 0x22e <main+0xf0>
    unsigned int position = read_line(sensors);
     236:	c6 01       	movw	r24, r12
     238:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <read_line>
     23c:	7c 01       	movw	r14, r24

    clear();
     23e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <clear>
    print_long(position);
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	10 e0       	ldi	r17, 0x00	; 0
     246:	c8 01       	movw	r24, r16
     248:	b7 01       	movw	r22, r14
     24a:	0e 94 ab 07 	call	0xf56	; 0xf56 <print_long>
    lcd_goto_xy(0,1);
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <lcd_goto_xy>
    display_readings(sensors);
     25a:	c6 01       	movw	r24, r12
     25c:	0e 94 80 00 	call	0x100	; 0x100 <display_readings>

    delay_ms(50);
     260:	82 e3       	ldi	r24, 0x32	; 50
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 29 08 	call	0x1052	; 0x1052 <delay_ms>

    delay_ms(20);
  }
  set_motors(0,0);

  while(!button_is_pressed(BUTTON_B))
     268:	80 e1       	ldi	r24, 0x10	; 16
     26a:	0e 94 f7 05 	call	0xbee	; 0xbee <button_is_pressed>
     26e:	88 23       	and	r24, r24
     270:	d1 f2       	breq	.-76     	; 0x226 <main+0xe8>
    lcd_goto_xy(0,1);
    display_readings(sensors);

    delay_ms(50);
  }
  wait_for_button_release(BUTTON_B);
     272:	80 e1       	ldi	r24, 0x10	; 16
     274:	0e 94 3c 06 	call	0xc78	; 0xc78 <wait_for_button_release>

  clear();
     278:	0e 94 fe 06 	call	0xdfc	; 0xdfc <clear>
  print("Go!");
     27c:	8b e0       	ldi	r24, 0x0B	; 11
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 22 07 	call	0xe44	; 0xe44 <print>

  delay_ms(500);
     284:	84 ef       	ldi	r24, 0xF4	; 244
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 29 08 	call	0x1052	; 0x1052 <delay_ms>

  play("T120 V15 L16" 
     28c:	8f e0       	ldi	r24, 0x0F	; 15
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 bf 05 	call	0xb7e	; 0xb7e <play>
     294:	ee 24       	eor	r14, r14
     296:	ff 24       	eor	r15, r15
       ">c#agaegfe fO5dc#dfdc#<b c#4"
       );

  while(1)
  {
    unsigned int sensors[5] = {1,2,3,4,5};
     298:	6e 01       	movw	r12, r28
     29a:	08 94       	sec
     29c:	c1 1c       	adc	r12, r1
     29e:	d1 1c       	adc	r13, r1
    int dy = y - last_y;
    int diff = y/6 + 5*dy; // the amount to turn RIGHT
    int m1, m2;

    m1 = 255 + diff;
    m2 = 255 - diff;
     2a0:	5f ef       	ldi	r21, 0xFF	; 255
     2a2:	a5 2e       	mov	r10, r21
     2a4:	b1 2c       	mov	r11, r1
       ">c#agaegfe fO5dc#dfdc#<b c#4"
       );

  while(1)
  {
    unsigned int sensors[5] = {1,2,3,4,5};
     2a6:	d6 01       	movw	r26, r12
     2a8:	e6 ed       	ldi	r30, 0xD6	; 214
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	8a e0       	ldi	r24, 0x0A	; 10
     2ae:	01 90       	ld	r0, Z+
     2b0:	0d 92       	st	X+, r0
     2b2:	81 50       	subi	r24, 0x01	; 1
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x170>
    unsigned int position = read_line(sensors);
     2b6:	c6 01       	movw	r24, r12
     2b8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <read_line>
    int y = ((signed int)position) - 2000;
     2bc:	8c 01       	movw	r16, r24
     2be:	00 5d       	subi	r16, 0xD0	; 208
     2c0:	17 40       	sbci	r17, 0x07	; 7
    int dy = y - last_y;
    int diff = y/6 + 5*dy; // the amount to turn RIGHT
     2c2:	c8 01       	movw	r24, r16
     2c4:	8e 19       	sub	r24, r14
     2c6:	9f 09       	sbc	r25, r15
     2c8:	9c 01       	movw	r18, r24
     2ca:	22 0f       	add	r18, r18
     2cc:	33 1f       	adc	r19, r19
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	28 0f       	add	r18, r24
     2d4:	39 1f       	adc	r19, r25
     2d6:	c8 01       	movw	r24, r16
     2d8:	66 e0       	ldi	r22, 0x06	; 6
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 17 0c 	call	0x182e	; 0x182e <__divmodhi4>
     2e0:	26 0f       	add	r18, r22
     2e2:	37 1f       	adc	r19, r23
    int m1, m2;

    m1 = 255 + diff;
     2e4:	c9 01       	movw	r24, r18
     2e6:	81 50       	subi	r24, 0x01	; 1
     2e8:	9f 4f       	sbci	r25, 0xFF	; 255
    m2 = 255 - diff;
     2ea:	b5 01       	movw	r22, r10
     2ec:	62 1b       	sub	r22, r18
     2ee:	73 0b       	sbc	r23, r19

    if(m1 > 255)
     2f0:	8f 3f       	cpi	r24, 0xFF	; 255
     2f2:	91 05       	cpc	r25, r1
     2f4:	21 f0       	breq	.+8      	; 0x2fe <main+0x1c0>
     2f6:	1c f0       	brlt	.+6      	; 0x2fe <main+0x1c0>
     2f8:	8f ef       	ldi	r24, 0xFF	; 255
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <main+0x1c8>
      m1 = 255;
    if(m1 < 0)
     2fe:	97 ff       	sbrs	r25, 7
     300:	02 c0       	rjmp	.+4      	; 0x306 <main+0x1c8>
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
      m1 = 0;
    if(m2 > 255)
     306:	6f 3f       	cpi	r22, 0xFF	; 255
     308:	71 05       	cpc	r23, r1
     30a:	21 f0       	breq	.+8      	; 0x314 <main+0x1d6>
     30c:	1c f0       	brlt	.+6      	; 0x314 <main+0x1d6>
     30e:	6f ef       	ldi	r22, 0xFF	; 255
     310:	70 e0       	ldi	r23, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <main+0x1de>
      m2 = 255;
    if(m2 < 0)
     314:	77 ff       	sbrs	r23, 7
     316:	02 c0       	rjmp	.+4      	; 0x31c <main+0x1de>
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
      m2 = 0;

    set_motors(m1,m2);
     31c:	0e 94 00 02 	call	0x400	; 0x400 <set_motors>
     320:	78 01       	movw	r14, r16
     322:	c1 cf       	rjmp	.-126    	; 0x2a6 <main+0x168>

00000324 <_ZN15OrangutanMotors4initEv>:
	static void setSpeeds(int m1Speed, int m2Speed);


  private:

	static inline void init()
     324:	80 91 02 03 	lds	r24, 0x0302
     328:	88 23       	and	r24, r24
     32a:	f1 f4       	brne	.+60     	; 0x368 <_ZN15OrangutanMotors4initEv+0x44>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;	// this MUST be set before init2() is called
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	80 93 02 03 	sts	0x0302, r24
#endif

	// configure for inverted PWM output on motor control pins:   
    //  set OCxx on compare match, clear on timer overflow   
    //  Timer0 and Timer2 count up from 0 to 255   
    TCCR0A = TCCR2A = 0xF3;
     332:	83 ef       	ldi	r24, 0xF3	; 243
     334:	80 93 b0 00 	sts	0x00B0, r24
     338:	80 91 b0 00 	lds	r24, 0x00B0
     33c:	84 bd       	out	0x24, r24	; 36
  
    // use the system clock/8 (=2.5 MHz) as the timer clock,
	// which will produce a PWM frequency of 10 kHz
    TCCR0B = TCCR2B = 0x02;
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	80 93 b1 00 	sts	0x00B1, r24
     344:	80 91 b1 00 	lds	r24, 0x00B1
     348:	85 bd       	out	0x25, r24	; 37
	// and 3Pi can support PWM frequencies this high.  The
	// Orangutan LV-168 cannot support frequencies above 10 kHz.
    //TCCR0B = TCCR2B = 0x01;

    // initialize all PWMs to 0% duty cycle (braking)   
    OCR0A = OCR0B = OCR2A = OCR2B = 0;   
     34a:	10 92 b4 00 	sts	0x00B4, r1
     34e:	80 91 b4 00 	lds	r24, 0x00B4
     352:	80 93 b3 00 	sts	0x00B3, r24
     356:	80 91 b3 00 	lds	r24, 0x00B3
     35a:	88 bd       	out	0x28, r24	; 40
     35c:	88 b5       	in	r24, 0x28	; 40
     35e:	87 bd       	out	0x27, r24	; 39
  
    // set PWM pins as digital outputs (the PWM signals will not   
    // appear on the lines if they are digital inputs)   
    DDRD |= (1 << PD3) | (1 << PD5) | (1 << PD6);   
     360:	8a b1       	in	r24, 0x0a	; 10
     362:	88 66       	ori	r24, 0x68	; 104
     364:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << PB3);
     366:	23 9a       	sbi	0x04, 3	; 4
     368:	08 95       	ret

0000036a <_ZN15OrangutanMotors10setM1SpeedEi>:


// sets the motor speed.  The sign of 'speed' determines the direction
// and the magnitude determines the speed.  limits: -255 <= speed < 255
// |speed| = 255 produces the maximum speed while speed = 0 is full brake.
void OrangutanMotors::setM1Speed(int speed)
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
{
	init();
     370:	0e 94 92 01 	call	0x324	; 0x324 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
     374:	d7 fd       	sbrc	r29, 7
     376:	02 c0       	rjmp	.+4      	; 0x37c <_ZN15OrangutanMotors10setM1SpeedEi+0x12>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	04 c0       	rjmp	.+8      	; 0x384 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
     37c:	d0 95       	com	r29
     37e:	c1 95       	neg	r28
     380:	df 4f       	sbci	r29, 0xFF	; 255
     382:	21 e0       	ldi	r18, 0x01	; 1
     384:	ce 01       	movw	r24, r28
     386:	cf 3f       	cpi	r28, 0xFF	; 255
     388:	d1 05       	cpc	r29, r1
     38a:	19 f0       	breq	.+6      	; 0x392 <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
     38c:	14 f0       	brlt	.+4      	; 0x392 <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	90 e0       	ldi	r25, 0x00	; 0
		reverse = 1;	// preserve the direction
	}
	if (speed > 0xFF)	// 0xFF = 255
		speed = 0xFF;

	if (reverse)
     392:	22 23       	and	r18, r18
     394:	19 f0       	breq	.+6      	; 0x39c <_ZN15OrangutanMotors10setM1SpeedEi+0x32>
	{
		OCR0B = 0;		// hold one driver input high
     396:	18 bc       	out	0x28, r1	; 40
		OCR0A = speed;	// pwm the other input
     398:	87 bd       	out	0x27, r24	; 39
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <_ZN15OrangutanMotors10setM1SpeedEi+0x36>
	}
	else	// forward
	{
		OCR0B = speed;	// pwm one driver input
     39c:	88 bd       	out	0x28, r24	; 40
		OCR0A = 0;		// hold the other driver input high
     39e:	17 bc       	out	0x27, r1	; 39
	}
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <_ZN15OrangutanMotors10setM2SpeedEi>:


void OrangutanMotors::setM2Speed(int speed)
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	ec 01       	movw	r28, r24
{
	init();
     3ac:	0e 94 92 01 	call	0x324	; 0x324 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
     3b0:	d7 fd       	sbrc	r29, 7
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_ZN15OrangutanMotors10setM2SpeedEi+0x12>
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
     3b8:	d0 95       	com	r29
     3ba:	c1 95       	neg	r28
     3bc:	df 4f       	sbci	r29, 0xFF	; 255
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	ce 01       	movw	r24, r28
     3c2:	cf 3f       	cpi	r28, 0xFF	; 255
     3c4:	d1 05       	cpc	r29, r1
     3c6:	19 f0       	breq	.+6      	; 0x3ce <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
     3c8:	14 f0       	brlt	.+4      	; 0x3ce <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	90 e0       	ldi	r25, 0x00	; 0
		reverse = 1;	// preserve the direction
	}
	if (speed > 0xFF)	// 0xFF = 255
		speed = 0xFF;

	if (reverse)
     3ce:	22 23       	and	r18, r18
     3d0:	29 f0       	breq	.+10     	; 0x3dc <_ZN15OrangutanMotors10setM2SpeedEi+0x36>
	{
		OCR2B = 0;		// hold one driver input high
     3d2:	10 92 b4 00 	sts	0x00B4, r1
		OCR2A = speed;	// pwm the other input
     3d6:	80 93 b3 00 	sts	0x00B3, r24
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <_ZN15OrangutanMotors10setM2SpeedEi+0x3e>
	}
	else	// forward
	{
		OCR2B = speed;	// pwm one driver input
     3dc:	80 93 b4 00 	sts	0x00B4, r24
		OCR2A = 0;		// hold the other driver input high
     3e0:	10 92 b3 00 	sts	0x00B3, r1
	}
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <_ZN15OrangutanMotors9setSpeedsEii>:


void OrangutanMotors::setSpeeds(int m1Speed, int m2Speed)
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	8b 01       	movw	r16, r22
{
	setM1Speed(m1Speed);
     3f0:	0e 94 b5 01 	call	0x36a	; 0x36a <_ZN15OrangutanMotors10setM1SpeedEi>
	setM2Speed(m2Speed);
     3f4:	c8 01       	movw	r24, r16
     3f6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <_ZN15OrangutanMotors10setM2SpeedEi>
}
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	08 95       	ret

00000400 <set_motors>:
extern "C" void set_m2_speed(int speed)
{
	OrangutanMotors::setM2Speed(speed);
}

extern "C" void set_motors(int m1, int m2)
     400:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN15OrangutanMotors9setSpeedsEii>
{
	OrangutanMotors::setSpeeds(m1, m2);
}
     404:	08 95       	ret

00000406 <_ZN15OrangutanBuzzer4initEv>:
	
	// initializes timer1 for buzzer control
	static void init2();
	
	// this is called by playFrequency()
	static inline void init()
     406:	80 91 03 03 	lds	r24, 0x0303
     40a:	88 23       	and	r24, r24
     40c:	f1 f4       	brne	.+60     	; 0x44a <_ZN15OrangutanBuzzer4initEv+0x44>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	20 93 03 03 	sts	0x0303, r18
#endif

// initializes timer1 for buzzer control
void OrangutanBuzzer::init2()
{
	DDRB &= ~(1 << PB2);		// buzzer pin set as input
     414:	22 98       	cbi	0x04, 2	; 4

	TCCR1A = 0x23;	// bits 6 and 7 clear: normal port op., OC1A disconnected
     416:	83 e2       	ldi	r24, 0x23	; 35
     418:	80 93 80 00 	sts	0x0080, r24
					// bit 4 clear, 5 set: clear OC1B on compare match
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...

	TCCR1B = 0x19;	// bit 7 clear: input capture noise canceler disabled
     41c:	89 e1       	ldi	r24, 0x19	; 25
     41e:	80 93 81 00 	sts	0x0081, r24
					// bits 3 and 4 set: combine with bits 0 & 1 of TCCR1A to
					// 		select waveform generation mode 14, fast PWM,
					//		TOP = OCR1A, OCR1B set at TOP, TOV1 flag set at TOP
					// bit 0 set, 1-2 clear: timer clock = IO clk (prescaler 1)

	TCCR1C = 0x00;	// bit 7 clear: no force output compare for channel A
     422:	10 92 82 00 	sts	0x0082, r1
	//   on compare match, set at TOP; OC1B is disconnected.
	//   Note: if the PWM frequency and duty cycle are changed, the first
	//   cycle of the new frequency will be at the old duty cycle, since
	//   the duty cycle (OCR1A) is not updated until TOP.

	OCR1A = F_CPU / 1000;					// set TOP for freq = 1 kHz
     426:	80 e2       	ldi	r24, 0x20	; 32
     428:	9e e4       	ldi	r25, 0x4E	; 78
     42a:	90 93 89 00 	sts	0x0089, r25
     42e:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;								// set 0% duty cycle
     432:	10 92 8b 00 	sts	0x008B, r1
     436:	10 92 8a 00 	sts	0x008A, r1
	TCNT1 = 0;								// clear counter register
     43a:	10 92 85 00 	sts	0x0085, r1
     43e:	10 92 84 00 	sts	0x0084, r1

	TIFR1 = 0xFF;							// clear all timer1 interrupt flags
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	86 bb       	out	0x16, r24	; 22
	ENABLE_TIMER1_INTERRUPT();				// overflow interrupt enabled
     446:	20 93 6f 00 	sts	0x006F, r18
     44a:	08 95       	ret

0000044c <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
//   means that you can't use a max duration of 65535 ms for frequencies
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
     44c:	a0 e0       	ldi	r26, 0x00	; 0
     44e:	b0 e0       	ldi	r27, 0x00	; 0
     450:	ec e2       	ldi	r30, 0x2C	; 44
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__prologue_saves__+0x10>
     458:	8c 01       	movw	r16, r24
     45a:	5b 01       	movw	r10, r22
     45c:	c4 2e       	mov	r12, r20
	unsigned int newOCR1A;
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
	
	init();		// initializes the buzzer if necessary
     45e:	0e 94 03 02 	call	0x406	; 0x406 <_ZN15OrangutanBuzzer4initEv>

	buzzerFinished = 0;
     462:	10 92 f4 02 	sts	0x02F4, r1

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
     466:	17 fd       	sbrc	r17, 7
     468:	03 c0       	rjmp	.+6      	; 0x470 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x24>
     46a:	dd 24       	eor	r13, r13
     46c:	d3 94       	inc	r13
     46e:	03 c0       	rjmp	.+6      	; 0x476 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
	{							//   then the true frequency is freq/10
		multiplier = 10;		//   (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
     470:	1f 77       	andi	r17, 0x7F	; 127
     472:	9a e0       	ldi	r25, 0x0A	; 10
     474:	d9 2e       	mov	r13, r25
	}

	newTCCR1B = TCCR1B & 0xF8;	// clear clock select bits
     476:	80 91 81 00 	lds	r24, 0x0081
     47a:	e8 2e       	mov	r14, r24
     47c:	ff 24       	eor	r15, r15
     47e:	48 ef       	ldi	r20, 0xF8	; 248
     480:	e4 22       	and	r14, r20
     482:	ff 24       	eor	r15, r15

	// calculate necessary clock source and counter top value to get freq
	if (freq > 400 * ((unsigned int)multiplier))	// clock prescaler = 1
     484:	2d 2d       	mov	r18, r13
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	80 e9       	ldi	r24, 0x90	; 144
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	ac 01       	movw	r20, r24
     48e:	24 9f       	mul	r18, r20
     490:	c0 01       	movw	r24, r0
     492:	25 9f       	mul	r18, r21
     494:	90 0d       	add	r25, r0
     496:	34 9f       	mul	r19, r20
     498:	90 0d       	add	r25, r0
     49a:	11 24       	eor	r1, r1
     49c:	80 17       	cp	r24, r16
     49e:	91 07       	cpc	r25, r17
     4a0:	b0 f4       	brcc	.+44     	; 0x4ce <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x82>
     4a2:	e8 01       	movw	r28, r16
     4a4:	57 e2       	ldi	r21, 0x27	; 39
     4a6:	01 31       	cpi	r16, 0x11	; 17
     4a8:	15 07       	cpc	r17, r21
     4aa:	10 f0       	brcs	.+4      	; 0x4b0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x64>
     4ac:	c0 e1       	ldi	r28, 0x10	; 16
     4ae:	d7 e2       	ldi	r29, 0x27	; 39
	{
		if (freq > 10000)
			freq = 10000;			// max frequency allowed is 10kHz

		newOCR1A = (unsigned int)(20000000UL / freq);
     4b0:	9e 01       	movw	r18, r28
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	7d e2       	ldi	r23, 0x2D	; 45
     4ba:	81 e3       	ldi	r24, 0x31	; 49
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
     4c2:	89 01       	movw	r16, r18

		// timer1 clock select:
		newTCCR1B |= TIMER1_CLK_1;	// select IO clk (prescaler = 1)
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	e8 2a       	or	r14, r24
     4ca:	f9 2a       	or	r15, r25
     4cc:	20 c0       	rjmp	.+64     	; 0x50e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc2>
     4ce:	88 e2       	ldi	r24, 0x28	; 40
     4d0:	d8 9e       	mul	r13, r24
     4d2:	80 2d       	mov	r24, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	c8 2f       	mov	r28, r24
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
     4da:	c0 17       	cp	r28, r16
     4dc:	d1 07       	cpc	r29, r17
     4de:	08 f4       	brcc	.+2      	; 0x4e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x96>
     4e0:	e8 01       	movw	r28, r16
     4e2:	9e 01       	movw	r18, r28
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
		unsigned char val = 40 * multiplier;
		if (freq < val)				// min frequency allowed is 40 Hz
			freq = val;

		// set top (frequency):
		if (multiplier == 10)
     4e8:	9a e0       	ldi	r25, 0x0A	; 10
     4ea:	d9 16       	cp	r13, r25
     4ec:	29 f4       	brne	.+10     	; 0x4f8 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xac>
			newOCR1A = (unsigned int)(25000000UL / freq);
     4ee:	60 e4       	ldi	r22, 0x40	; 64
     4f0:	78 e7       	ldi	r23, 0x78	; 120
     4f2:	8d e7       	ldi	r24, 0x7D	; 125
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	04 c0       	rjmp	.+8      	; 0x500 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb4>
		else
			newOCR1A = (unsigned int)(2500000UL / freq);
     4f8:	60 ea       	ldi	r22, 0xA0	; 160
     4fa:	75 e2       	ldi	r23, 0x25	; 37
     4fc:	86 e2       	ldi	r24, 0x26	; 38
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
     504:	89 01       	movw	r16, r18

		// timer1 clock select
		newTCCR1B |= TIMER1_CLK_8;	// select IO clk / 8
     506:	42 e0       	ldi	r20, 0x02	; 2
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	e4 2a       	or	r14, r20
     50c:	f5 2a       	or	r15, r21
	}


	// set timeout (duration):
	if (multiplier == 10)
     50e:	5a e0       	ldi	r21, 0x0A	; 10
     510:	d5 16       	cp	r13, r21
     512:	39 f4       	brne	.+14     	; 0x522 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd6>
		freq = (freq + 5) / 10;
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	6a e0       	ldi	r22, 0x0A	; 10
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
     520:	eb 01       	movw	r28, r22

	if (freq == 1000)
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	c8 3e       	cpi	r28, 0xE8	; 232
     526:	d8 07       	cpc	r29, r24
     528:	11 f4       	brne	.+4      	; 0x52e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe2>
     52a:	b5 01       	movw	r22, r10
     52c:	0f c0       	rjmp	.+30     	; 0x54c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x100>
		timeout = dur;	// duration for silent notes is exact
	else
		timeout = (unsigned int)((long)dur * freq / 1000);
     52e:	be 01       	movw	r22, r28
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	95 01       	movw	r18, r10
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
     53e:	28 ee       	ldi	r18, 0xE8	; 232
     540:	33 e0       	ldi	r19, 0x03	; 3
     542:	40 e0       	ldi	r20, 0x00	; 0
     544:	50 e0       	ldi	r21, 0x00	; 0
     546:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__divmodsi4>
     54a:	b9 01       	movw	r22, r18

	if (volume == 0)
     54c:	cc 20       	and	r12, r12
     54e:	11 f4       	brne	.+4      	; 0x554 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x108>
		DDRB &= ~(1 << PB2);		// buzzer pin->input (silence buz.)
     550:	22 98       	cbi	0x04, 2	; 4
     552:	06 c0       	rjmp	.+12     	; 0x560 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x114>
	else
		DDRB |= 1 << PB2;			// buzzer pin->output
     554:	22 9a       	sbi	0x04, 2	; 4
     556:	9f e0       	ldi	r25, 0x0F	; 15
     558:	9c 15       	cp	r25, r12
     55a:	10 f4       	brcc	.+4      	; 0x560 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x114>
     55c:	8f e0       	ldi	r24, 0x0F	; 15
     55e:	c8 2e       	mov	r12, r24

	if (volume > 15)
		volume = 15;

	DISABLE_TIMER1_INTERRUPT();			// disable interrupts while writing to 16-bit registers
     560:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = newTCCR1B;					// select timer 1 clock prescaler
     564:	e0 92 81 00 	sts	0x0081, r14
	OCR1A = newOCR1A;					// set timer 1 pwm frequency
     568:	10 93 89 00 	sts	0x0089, r17
     56c:	00 93 88 00 	sts	0x0088, r16
	OCR1B = OCR1A >> (16 - volume);		// set duty cycle (volume)
     570:	80 91 88 00 	lds	r24, 0x0088
     574:	90 91 89 00 	lds	r25, 0x0089
     578:	20 e1       	ldi	r18, 0x10	; 16
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	2c 19       	sub	r18, r12
     57e:	31 09       	sbc	r19, r1
     580:	02 c0       	rjmp	.+4      	; 0x586 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x13a>
     582:	96 95       	lsr	r25
     584:	87 95       	ror	r24
     586:	2a 95       	dec	r18
     588:	e2 f7       	brpl	.-8      	; 0x582 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x136>
     58a:	90 93 8b 00 	sts	0x008B, r25
     58e:	80 93 8a 00 	sts	0x008A, r24
	buzzerTimeout = timeout;			// set buzzer duration
     592:	70 93 10 03 	sts	0x0310, r23
     596:	60 93 0f 03 	sts	0x030F, r22
	ENABLE_TIMER1_INTERRUPT();
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 6f 00 	sts	0x006F, r24
	sei();
     5a0:	78 94       	sei
}
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	ea e0       	ldi	r30, 0x0A	; 10
     5a8:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__epilogue_restores__+0x10>

000005ac <_ZN15OrangutanBuzzer8playNoteEhjh>:
//   means that you can't use a max duration of 65535 ms for frequencies
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playNote(unsigned char note, unsigned int dur,
							   unsigned char volume)
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	eb 01       	movw	r28, r22
	// of resolution for low frequencies without the need for using floats.

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0)
     5b2:	8f 3f       	cpi	r24, 0xFF	; 255
     5b4:	11 f0       	breq	.+4      	; 0x5ba <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     5b6:	44 23       	and	r20, r20
     5b8:	29 f4       	brne	.+10     	; 0x5c4 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
	{
		freq = 1000;	// silent notes => use 1kHz freq (for cycle counter)
		playFrequency(freq, dur, 0);
     5ba:	40 e0       	ldi	r20, 0x00	; 0
     5bc:	be 01       	movw	r22, r28
     5be:	88 ee       	ldi	r24, 0xE8	; 232
     5c0:	93 e0       	ldi	r25, 0x03	; 3
     5c2:	67 c0       	rjmp	.+206    	; 0x692 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe6>
		return;
	}

	if (note <= 16)
     5c4:	81 31       	cpi	r24, 0x11	; 17
     5c6:	10 f4       	brcc	.+4      	; 0x5cc <_ZN15OrangutanBuzzer8playNoteEhjh+0x20>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
	// the units for frequency are .1 Hz, not Hz, and freq must be divided
	// by 10 to get the true frequency in Hz.  This allows for an extra digit
	// of resolution for low frequencies without the need for using floats.

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;
     5cc:	28 2f       	mov	r18, r24
     5ce:	20 51       	subi	r18, 0x10	; 16
     5d0:	20 36       	cpi	r18, 0x60	; 96
     5d2:	08 f0       	brcs	.+2      	; 0x5d6 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     5d4:	2f e5       	ldi	r18, 0x5F	; 95
	if (note <= 16)
		offset_note = 0;
	else if (offset_note > 95)
		offset_note = 95;

	unsigned char exponent = offset_note / 12;
     5d6:	82 2f       	mov	r24, r18
     5d8:	6c e0       	ldi	r22, 0x0C	; 12
     5da:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__udivmodqi4>
     5de:	38 2f       	mov	r19, r24

	// frequency table for the lowest 12 allowed notes
	//   frequencies are specified in tenths of a Hertz for added resolution
	switch (offset_note - exponent * 12)	// equivalent to (offset_note % 12)
     5e0:	68 2f       	mov	r22, r24
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	84 ef       	ldi	r24, 0xF4	; 244
     5e6:	9f ef       	ldi	r25, 0xFF	; 255
     5e8:	68 9f       	mul	r22, r24
     5ea:	f0 01       	movw	r30, r0
     5ec:	69 9f       	mul	r22, r25
     5ee:	f0 0d       	add	r31, r0
     5f0:	78 9f       	mul	r23, r24
     5f2:	f0 0d       	add	r31, r0
     5f4:	11 24       	eor	r1, r1
     5f6:	e2 0f       	add	r30, r18
     5f8:	f1 1d       	adc	r31, r1
     5fa:	ec 30       	cpi	r30, 0x0C	; 12
     5fc:	f1 05       	cpc	r31, r1
     5fe:	38 f4       	brcc	.+14     	; 0x60e <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     600:	ea 5b       	subi	r30, 0xBA	; 186
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__tablejump2__>
     608:	8c e9       	ldi	r24, 0x9C	; 156
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	23 c0       	rjmp	.+70     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	20 c0       	rjmp	.+64     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     614:	85 eb       	ldi	r24, 0xB5	; 181
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	1d c0       	rjmp	.+58     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 0:				// note E1 = 41.2 Hz
			freq = 412;
			break;
		case 1:				// note F1 = 43.7 Hz
			freq = 437;
			break;
     61a:	8f ec       	ldi	r24, 0xCF	; 207
     61c:	91 e0       	ldi	r25, 0x01	; 1
     61e:	1a c0       	rjmp	.+52     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 2:				// note F#1 = 46.3 Hz
			freq = 463;
			break;
     620:	8a ee       	ldi	r24, 0xEA	; 234
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	17 c0       	rjmp	.+46     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 3:				// note G1 = 49.0 Hz
			freq = 490;
			break;
     626:	87 e0       	ldi	r24, 0x07	; 7
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	14 c0       	rjmp	.+40     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 4:				// note G#1 = 51.9 Hz
			freq = 519;
			break;
     62c:	86 e2       	ldi	r24, 0x26	; 38
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	11 c0       	rjmp	.+34     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 5:				// note A1 = 55.0 Hz
			freq = 550;
			break;
     632:	87 e4       	ldi	r24, 0x47	; 71
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	0e c0       	rjmp	.+28     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 6:				// note A#1 = 58.3 Hz
			freq = 583;
			break;
     638:	89 e6       	ldi	r24, 0x69	; 105
     63a:	92 e0       	ldi	r25, 0x02	; 2
     63c:	0b c0       	rjmp	.+22     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 7:				// note B1 = 61.7 Hz
			freq = 617;
			break;
     63e:	8e e8       	ldi	r24, 0x8E	; 142
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	08 c0       	rjmp	.+16     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 8:				// note C2 = 65.4 Hz
			freq = 654;
			break;
     644:	85 eb       	ldi	r24, 0xB5	; 181
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	05 c0       	rjmp	.+10     	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 9:				// note C#2 = 69.3 Hz
			freq = 693;
			break;
     64a:	8e ed       	ldi	r24, 0xDE	; 222
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	02 c0       	rjmp	.+4      	; 0x654 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 10:			// note D2 = 73.4 Hz
			freq = 734;
			break;
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	93 e0       	ldi	r25, 0x03	; 3
		case 11:			// note D#2 = 77.8 Hz
			freq = 778;
			break;
	}

	if (exponent < 7)
     654:	37 30       	cpi	r19, 0x07	; 7
     656:	71 f0       	breq	.+28     	; 0x674 <_ZN15OrangutanBuzzer8playNoteEhjh+0xc8>
	{
		freq = freq << exponent;	// frequency *= 2 ^ exponent
     658:	02 c0       	rjmp	.+4      	; 0x65e <_ZN15OrangutanBuzzer8playNoteEhjh+0xb2>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	6a 95       	dec	r22
     660:	e2 f7       	brpl	.-8      	; 0x65a <_ZN15OrangutanBuzzer8playNoteEhjh+0xae>
		if (exponent > 1)			// if the frequency is greater than 160 Hz
     662:	32 30       	cpi	r19, 0x02	; 2
     664:	20 f0       	brcs	.+8      	; 0x66e <_ZN15OrangutanBuzzer8playNoteEhjh+0xc2>
			freq = (freq + 5) / 10;	//   we don't need the extra resolution
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	6a e0       	ldi	r22, 0x0A	; 10
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	0b c0       	rjmp	.+22     	; 0x684 <_ZN15OrangutanBuzzer8playNoteEhjh+0xd8>
		else
			freq += DIV_BY_10;		// else keep the added digit of resolution
     66e:	80 50       	subi	r24, 0x00	; 0
     670:	90 48       	sbci	r25, 0x80	; 128
     672:	0b c0       	rjmp	.+22     	; 0x68a <_ZN15OrangutanBuzzer8playNoteEhjh+0xde>
	}
	else
		freq = (freq * 64 + 2) / 5;	// == freq * 2^7 / 10 without int overflow
     674:	26 e0       	ldi	r18, 0x06	; 6
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	2a 95       	dec	r18
     67c:	e1 f7       	brne	.-8      	; 0x676 <_ZN15OrangutanBuzzer8playNoteEhjh+0xca>
     67e:	02 96       	adiw	r24, 0x02	; 2
     680:	65 e0       	ldi	r22, 0x05	; 5
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
     688:	cb 01       	movw	r24, r22

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);	// set buzzer this freq/duration
     68a:	40 31       	cpi	r20, 0x10	; 16
     68c:	08 f0       	brcs	.+2      	; 0x690 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe4>
     68e:	4f e0       	ldi	r20, 0x0F	; 15
     690:	be 01       	movw	r22, r28
     692:	0e 94 26 02 	call	0x44c	; 0x44c <_ZN15OrangutanBuzzer13playFrequencyEjjh>
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <_Z11getDurationv>:

	return arg;
}

// Returns whole_note_duration/getNumber()
unsigned int getDuration()
     69c:	40 91 0b 03 	lds	r20, 0x030B
     6a0:	50 91 0c 03 	lds	r21, 0x030C
     6a4:	e0 91 07 03 	lds	r30, 0x0307
     6a8:	f0 91 08 03 	lds	r31, 0x0308
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	12 c0       	rjmp	.+36     	; 0x6d6 <_Z11getDurationv+0x3a>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     6b2:	cb 01       	movw	r24, r22
     6b4:	b3 e0       	ldi	r27, 0x03	; 3
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	ba 95       	dec	r27
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <_Z11getDurationv+0x1a>
     6be:	66 0f       	add	r22, r22
     6c0:	77 1f       	adc	r23, r23
     6c2:	86 0f       	add	r24, r22
     6c4:	97 1f       	adc	r25, r23
		arg += *sequence-'0';
     6c6:	62 2f       	mov	r22, r18
     6c8:	77 27       	eor	r23, r23
     6ca:	67 fd       	sbrc	r22, 7
     6cc:	70 95       	com	r23
     6ce:	60 53       	subi	r22, 0x30	; 48
     6d0:	70 40       	sbci	r23, 0x00	; 0
     6d2:	68 0f       	add	r22, r24
     6d4:	79 1f       	adc	r23, r25
     6d6:	9e 2f       	mov	r25, r30
     6d8:	3f 2f       	mov	r19, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     6da:	21 91       	ld	r18, Z+
     6dc:	82 2f       	mov	r24, r18
     6de:	80 53       	subi	r24, 0x30	; 48
     6e0:	8a 30       	cpi	r24, 0x0A	; 10
     6e2:	38 f3       	brcs	.-50     	; 0x6b2 <_Z11getDurationv+0x16>
     6e4:	90 93 07 03 	sts	0x0307, r25
     6e8:	30 93 08 03 	sts	0x0308, r19
     6ec:	ca 01       	movw	r24, r20
     6ee:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
     6f2:	cb 01       	movw	r24, r22

// Returns whole_note_duration/getNumber()
unsigned int getDuration()
{
	return whole_note_duration/getNumber();
}
     6f4:	08 95       	ret

000006f6 <_Z8nextNotev>:

void nextNote()
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
{
	unsigned char note = 0;
	unsigned char rest = 0;
	unsigned char tmp_octave = octave; // the octave for this note
     702:	f0 90 04 03 	lds	r15, 0x0304
	unsigned int dot_add;

	char c; // temporary variable

	// if we are playing staccato, after every note we play a rest
	if(staccato && staccato_rest_duration)
     706:	10 91 05 03 	lds	r17, 0x0305
     70a:	11 23       	and	r17, r17
     70c:	21 f0       	breq	.+8      	; 0x716 <_Z8nextNotev+0x20>
     70e:	60 91 06 03 	lds	r22, 0x0306
     712:	66 23       	and	r22, r22
     714:	61 f4       	brne	.+24     	; 0x72e <_Z8nextNotev+0x38>
     716:	00 91 06 03 	lds	r16, 0x0306
     71a:	20 91 09 03 	lds	r18, 0x0309
     71e:	30 91 0a 03 	lds	r19, 0x030A
     722:	c0 91 0d 03 	lds	r28, 0x030D
     726:	d0 91 0e 03 	lds	r29, 0x030E
     72a:	ef 2c       	mov	r14, r15
     72c:	08 c0       	rjmp	.+16     	; 0x73e <_Z8nextNotev+0x48>
	{
		OrangutanBuzzer::playNote(20, staccato_rest_duration, 0);
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	84 e1       	ldi	r24, 0x14	; 20
     734:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN15OrangutanBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
     738:	10 92 06 03 	sts	0x0306, r1
     73c:	f2 c1       	rjmp	.+996    	; 0xb22 <_Z8nextNotev+0x42c>
		return;
     73e:	e0 91 07 03 	lds	r30, 0x0307
     742:	f0 91 08 03 	lds	r31, 0x0308
	}

 parse_character:

	// Convert the current character to lower case.
	c = *sequence;
     746:	90 81       	ld	r25, Z
	if(c >= 'A' && c <= 'Z')
     748:	89 2f       	mov	r24, r25
     74a:	81 54       	subi	r24, 0x41	; 65
     74c:	8a 31       	cpi	r24, 0x1A	; 26
     74e:	08 f4       	brcc	.+2      	; 0x752 <_Z8nextNotev+0x5c>
		c += 'a'-'A';
     750:	90 5e       	subi	r25, 0xE0	; 224
     752:	31 96       	adiw	r30, 0x01	; 1

	// Advance to the next character.
	sequence ++;

	// Interpret the character.
	switch(c)
     754:	96 36       	cpi	r25, 0x66	; 102
     756:	09 f4       	brne	.+2      	; 0x75a <_Z8nextNotev+0x64>
     758:	a3 c0       	rjmp	.+326    	; 0x8a0 <_Z8nextNotev+0x1aa>
     75a:	97 36       	cpi	r25, 0x67	; 103
     75c:	d4 f4       	brge	.+52     	; 0x792 <_Z8nextNotev+0x9c>
     75e:	92 36       	cpi	r25, 0x62	; 98
     760:	09 f4       	brne	.+2      	; 0x764 <_Z8nextNotev+0x6e>
     762:	4e c0       	rjmp	.+156    	; 0x800 <_Z8nextNotev+0x10a>
     764:	93 36       	cpi	r25, 0x63	; 99
     766:	74 f4       	brge	.+28     	; 0x784 <_Z8nextNotev+0x8e>
     768:	9e 33       	cpi	r25, 0x3E	; 62
     76a:	f1 f1       	breq	.+124    	; 0x7e8 <_Z8nextNotev+0xf2>
     76c:	9f 33       	cpi	r25, 0x3F	; 63
     76e:	34 f4       	brge	.+12     	; 0x77c <_Z8nextNotev+0x86>
     770:	90 32       	cpi	r25, 0x20	; 32
     772:	49 f3       	breq	.-46     	; 0x746 <_Z8nextNotev+0x50>
     774:	9c 33       	cpi	r25, 0x3C	; 60
     776:	09 f0       	breq	.+2      	; 0x77a <_Z8nextNotev+0x84>
     778:	5d c1       	rjmp	.+698    	; 0xa34 <_Z8nextNotev+0x33e>
     77a:	3c c0       	rjmp	.+120    	; 0x7f4 <_Z8nextNotev+0xfe>
     77c:	91 36       	cpi	r25, 0x61	; 97
     77e:	09 f0       	breq	.+2      	; 0x782 <_Z8nextNotev+0x8c>
     780:	59 c1       	rjmp	.+690    	; 0xa34 <_Z8nextNotev+0x33e>
     782:	6b c1       	rjmp	.+726    	; 0xa5a <_Z8nextNotev+0x364>
     784:	94 36       	cpi	r25, 0x64	; 100
     786:	09 f4       	brne	.+2      	; 0x78a <_Z8nextNotev+0x94>
     788:	63 c0       	rjmp	.+198    	; 0x850 <_Z8nextNotev+0x15a>
     78a:	95 36       	cpi	r25, 0x65	; 101
     78c:	0c f0       	brlt	.+2      	; 0x790 <_Z8nextNotev+0x9a>
     78e:	74 c0       	rjmp	.+232    	; 0x878 <_Z8nextNotev+0x182>
     790:	4b c0       	rjmp	.+150    	; 0x828 <_Z8nextNotev+0x132>
     792:	9f 36       	cpi	r25, 0x6F	; 111
     794:	11 f1       	breq	.+68     	; 0x7da <_Z8nextNotev+0xe4>
     796:	90 37       	cpi	r25, 0x70	; 112
     798:	54 f4       	brge	.+20     	; 0x7ae <_Z8nextNotev+0xb8>
     79a:	9c 36       	cpi	r25, 0x6C	; 108
     79c:	09 f4       	brne	.+2      	; 0x7a0 <_Z8nextNotev+0xaa>
     79e:	a8 c0       	rjmp	.+336    	; 0x8f0 <_Z8nextNotev+0x1fa>
     7a0:	9d 36       	cpi	r25, 0x6D	; 109
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <_Z8nextNotev+0xb0>
     7a4:	ad c0       	rjmp	.+346    	; 0x900 <_Z8nextNotev+0x20a>
     7a6:	97 36       	cpi	r25, 0x67	; 103
     7a8:	09 f0       	breq	.+2      	; 0x7ac <_Z8nextNotev+0xb6>
     7aa:	44 c1       	rjmp	.+648    	; 0xa34 <_Z8nextNotev+0x33e>
     7ac:	8d c0       	rjmp	.+282    	; 0x8c8 <_Z8nextNotev+0x1d2>
     7ae:	94 37       	cpi	r25, 0x74	; 116
     7b0:	69 f0       	breq	.+26     	; 0x7cc <_Z8nextNotev+0xd6>
     7b2:	96 37       	cpi	r25, 0x76	; 118
     7b4:	21 f0       	breq	.+8      	; 0x7be <_Z8nextNotev+0xc8>
     7b6:	92 37       	cpi	r25, 0x72	; 114
     7b8:	09 f0       	breq	.+2      	; 0x7bc <_Z8nextNotev+0xc6>
     7ba:	3c c1       	rjmp	.+632    	; 0xa34 <_Z8nextNotev+0x33e>
     7bc:	d4 c0       	rjmp	.+424    	; 0x966 <_Z8nextNotev+0x270>
     7be:	f0 93 08 03 	sts	0x0308, r31
     7c2:	e0 93 07 03 	sts	0x0307, r30
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	28 c1       	rjmp	.+592    	; 0xa1c <_Z8nextNotev+0x326>
     7cc:	f0 93 08 03 	sts	0x0308, r31
     7d0:	e0 93 07 03 	sts	0x0307, r30
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	ed c0       	rjmp	.+474    	; 0x9b4 <_Z8nextNotev+0x2be>
     7da:	f0 93 08 03 	sts	0x0308, r31
     7de:	e0 93 07 03 	sts	0x0307, r30
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	b1 c0       	rjmp	.+354    	; 0x94a <_Z8nextNotev+0x254>
     7e8:	f0 93 08 03 	sts	0x0308, r31
     7ec:	e0 93 07 03 	sts	0x0307, r30
	case ' ':
		// ignore spaces
		goto parse_character;
	case '>':
		// shift the octave temporarily up
		tmp_octave ++;
     7f0:	e3 94       	inc	r14
     7f2:	a5 cf       	rjmp	.-182    	; 0x73e <_Z8nextNotev+0x48>
		goto parse_character;
     7f4:	f0 93 08 03 	sts	0x0308, r31
     7f8:	e0 93 07 03 	sts	0x0307, r30
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
     7fc:	ea 94       	dec	r14
     7fe:	9f cf       	rjmp	.-194    	; 0x73e <_Z8nextNotev+0x48>
		goto parse_character;
     800:	00 93 06 03 	sts	0x0306, r16
     804:	10 93 05 03 	sts	0x0305, r17
     808:	30 93 0a 03 	sts	0x030A, r19
     80c:	20 93 09 03 	sts	0x0309, r18
     810:	f0 92 04 03 	sts	0x0304, r15
     814:	d0 93 0e 03 	sts	0x030E, r29
     818:	c0 93 0d 03 	sts	0x030D, r28
     81c:	f0 93 08 03 	sts	0x0308, r31
     820:	e0 93 07 03 	sts	0x0307, r30
     824:	2b e0       	ldi	r18, 0x0B	; 11
     826:	2c c1       	rjmp	.+600    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'a':
		note = A(0);
		break;
	case 'b':
		note = B(0);
		break;
     828:	00 93 06 03 	sts	0x0306, r16
     82c:	10 93 05 03 	sts	0x0305, r17
     830:	30 93 0a 03 	sts	0x030A, r19
     834:	20 93 09 03 	sts	0x0309, r18
     838:	f0 92 04 03 	sts	0x0304, r15
     83c:	d0 93 0e 03 	sts	0x030E, r29
     840:	c0 93 0d 03 	sts	0x030D, r28
     844:	f0 93 08 03 	sts	0x0308, r31
     848:	e0 93 07 03 	sts	0x0307, r30
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	18 c1       	rjmp	.+560    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'c':
		note = C(0);
		break;
     850:	00 93 06 03 	sts	0x0306, r16
     854:	10 93 05 03 	sts	0x0305, r17
     858:	30 93 0a 03 	sts	0x030A, r19
     85c:	20 93 09 03 	sts	0x0309, r18
     860:	f0 92 04 03 	sts	0x0304, r15
     864:	d0 93 0e 03 	sts	0x030E, r29
     868:	c0 93 0d 03 	sts	0x030D, r28
     86c:	f0 93 08 03 	sts	0x0308, r31
     870:	e0 93 07 03 	sts	0x0307, r30
     874:	22 e0       	ldi	r18, 0x02	; 2
     876:	04 c1       	rjmp	.+520    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'd':
		note = D(0);
		break;
     878:	00 93 06 03 	sts	0x0306, r16
     87c:	10 93 05 03 	sts	0x0305, r17
     880:	30 93 0a 03 	sts	0x030A, r19
     884:	20 93 09 03 	sts	0x0309, r18
     888:	f0 92 04 03 	sts	0x0304, r15
     88c:	d0 93 0e 03 	sts	0x030E, r29
     890:	c0 93 0d 03 	sts	0x030D, r28
     894:	f0 93 08 03 	sts	0x0308, r31
     898:	e0 93 07 03 	sts	0x0307, r30
     89c:	24 e0       	ldi	r18, 0x04	; 4
     89e:	f0 c0       	rjmp	.+480    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'e':
		note = E(0);
		break;
     8a0:	00 93 06 03 	sts	0x0306, r16
     8a4:	10 93 05 03 	sts	0x0305, r17
     8a8:	30 93 0a 03 	sts	0x030A, r19
     8ac:	20 93 09 03 	sts	0x0309, r18
     8b0:	f0 92 04 03 	sts	0x0304, r15
     8b4:	d0 93 0e 03 	sts	0x030E, r29
     8b8:	c0 93 0d 03 	sts	0x030D, r28
     8bc:	f0 93 08 03 	sts	0x0308, r31
     8c0:	e0 93 07 03 	sts	0x0307, r30
     8c4:	25 e0       	ldi	r18, 0x05	; 5
     8c6:	dc c0       	rjmp	.+440    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'f':
		note = F(0);
		break;
     8c8:	00 93 06 03 	sts	0x0306, r16
     8cc:	10 93 05 03 	sts	0x0305, r17
     8d0:	30 93 0a 03 	sts	0x030A, r19
     8d4:	20 93 09 03 	sts	0x0309, r18
     8d8:	f0 92 04 03 	sts	0x0304, r15
     8dc:	d0 93 0e 03 	sts	0x030E, r29
     8e0:	c0 93 0d 03 	sts	0x030D, r28
     8e4:	f0 93 08 03 	sts	0x0308, r31
     8e8:	e0 93 07 03 	sts	0x0307, r30
     8ec:	27 e0       	ldi	r18, 0x07	; 7
     8ee:	c8 c0       	rjmp	.+400    	; 0xa80 <_Z8nextNotev+0x38a>
	case 'g':
		note = G(0);
		break;
     8f0:	f0 93 08 03 	sts	0x0308, r31
     8f4:	e0 93 07 03 	sts	0x0307, r30
	case 'l':
		// set the default note duration
		duration = getDuration();
     8f8:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11getDurationv>
     8fc:	9c 01       	movw	r18, r24
     8fe:	1f cf       	rjmp	.-450    	; 0x73e <_Z8nextNotev+0x48>
		goto parse_character;
     900:	f0 93 08 03 	sts	0x0308, r31
     904:	e0 93 07 03 	sts	0x0307, r30
	case 'm':
		// set music staccato or legato
		if(sequence[0] == 'l' || sequence[0] == 'L')
     908:	80 81       	ld	r24, Z
     90a:	8c 36       	cpi	r24, 0x6C	; 108
     90c:	29 f0       	breq	.+10     	; 0x918 <_Z8nextNotev+0x222>
     90e:	8c 34       	cpi	r24, 0x4C	; 76
     910:	19 f0       	breq	.+6      	; 0x918 <_Z8nextNotev+0x222>
     912:	00 e0       	ldi	r16, 0x00	; 0
     914:	11 e0       	ldi	r17, 0x01	; 1
     916:	01 c0       	rjmp	.+2      	; 0x91a <_Z8nextNotev+0x224>
     918:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			staccato = true;
			staccato_rest_duration = 0;
		}
		sequence++;
     91a:	31 96       	adiw	r30, 0x01	; 1
     91c:	f0 93 08 03 	sts	0x0308, r31
     920:	e0 93 07 03 	sts	0x0307, r30
     924:	0c cf       	rjmp	.-488    	; 0x73e <_Z8nextNotev+0x48>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     926:	ca 01       	movw	r24, r20
     928:	a3 e0       	ldi	r26, 0x03	; 3
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 95       	dec	r26
     930:	e1 f7       	brne	.-8      	; 0x92a <_Z8nextNotev+0x234>
     932:	44 0f       	add	r20, r20
     934:	55 1f       	adc	r21, r21
     936:	84 0f       	add	r24, r20
     938:	95 1f       	adc	r25, r21
		arg += *sequence-'0';
     93a:	46 2f       	mov	r20, r22
     93c:	55 27       	eor	r21, r21
     93e:	47 fd       	sbrc	r20, 7
     940:	50 95       	com	r21
     942:	40 53       	subi	r20, 0x30	; 48
     944:	50 40       	sbci	r21, 0x00	; 0
     946:	48 0f       	add	r20, r24
     948:	59 1f       	adc	r21, r25
     94a:	9e 2f       	mov	r25, r30
     94c:	7f 2f       	mov	r23, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     94e:	61 91       	ld	r22, Z+
     950:	86 2f       	mov	r24, r22
     952:	80 53       	subi	r24, 0x30	; 48
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	38 f3       	brcs	.-50     	; 0x926 <_Z8nextNotev+0x230>
     958:	90 93 07 03 	sts	0x0307, r25
     95c:	70 93 08 03 	sts	0x0308, r23
		}
		sequence++;
		goto parse_character;
	case 'o':
		// set the octave permanently
		octave = getNumber();
     960:	f4 2e       	mov	r15, r20
     962:	e4 2e       	mov	r14, r20
     964:	ec ce       	rjmp	.-552    	; 0x73e <_Z8nextNotev+0x48>
		tmp_octave = octave;
		goto parse_character;
     966:	00 93 06 03 	sts	0x0306, r16
     96a:	10 93 05 03 	sts	0x0305, r17
     96e:	30 93 0a 03 	sts	0x030A, r19
     972:	20 93 09 03 	sts	0x0309, r18
     976:	f0 92 04 03 	sts	0x0304, r15
     97a:	d0 93 0e 03 	sts	0x030E, r29
     97e:	c0 93 0d 03 	sts	0x030D, r28
     982:	f0 93 08 03 	sts	0x0308, r31
     986:	e0 93 07 03 	sts	0x0307, r30
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	11 e0       	ldi	r17, 0x01	; 1
     98e:	79 c0       	rjmp	.+242    	; 0xa82 <_Z8nextNotev+0x38c>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     990:	cb 01       	movw	r24, r22
     992:	33 e0       	ldi	r19, 0x03	; 3
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	3a 95       	dec	r19
     99a:	e1 f7       	brne	.-8      	; 0x994 <_Z8nextNotev+0x29e>
     99c:	66 0f       	add	r22, r22
     99e:	77 1f       	adc	r23, r23
     9a0:	86 0f       	add	r24, r22
     9a2:	97 1f       	adc	r25, r23
		arg += *sequence-'0';
     9a4:	62 2f       	mov	r22, r18
     9a6:	77 27       	eor	r23, r23
     9a8:	67 fd       	sbrc	r22, 7
     9aa:	70 95       	com	r23
     9ac:	60 53       	subi	r22, 0x30	; 48
     9ae:	70 40       	sbci	r23, 0x00	; 0
     9b0:	68 0f       	add	r22, r24
     9b2:	79 1f       	adc	r23, r25
     9b4:	9e 2f       	mov	r25, r30
     9b6:	3f 2f       	mov	r19, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     9b8:	21 91       	ld	r18, Z+
     9ba:	82 2f       	mov	r24, r18
     9bc:	80 53       	subi	r24, 0x30	; 48
     9be:	8a 30       	cpi	r24, 0x0A	; 10
     9c0:	38 f3       	brcs	.-50     	; 0x990 <_Z8nextNotev+0x29a>
     9c2:	90 93 07 03 	sts	0x0307, r25
     9c6:	30 93 08 03 	sts	0x0308, r19
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     9ca:	80 ec       	ldi	r24, 0xC0	; 192
     9cc:	9d e5       	ldi	r25, 0x5D	; 93
     9ce:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
     9d2:	cb 01       	movw	r24, r22
     9d4:	9b 01       	movw	r18, r22
     9d6:	a3 e0       	ldi	r26, 0x03	; 3
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	aa 95       	dec	r26
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <_Z8nextNotev+0x2e2>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	28 0f       	add	r18, r24
     9e6:	39 1f       	adc	r19, r25
     9e8:	30 93 0c 03 	sts	0x030C, r19
     9ec:	20 93 0b 03 	sts	0x030B, r18
		duration = whole_note_duration/4;
     9f0:	36 95       	lsr	r19
     9f2:	27 95       	ror	r18
     9f4:	36 95       	lsr	r19
     9f6:	27 95       	ror	r18
     9f8:	a2 ce       	rjmp	.-700    	; 0x73e <_Z8nextNotev+0x48>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     9fa:	ce 01       	movw	r24, r28
     9fc:	73 e0       	ldi	r23, 0x03	; 3
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	7a 95       	dec	r23
     a04:	e1 f7       	brne	.-8      	; 0x9fe <_Z8nextNotev+0x308>
     a06:	cc 0f       	add	r28, r28
     a08:	dd 1f       	adc	r29, r29
     a0a:	8c 0f       	add	r24, r28
     a0c:	9d 1f       	adc	r25, r29
		arg += *sequence-'0';
     a0e:	c4 2f       	mov	r28, r20
     a10:	dd 27       	eor	r29, r29
     a12:	c7 fd       	sbrc	r28, 7
     a14:	d0 95       	com	r29
     a16:	e0 97       	sbiw	r28, 0x30	; 48
     a18:	c8 0f       	add	r28, r24
     a1a:	d9 1f       	adc	r29, r25
     a1c:	9e 2f       	mov	r25, r30
     a1e:	5f 2f       	mov	r21, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     a20:	41 91       	ld	r20, Z+
     a22:	84 2f       	mov	r24, r20
     a24:	80 53       	subi	r24, 0x30	; 48
     a26:	8a 30       	cpi	r24, 0x0A	; 10
     a28:	40 f3       	brcs	.-48     	; 0x9fa <_Z8nextNotev+0x304>
     a2a:	90 93 07 03 	sts	0x0307, r25
     a2e:	50 93 08 03 	sts	0x0308, r21
     a32:	85 ce       	rjmp	.-758    	; 0x73e <_Z8nextNotev+0x48>
		duration = whole_note_duration/4;
		goto parse_character;
	case 'v':
		// set the volume
		volume = getNumber();
		goto parse_character;
     a34:	00 93 06 03 	sts	0x0306, r16
     a38:	10 93 05 03 	sts	0x0305, r17
     a3c:	30 93 0a 03 	sts	0x030A, r19
     a40:	20 93 09 03 	sts	0x0309, r18
     a44:	f0 92 04 03 	sts	0x0304, r15
     a48:	d0 93 0e 03 	sts	0x030E, r29
     a4c:	c0 93 0d 03 	sts	0x030D, r28
	default:
		sequence = 0;
     a50:	10 92 08 03 	sts	0x0308, r1
     a54:	10 92 07 03 	sts	0x0307, r1
     a58:	64 c0       	rjmp	.+200    	; 0xb22 <_Z8nextNotev+0x42c>
		return;
     a5a:	00 93 06 03 	sts	0x0306, r16
     a5e:	10 93 05 03 	sts	0x0305, r17
     a62:	30 93 0a 03 	sts	0x030A, r19
     a66:	20 93 09 03 	sts	0x0309, r18
     a6a:	f0 92 04 03 	sts	0x0304, r15
     a6e:	d0 93 0e 03 	sts	0x030E, r29
     a72:	c0 93 0d 03 	sts	0x030D, r28
     a76:	f0 93 08 03 	sts	0x0308, r31
     a7a:	e0 93 07 03 	sts	0x0307, r30
     a7e:	29 e0       	ldi	r18, 0x09	; 9
     a80:	10 e0       	ldi	r17, 0x00	; 0
	}

	note += tmp_octave*12;
     a82:	8c e0       	ldi	r24, 0x0C	; 12
     a84:	e8 9e       	mul	r14, r24
     a86:	c0 01       	movw	r24, r0
     a88:	11 24       	eor	r1, r1
     a8a:	02 2f       	mov	r16, r18
     a8c:	08 0f       	add	r16, r24
     a8e:	e0 91 07 03 	lds	r30, 0x0307
     a92:	f0 91 08 03 	lds	r31, 0x0308
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <_Z8nextNotev+0x3a6>

	// handle sharps and flats
	while(*sequence == '+' || *sequence == '#')
	{
		sequence ++;
		note ++;
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	31 96       	adiw	r30, 0x01	; 1
	}

	note += tmp_octave*12;

	// handle sharps and flats
	while(*sequence == '+' || *sequence == '#')
     a9c:	80 81       	ld	r24, Z
     a9e:	8b 32       	cpi	r24, 0x2B	; 43
     aa0:	d9 f3       	breq	.-10     	; 0xa98 <_Z8nextNotev+0x3a2>
     aa2:	83 32       	cpi	r24, 0x23	; 35
     aa4:	c9 f3       	breq	.-14     	; 0xa98 <_Z8nextNotev+0x3a2>
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <_Z8nextNotev+0x3b4>
		note ++;
	}
	while(*sequence == '-')
	{
		sequence ++;
		note --;
     aa8:	01 50       	subi	r16, 0x01	; 1
     aaa:	9e 2f       	mov	r25, r30
     aac:	2f 2f       	mov	r18, r31
	while(*sequence == '+' || *sequence == '#')
	{
		sequence ++;
		note ++;
	}
	while(*sequence == '-')
     aae:	81 91       	ld	r24, Z+
     ab0:	8d 32       	cpi	r24, 0x2D	; 45
     ab2:	d1 f3       	breq	.-12     	; 0xaa8 <_Z8nextNotev+0x3b2>
     ab4:	90 93 07 03 	sts	0x0307, r25
     ab8:	20 93 08 03 	sts	0x0308, r18
		sequence ++;
		note --;
	}

	// set the duration of just this note
	tmp_duration = duration;
     abc:	60 91 09 03 	lds	r22, 0x0309
     ac0:	70 91 0a 03 	lds	r23, 0x030A

	// If the input is 'c16', make it a 16th note, etc.
	if(*sequence > '0' && *sequence < '9')
     ac4:	81 53       	subi	r24, 0x31	; 49
     ac6:	88 30       	cpi	r24, 0x08	; 8
     ac8:	18 f4       	brcc	.+6      	; 0xad0 <_Z8nextNotev+0x3da>
		tmp_duration = getDuration();
     aca:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11getDurationv>
     ace:	bc 01       	movw	r22, r24

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
     ad0:	9b 01       	movw	r18, r22
     ad2:	36 95       	lsr	r19
     ad4:	27 95       	ror	r18
     ad6:	e0 91 07 03 	lds	r30, 0x0307
     ada:	f0 91 08 03 	lds	r31, 0x0308
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <_Z8nextNotev+0x3f2>
	while(*sequence == '.')
	{
		sequence ++;
		tmp_duration += dot_add;
     ae0:	62 0f       	add	r22, r18
     ae2:	73 1f       	adc	r23, r19
		dot_add /= 2;
     ae4:	36 95       	lsr	r19
     ae6:	27 95       	ror	r18
     ae8:	9e 2f       	mov	r25, r30
     aea:	4f 2f       	mov	r20, r31
		tmp_duration = getDuration();

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
	while(*sequence == '.')
     aec:	81 91       	ld	r24, Z+
     aee:	8e 32       	cpi	r24, 0x2E	; 46
     af0:	b9 f3       	breq	.-18     	; 0xae0 <_Z8nextNotev+0x3ea>
     af2:	90 93 07 03 	sts	0x0307, r25
     af6:	40 93 08 03 	sts	0x0308, r20
		sequence ++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if(staccato)
     afa:	80 91 05 03 	lds	r24, 0x0305
     afe:	88 23       	and	r24, r24
     b00:	39 f0       	breq	.+14     	; 0xb10 <_Z8nextNotev+0x41a>
	{
		staccato_rest_duration = tmp_duration / 2;
     b02:	cb 01       	movw	r24, r22
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	80 93 06 03 	sts	0x0306, r24
		tmp_duration -= staccato_rest_duration;
     b0c:	68 1b       	sub	r22, r24
     b0e:	71 09       	sbc	r23, r1
	}
	OrangutanBuzzer::playNote(note, tmp_duration, rest ? 0 : volume);
     b10:	11 23       	and	r17, r17
     b12:	11 f0       	breq	.+4      	; 0xb18 <_Z8nextNotev+0x422>
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <_Z8nextNotev+0x426>
     b18:	40 91 0d 03 	lds	r20, 0x030D
     b1c:	80 2f       	mov	r24, r16
     b1e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	e6 e0       	ldi	r30, 0x06	; 6
     b28:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__epilogue_restores__+0x18>

00000b2c <_ZN15OrangutanBuzzer4playEPKc>:
// The following plays a quiet c major scale up and back down:
//   play("V8 cdefgab>cbagfedc");
//
// Here is an example from Bach:
//   play("T240 L8 a gafaeada c+adaeafa <aa<bac#ada c#adaeaf4");
void OrangutanBuzzer::play(const char *notes)
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     b30:	0f e6       	ldi	r16, 0x6F	; 111
     b32:	10 e0       	ldi	r17, 0x00	; 0
     b34:	f8 01       	movw	r30, r16
     b36:	10 82       	st	Z, r1
	octave = 4; // the current octave
     b38:	24 e0       	ldi	r18, 0x04	; 4
     b3a:	20 93 04 03 	sts	0x0304, r18
	whole_note_duration = 2000; // the whole note duration
     b3e:	20 ed       	ldi	r18, 0xD0	; 208
     b40:	37 e0       	ldi	r19, 0x07	; 7
     b42:	30 93 0c 03 	sts	0x030C, r19
     b46:	20 93 0b 03 	sts	0x030B, r18
	duration = 500; // the duration of a note in ms
     b4a:	24 ef       	ldi	r18, 0xF4	; 244
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	30 93 0a 03 	sts	0x030A, r19
     b52:	20 93 09 03 	sts	0x0309, r18
	volume = 15; // the note volume
     b56:	2f e0       	ldi	r18, 0x0F	; 15
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	30 93 0e 03 	sts	0x030E, r19
     b5e:	20 93 0d 03 	sts	0x030D, r18
	staccato = 0;
     b62:	10 92 05 03 	sts	0x0305, r1
	sequence = notes;
     b66:	90 93 08 03 	sts	0x0308, r25
     b6a:	80 93 07 03 	sts	0x0307, r24
	nextNote();
     b6e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z8nextNotev>
	ENABLE_TIMER1_INTERRUPT();	// re-enable interrupts
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	f8 01       	movw	r30, r16
     b76:	80 83       	st	Z, r24
}
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <play>:
						  unsigned char volume)
{
	OrangutanBuzzer::playNote(note, dur, volume);
}

extern "C" void play(char *sequence)
     b7e:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN15OrangutanBuzzer4playEPKc>
{
	OrangutanBuzzer::play(sequence);
}
     b82:	08 95       	ret

00000b84 <__vector_13>:
												//  to play a note

void nextNote();

// Timer1 overflow interrupt
ISR (TIMER1_OVF_vect)
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
{
	if (buzzerTimeout-- == 0)
     b92:	80 91 0f 03 	lds	r24, 0x030F
     b96:	90 91 10 03 	lds	r25, 0x0310
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	90 93 10 03 	sts	0x0310, r25
     ba0:	80 93 0f 03 	sts	0x030F, r24
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	e1 f4       	brne	.+56     	; 0xbe0 <__vector_13+0x5c>
	{
		TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     ba8:	80 91 81 00 	lds	r24, 0x0081
     bac:	88 7f       	andi	r24, 0xF8	; 248
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	80 93 81 00 	sts	0x0081, r24
		OCR1A = F_CPU / 1000;			// set TOP for freq = 1 kHz
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	9e e4       	ldi	r25, 0x4E	; 78
     bb8:	90 93 89 00 	sts	0x0089, r25
     bbc:	80 93 88 00 	sts	0x0088, r24
		OCR1B = 0;						// 0% duty cycle
     bc0:	10 92 8b 00 	sts	0x008B, r1
     bc4:	10 92 8a 00 	sts	0x008A, r1
		DDRB &= ~(1 << PB2);	// silence buz, pin->input
     bc8:	22 98       	cbi	0x04, 2	; 4
		buzzerFinished = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 f4 02 	sts	0x02F4, r24
		if(sequence)
     bd0:	80 91 07 03 	lds	r24, 0x0307
     bd4:	90 91 08 03 	lds	r25, 0x0308
     bd8:	89 2b       	or	r24, r25
     bda:	11 f0       	breq	.+4      	; 0xbe0 <__vector_13+0x5c>
			nextNote();
     bdc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z8nextNotev>
	}
}
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <button_is_pressed>:
extern "C" unsigned char wait_for_button(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForButton(buttons);
}

extern "C" unsigned char button_is_pressed(unsigned char buttons)
     bee:	28 2f       	mov	r18, r24
	{
		static unsigned char initialized = 0;

		if (!initialized)
     bf0:	80 91 11 03 	lds	r24, 0x0311
     bf4:	88 23       	and	r24, r24
     bf6:	61 f4       	brne	.+24     	; 0xc10 <button_is_pressed+0x22>
		{
			initialized = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	80 93 11 03 	sts	0x0311, r24
#endif

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	DDRB &= ~ALL_BUTTONS;	// set the pushbutton pins to be inputs
     bfe:	84 b1       	in	r24, 0x04	; 4
     c00:	8d 7c       	andi	r24, 0xCD	; 205
     c02:	84 b9       	out	0x04, r24	; 4
	PORTB |= ALL_BUTTONS;	// enable pullups on the pushbutton pins
     c04:	85 b1       	in	r24, 0x05	; 5
     c06:	82 63       	ori	r24, 0x32	; 50
     c08:	85 b9       	out	0x05, r24	; 5
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	8a 95       	dec	r24
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <button_is_pressed+0x1e>
// pressed.  Otherwise this method returns 0 (false).  The argument
// 'buttons' can refer to multiple buttons using the bitwise OR operator |.
unsigned char OrangutanPushbuttons::isPressed(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	return (~PINB & buttons) ? 1 : 0;
     c10:	83 b1       	in	r24, 0x03	; 3
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	80 95       	com	r24
     c1a:	90 95       	com	r25
     c1c:	28 23       	and	r18, r24
     c1e:	39 23       	and	r19, r25
     c20:	23 2b       	or	r18, r19
     c22:	09 f0       	breq	.+2      	; 0xc26 <button_is_pressed+0x38>
     c24:	41 e0       	ldi	r20, 0x01	; 1
}

extern "C" unsigned char button_is_pressed(unsigned char buttons)
{
	return OrangutanPushbuttons::isPressed(buttons);
}
     c26:	84 2f       	mov	r24, r20
     c28:	08 95       	ret

00000c2a <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
// execution will return from this method.  The argument 'buttons' can
// refer to multiple buttons using the bitwise OR operator |.  The
// return value is the ID of the button that was released.  Note that
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
     c2a:	68 2f       	mov	r22, r24

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
     c2c:	80 91 11 03 	lds	r24, 0x0311
     c30:	88 23       	and	r24, r24
     c32:	61 f4       	brne	.+24     	; 0xc4c <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x22>
		{
			initialized = 1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 11 03 	sts	0x0311, r24
#endif

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	DDRB &= ~ALL_BUTTONS;	// set the pushbutton pins to be inputs
     c3a:	84 b1       	in	r24, 0x04	; 4
     c3c:	8d 7c       	andi	r24, 0xCD	; 205
     c3e:	84 b9       	out	0x04, r24	; 4
	PORTB |= ALL_BUTTONS;	// enable pullups on the pushbutton pins
     c40:	85 b1       	in	r24, 0x05	; 5
     c42:	82 63       	ori	r24, 0x32	; 50
     c44:	85 b9       	out	0x05, r24	; 5
     c46:	86 e0       	ldi	r24, 0x06	; 6
     c48:	8a 95       	dec	r24
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x1e>
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
	{
		while (!(PINB & buttons))	// wait for a button to be released
     c4c:	26 2f       	mov	r18, r22
     c4e:	30 e0       	ldi	r19, 0x00	; 0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     c50:	40 e5       	ldi	r20, 0x50	; 80
     c52:	53 ec       	ldi	r21, 0xC3	; 195
     c54:	83 b1       	in	r24, 0x03	; 3
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	82 23       	and	r24, r18
     c5a:	93 23       	and	r25, r19
     c5c:	89 2b       	or	r24, r25
     c5e:	d1 f3       	breq	.-12     	; 0xc54 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x2a>
     c60:	ca 01       	movw	r24, r20
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x38>
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
     c66:	83 b1       	in	r24, 0x03	; 3
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	82 23       	and	r24, r18
     c6c:	93 23       	and	r25, r19
     c6e:	89 2b       	or	r24, r25
     c70:	89 f3       	breq	.-30     	; 0xc54 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x2a>
		while (!(PINB & buttons))	// wait for a button to be released
			;
		_delay_ms(10);				// debounce the button release
	}
	while (!(PINB & buttons));		// if button isn't still released, loop
	return PINB & buttons;			// return the released button(s)
     c72:	83 b1       	in	r24, 0x03	; 3
}
     c74:	86 23       	and	r24, r22
     c76:	08 95       	ret

00000c78 <wait_for_button_release>:
extern "C" unsigned char wait_for_button_press(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForPress(buttons);
}

extern "C" unsigned char wait_for_button_release(unsigned char buttons)
     c78:	0e 94 15 06 	call	0xc2a	; 0xc2a <_ZN20OrangutanPushbuttons14waitForReleaseEh>
{
	return OrangutanPushbuttons::waitForRelease(buttons);
}
     c7c:	08 95       	ret

00000c7e <_ZN12OrangutanLCD8busyWaitEv>:
// Wait for the busy flag to clear on a 4-bit interface
// This is necessarily more complicated than the 8-bit interface
// because E must be strobed twice to get the full eight bits
// back from the LCD, even though we're only interested in one
// of them.
void OrangutanLCD::busyWait()
     c7e:	3a b1       	in	r19, 0x0a	; 10

	// Save our DDR information
	temp_ddr = DDRD;

	// Set up the data DDR for input
	DDRD &= ~(LCD_PORTD_MASK);
     c80:	57 98       	cbi	0x0a, 7	; 10

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
     c82:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT |= (1 << LCD_RW);
     c84:	28 9a       	sbi	0x05, 0	; 5
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     c86:	26 e0       	ldi	r18, 0x06	; 6

	do
	{
		// Bring E high
		LCD_RS_E_PORT |= (1 << LCD_E);
     c88:	5c 9a       	sbi	0x0b, 4	; 11
     c8a:	82 2f       	mov	r24, r18
     c8c:	8a 95       	dec	r24
     c8e:	f1 f7       	brne	.-4      	; 0xc8c <_ZN12OrangutanLCD8busyWaitEv+0xe>

		// Wait at least 120ns (1us is excessive)
		_delay_us(1);

		// Get the data back from the LCD
		data = PIND & LCD_PORTD_MASK;
     c90:	89 b1       	in	r24, 0x09	; 9
		// That excessive delay means our cycle time on E cannot be
		// shorter than 1000ns (500ns being the spec), so no further
		// delays are required

		// Bring E low
		LCD_RS_E_PORT &= ~(1 << LCD_E);
     c92:	5c 98       	cbi	0x0b, 4	; 11
     c94:	92 2f       	mov	r25, r18
     c96:	9a 95       	dec	r25
     c98:	f1 f7       	brne	.-4      	; 0xc96 <_ZN12OrangutanLCD8busyWaitEv+0x18>
		_delay_us(1);

		// Strobe out the 4 bits we don't care about:

		// Bring E high
		LCD_RS_E_PORT |= (1 << LCD_E);
     c9a:	5c 9a       	sbi	0x0b, 4	; 11
     c9c:	92 2f       	mov	r25, r18
     c9e:	9a 95       	dec	r25
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <_ZN12OrangutanLCD8busyWaitEv+0x20>

		// Wait at least 120ns (1us is excessive)
		_delay_us(1);

		// Bring E low
		LCD_RS_E_PORT &= ~(1 << LCD_E);
     ca2:	5c 98       	cbi	0x0b, 4	; 11

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= (1 << LCD_RW);

	do
     ca4:	87 fd       	sbrc	r24, 7
     ca6:	f0 cf       	rjmp	.-32     	; 0xc88 <_ZN12OrangutanLCD8busyWaitEv+0xa>
	while (data & (1 << LCD_BF));

	// To reach here our busy flag must be zero, meaning the LCD is free

	// Restore our DDR information
	DDRD = temp_ddr;
     ca8:	3a b9       	out	0x0a, r19	; 10
}
     caa:	08 95       	ret

00000cac <_ZN12OrangutanLCD10sendNibbleEh>:


// Send four bits out the 4-bit interface.  This assumes the busy flag
// is clear, that our DDRs are all set, etc.  Basically all it does is
// line up the bits and shove them out the appropriate I/O lines.
void OrangutanLCD::sendNibble(unsigned char nibble)
     cac:	65 b1       	in	r22, 0x05	; 5
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	ac 01       	movw	r20, r24
     cb2:	41 70       	andi	r20, 0x01	; 1
     cb4:	50 70       	andi	r21, 0x00	; 0
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	9c 01       	movw	r18, r24
     cbc:	26 70       	andi	r18, 0x06	; 6
     cbe:	30 70       	andi	r19, 0x00	; 0
     cc0:	53 e0       	ldi	r21, 0x03	; 3
     cc2:	22 0f       	add	r18, r18
     cc4:	33 1f       	adc	r19, r19
     cc6:	5a 95       	dec	r21
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <_ZN12OrangutanLCD10sendNibbleEh+0x16>
     cca:	42 2b       	or	r20, r18
     ccc:	6d 7c       	andi	r22, 0xCD	; 205
     cce:	46 2b       	or	r20, r22
     cd0:	45 b9       	out	0x05, r20	; 5
{
	PORTB = (PORTB & ~LCD_PORTB_MASK) | LCD_PORTB_DATA(nibble);
	PORTD = (PORTD & ~LCD_PORTD_MASK) | LCD_PORTD_DATA(nibble);
     cd2:	2b b1       	in	r18, 0x0b	; 11
     cd4:	88 70       	andi	r24, 0x08	; 8
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	34 e0       	ldi	r19, 0x04	; 4
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	3a 95       	dec	r19
     ce0:	e1 f7       	brne	.-8      	; 0xcda <_ZN12OrangutanLCD10sendNibbleEh+0x2e>
     ce2:	2f 77       	andi	r18, 0x7F	; 127
     ce4:	28 2b       	or	r18, r24
     ce6:	2b b9       	out	0x0b, r18	; 11

	// At this point the four data lines are set, so the Enable pin 
	// is strobed to let the LCD latch them.

	// Bring E high
	LCD_RS_E_PORT |= (1 << LCD_E);
     ce8:	5c 9a       	sbi	0x0b, 4	; 11
     cea:	86 e0       	ldi	r24, 0x06	; 6
     cec:	98 2f       	mov	r25, r24
     cee:	9a 95       	dec	r25
     cf0:	f1 f7       	brne	.-4      	; 0xcee <_ZN12OrangutanLCD10sendNibbleEh+0x42>
	
	// Wait => 450ns (1us is excessive)
	_delay_us(1);

	// Bring E low
	LCD_RS_E_PORT &= ~(1 << LCD_E);
     cf2:	5c 98       	cbi	0x0b, 4	; 11
     cf4:	8a 95       	dec	r24
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <_ZN12OrangutanLCD10sendNibbleEh+0x48>
	// Dropping out of the routine will take at least 10ns, the time
	// given by the datasheet for the LCD controller to read the
	// nibble on the falling edge of E

	// Our nibble has now been sent to the LCD.
}
     cf8:	08 95       	ret

00000cfa <_ZN12OrangutanLCD4sendEhh>:


// Send either data or a command on a 4-bit interface
void OrangutanLCD::send(unsigned char data, unsigned char rs)
     cfa:	cf 92       	push	r12
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	08 2f       	mov	r16, r24
     d08:	16 2f       	mov	r17, r22
{
	unsigned char temp_ddrb, temp_portb, temp_ddrd, temp_portd;
	
	init();  // initialize the LCD if we haven't already
     d0a:	0e 94 ef 06 	call	0xdde	; 0xdde <_ZN12OrangutanLCD4initEv>

	// Wait until the busy flag clears
	busyWait();
     d0e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN12OrangutanLCD8busyWaitEv>

	// Save our DDR and port information
	temp_ddrb = DDRB;
     d12:	c4 b0       	in	r12, 0x04	; 4
	temp_portb = PORTB;
     d14:	d5 b0       	in	r13, 0x05	; 5
	temp_ddrd = DDRD;
     d16:	ea b0       	in	r14, 0x0a	; 10
	temp_portd = PORTD;
     d18:	fb b0       	in	r15, 0x0b	; 11

	// Clear RW and RS
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
     d1a:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT &= ~(1 << LCD_RW);
     d1c:	28 98       	cbi	0x05, 0	; 5

	// Set RS according to what this routine was told to do
	LCD_RS_E_PORT |= (rs << LCD_RS);
     d1e:	8b b1       	in	r24, 0x0b	; 11
     d20:	11 0f       	add	r17, r17
     d22:	11 0f       	add	r17, r17
     d24:	81 2b       	or	r24, r17
     d26:	8b b9       	out	0x0b, r24	; 11

	// Set the data pins as outputs
	DDRB |= LCD_PORTB_MASK;
     d28:	84 b1       	in	r24, 0x04	; 4
     d2a:	82 63       	ori	r24, 0x32	; 50
     d2c:	84 b9       	out	0x04, r24	; 4
	DDRD |= LCD_PORTD_MASK;
     d2e:	57 9a       	sbi	0x0a, 7	; 10

	// Send the high 4 bits
	sendNibble(data >> 4);
     d30:	80 2f       	mov	r24, r16
     d32:	82 95       	swap	r24
     d34:	8f 70       	andi	r24, 0x0F	; 15
     d36:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN12OrangutanLCD10sendNibbleEh>

	// Send the low 4 bits
	sendNibble(data & 0x0F);
     d3a:	80 2f       	mov	r24, r16
     d3c:	8f 70       	andi	r24, 0x0F	; 15
     d3e:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN12OrangutanLCD10sendNibbleEh>

	// Restore our DDR and port information
	PORTD = temp_portd;
     d42:	fb b8       	out	0x0b, r15	; 11
	DDRD = temp_ddrd;
     d44:	ea b8       	out	0x0a, r14	; 10
	PORTB = temp_portb;
     d46:	d5 b8       	out	0x05, r13	; 5
	DDRB = temp_ddrb;
     d48:	c4 b8       	out	0x04, r12	; 4
}
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	08 95       	ret

00000d58 <_ZN12OrangutanLCD5init2Ev>:
#endif

// Initialize the LCD for a 4-bit interface
// this method is automatically called the first time any LCD member
// function is called
void OrangutanLCD::init2()
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
{
	// Set up the DDR for the LCD control lines
	LCD_RS_E_DDR |= (1 << LCD_RS) | (1 << LCD_E);
     d5c:	8a b1       	in	r24, 0x0a	; 10
     d5e:	84 61       	ori	r24, 0x14	; 20
     d60:	8a b9       	out	0x0a, r24	; 10
	LCD_RW_DDR |= (1 << LCD_RW);
     d62:	20 9a       	sbi	0x04, 0	; 4
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     d64:	80 e5       	ldi	r24, 0x50	; 80
     d66:	93 ec       	ldi	r25, 0xC3	; 195
     d68:	fc 01       	movw	r30, r24
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <_ZN12OrangutanLCD5init2Ev+0x12>
	// Wait >15ms
	_delay_ms(10);
	_delay_ms(10);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <_ZN12OrangutanLCD5init2Ev+0x16>
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	80 e3       	ldi	r24, 0x30	; 48
     d76:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
     d7a:	88 ea       	ldi	r24, 0xA8	; 168
     d7c:	91 e6       	ldi	r25, 0x61	; 97
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <_ZN12OrangutanLCD5init2Ev+0x26>

	// Wait >4.1ms
	_delay_ms(5);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	80 e3       	ldi	r24, 0x30	; 48
     d86:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
     d8a:	08 e8       	ldi	r16, 0x88	; 136
     d8c:	13 e1       	ldi	r17, 0x13	; 19
     d8e:	c8 01       	movw	r24, r16
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <_ZN12OrangutanLCD5init2Ev+0x38>

	// Wait >120us
	_delay_ms(1);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	80 e3       	ldi	r24, 0x30	; 48
     d98:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
     d9c:	c8 01       	movw	r24, r16
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <_ZN12OrangutanLCD5init2Ev+0x46>

	// Wait >120us
	_delay_ms(1);

	// Send 0x2 (last four bits ignored)  Sets 4-bit mode
	lcd_cmd(0x20);
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	80 e2       	ldi	r24, 0x20	; 32
     da6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
     daa:	c8 01       	movw	r24, r16
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <_ZN12OrangutanLCD5init2Ev+0x54>

	// Wait >120us
	_delay_ms(1);

	// Send 0x28 = 4-bit, 2-line, 5x8 dots per char
	lcd_cmd(0x28);
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	88 e2       	ldi	r24, 0x28	; 40
     db4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>

	// Busy Flag is now valid, so hard-coded delays are no longer
	// required.

	// Send 0x08 = Display off, cursor off, blinking off
	lcd_cmd(0x08);
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	88 e0       	ldi	r24, 0x08	; 8
     dbc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>

	// Send 0x01 = Clear display
	lcd_cmd(0x01);
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>

	// Send 0x06 = Set entry mode: cursor shifts right, don't scroll
	lcd_cmd(0x06);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	86 e0       	ldi	r24, 0x06	; 6
     dcc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>

	// Send 0x0C = Display on, cursor off, blinking off
	lcd_cmd(0x0C);
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	8c e0       	ldi	r24, 0x0C	; 12
     dd4:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
}
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	08 95       	ret

00000dde <_ZN12OrangutanLCD4initEv>:
						unsigned int delay_time);


  private:
  
	static inline void init()
     dde:	80 91 14 03 	lds	r24, 0x0314
     de2:	88 23       	and	r24, r24
     de4:	29 f4       	brne	.+10     	; 0xdf0 <_ZN12OrangutanLCD4initEv+0x12>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;	// this MUST be set before init2() is called
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 14 03 	sts	0x0314, r24
			init2();			// or else infinite recursion ensues
     dec:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN12OrangutanLCD5init2Ev>
     df0:	08 95       	ret

00000df2 <_ZN12OrangutanLCD5clearEv>:
// *                 device-independent LCD functions                      *
// *************************************************************************


// clears the LCD screen and returns the cursor to position (0, 0)
void OrangutanLCD::clear()
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
{
	lcd_cmd(LCD_CLEAR);
}
     dfa:	08 95       	ret

00000dfc <clear>:
extern "C" void lcd_init_printf()
{
	fdevopen(lcd_putchar, void_getchar);
}

extern "C" void clear()
     dfc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <_ZN12OrangutanLCD5clearEv>
     e00:	e5 ef       	ldi	r30, 0xF5	; 245
     e02:	f2 e0       	ldi	r31, 0x02	; 2
	unsigned char i;
	OrangutanLCD::clear();

	// clear out the LCD
	for(i=0;i<8;i++)
		row1[i] = ' ';
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	81 93       	st	Z+, r24
{
	unsigned char i;
	OrangutanLCD::clear();

	// clear out the LCD
	for(i=0;i<8;i++)
     e08:	92 e0       	ldi	r25, 0x02	; 2
     e0a:	ed 3f       	cpi	r30, 0xFD	; 253
     e0c:	f9 07       	cpc	r31, r25
     e0e:	d9 f7       	brne	.-10     	; 0xe06 <clear+0xa>
		row1[i] = ' ';

	col = 0;
     e10:	10 92 13 03 	sts	0x0313, r1
	row = 0;
     e14:	10 92 12 03 	sts	0x0312, r1
}
     e18:	08 95       	ret

00000e1a <_ZN12OrangutanLCD5printEc>:
	lcd_cmd(LCD_CLEAR);
}


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
     e1a:	61 e0       	ldi	r22, 0x01	; 1
     e1c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
{
	lcd_data(character);
}
     e20:	08 95       	ret

00000e22 <print_character>:
extern "C" void print(const char *str)
{
	OrangutanLCD::print(str);
}

extern "C" void print_character(char c)
     e22:	0e 94 0d 07 	call	0xe1a	; 0xe1a <_ZN12OrangutanLCD5printEc>
{
	OrangutanLCD::print(c);
}
     e26:	08 95       	ret

00000e28 <_ZN12OrangutanLCD5printEPKc>:


// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <_ZN12OrangutanLCD5printEPKc+0x10>
{
	while (*str != 0)
		lcd_data(*str++);
     e30:	21 96       	adiw	r28, 0x01	; 1
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
	while (*str != 0)
     e38:	88 81       	ld	r24, Y
     e3a:	88 23       	and	r24, r24
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <_ZN12OrangutanLCD5printEPKc+0x8>
		lcd_data(*str++);
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <print>:

	col = 0;
	row = 0;
}

extern "C" void print(const char *str)
     e44:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN12OrangutanLCD5printEPKc>
{
	OrangutanLCD::print(str);
}
     e48:	08 95       	ret

00000e4a <_ZN12OrangutanLCD5printEm>:


// prints an unsigned long.  This prints from wherever the cursor is and will
// not span lines.  (This lets you concatenate print statements.)  This
// will only print as many characters as there are digits in the number.
void OrangutanLCD::print(unsigned long value)
     e4a:	4f 92       	push	r4
     e4c:	5f 92       	push	r5
     e4e:	6f 92       	push	r6
     e50:	7f 92       	push	r7
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	2a 97       	sbiw	r28, 0x0a	; 10
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	4b 01       	movw	r8, r22
     e7a:	5c 01       	movw	r10, r24
     e7c:	0a e0       	ldi	r16, 0x0A	; 10
	do
	{
		digit = value;
		value /= 10;
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e7e:	2e 01       	movw	r4, r28
     e80:	08 94       	sec
     e82:	41 1c       	adc	r4, r1
     e84:	51 1c       	adc	r5, r1
	unsigned long digit;

	do
	{
		digit = value;
		value /= 10;
     e86:	c5 01       	movw	r24, r10
     e88:	b4 01       	movw	r22, r8
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
     e96:	69 01       	movw	r12, r18
     e98:	7a 01       	movw	r14, r20
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e9a:	01 50       	subi	r16, 0x01	; 1
     e9c:	32 01       	movw	r6, r4
     e9e:	60 0e       	add	r6, r16
     ea0:	71 1c       	adc	r7, r1
     ea2:	c7 01       	movw	r24, r14
     ea4:	b6 01       	movw	r22, r12
     ea6:	2a e0       	ldi	r18, 0x0A	; 10
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	50 e0       	ldi	r21, 0x00	; 0
     eae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
     eb2:	86 1a       	sub	r8, r22
     eb4:	97 0a       	sbc	r9, r23
     eb6:	a8 0a       	sbc	r10, r24
     eb8:	b9 0a       	sbc	r11, r25
     eba:	88 2d       	mov	r24, r8
     ebc:	80 5d       	subi	r24, 0xD0	; 208
     ebe:	f3 01       	movw	r30, r6
     ec0:	80 83       	st	Z, r24
{
	unsigned char str[10];
	unsigned char i = 10;
	unsigned long digit;

	do
     ec2:	c1 14       	cp	r12, r1
     ec4:	d1 04       	cpc	r13, r1
     ec6:	e1 04       	cpc	r14, r1
     ec8:	f1 04       	cpc	r15, r1
     eca:	61 f0       	breq	.+24     	; 0xee4 <_ZN12OrangutanLCD5printEm+0x9a>
     ecc:	46 01       	movw	r8, r12
     ece:	57 01       	movw	r10, r14
     ed0:	da cf       	rjmp	.-76     	; 0xe86 <_ZN12OrangutanLCD5printEm+0x3c>
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
		lcd_data(str[i]);
     ed2:	f7 01       	movw	r30, r14
     ed4:	e0 0f       	add	r30, r16
     ed6:	f1 1d       	adc	r31, r1
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	80 81       	ld	r24, Z
     edc:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     ee0:	0f 5f       	subi	r16, 0xFF	; 255
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <_ZN12OrangutanLCD5printEm+0xa2>
		lcd_data(str[i]);
     ee4:	7e 01       	movw	r14, r28
     ee6:	08 94       	sec
     ee8:	e1 1c       	adc	r14, r1
     eea:	f1 1c       	adc	r15, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     eec:	0a 30       	cpi	r16, 0x0A	; 10
     eee:	88 f3       	brcs	.-30     	; 0xed2 <_ZN12OrangutanLCD5printEm+0x88>
		lcd_data(str[i]);
}
     ef0:	2a 96       	adiw	r28, 0x0a	; 10
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	df 90       	pop	r13
     f08:	cf 90       	pop	r12
     f0a:	bf 90       	pop	r11
     f0c:	af 90       	pop	r10
     f0e:	9f 90       	pop	r9
     f10:	8f 90       	pop	r8
     f12:	7f 90       	pop	r7
     f14:	6f 90       	pop	r6
     f16:	5f 90       	pop	r5
     f18:	4f 90       	pop	r4
     f1a:	08 95       	ret

00000f1c <_ZN12OrangutanLCD5printEl>:

// prints a signed long.  This prints from wherever the cursor is and will not
// span lines.  (This lets you concatenate print statements.)  This function
// will only print as many characters as there are digits in the number (plus
// a minus sign if the number is negative).
void OrangutanLCD::print(long value)
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	7b 01       	movw	r14, r22
     f26:	8c 01       	movw	r16, r24
{
	if (value < 0)
     f28:	97 ff       	sbrs	r25, 7
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <_ZN12OrangutanLCD5printEl+0x28>
	{
		value = -value;
     f2c:	10 95       	com	r17
     f2e:	00 95       	com	r16
     f30:	f0 94       	com	r15
     f32:	e0 94       	com	r14
     f34:	e1 1c       	adc	r14, r1
     f36:	f1 1c       	adc	r15, r1
     f38:	01 1d       	adc	r16, r1
     f3a:	11 1d       	adc	r17, r1
		lcd_data('-');		// print the minus sign
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	8d e2       	ldi	r24, 0x2D	; 45
     f40:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
	}
	print((unsigned long)value);
     f44:	c8 01       	movw	r24, r16
     f46:	b7 01       	movw	r22, r14
     f48:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN12OrangutanLCD5printEm>
}
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	08 95       	ret

00000f56 <print_long>:
extern "C" void print_character(char c)
{
	OrangutanLCD::print(c);
}

extern "C" void print_long(long value)
     f56:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN12OrangutanLCD5printEl>
{
	OrangutanLCD::print(value);
}
     f5a:	08 95       	ret

00000f5c <_ZN12OrangutanLCD6gotoXYEhh>:


// moves the cursor to the specified (x, y) position
// x is a zero-based column indicator (0 <= x <= 7)
// y is a zero-based row indicator (0 <= y <= 1)
void OrangutanLCD::gotoXY(unsigned char x, unsigned char y)
     f5c:	a2 e0       	ldi	r26, 0x02	; 2
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 eb       	ldi	r30, 0xB4	; 180
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__prologue_saves__+0x20>
     f68:	28 2f       	mov	r18, r24
	// The actual memory locations are 0x00, and 0x40, but since
	// D7 needs to be high in order to set a new memory location, we can go
	// ahead and make the seventh bit of our memory location bytes to 1,
	// which makes the numbers 0x80 and 0xC0:

	unsigned char line_mem[] = {0x80, 0xC0};
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	80 ec       	ldi	r24, 0xC0	; 192
     f70:	8a 83       	std	Y+2, r24	; 0x02
	x = (x < LCD_MAX_X ? x : LCD_MAX_X);
	y = (y < LCD_MAX_Y ? y : LCD_MAX_Y);

	// Grab the location in the LCD's memory of the start of line y,
	// and add X to it to get the right character location.
	lcd_cmd(line_mem[y] + x);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	66 23       	and	r22, r22
     f78:	11 f0       	breq	.+4      	; 0xf7e <_ZN12OrangutanLCD6gotoXYEhh+0x22>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fe 01       	movw	r30, r28
     f80:	31 96       	adiw	r30, 0x01	; 1
     f82:	e8 0f       	add	r30, r24
     f84:	f9 1f       	adc	r31, r25
     f86:	92 2f       	mov	r25, r18
     f88:	28 30       	cpi	r18, 0x08	; 8
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <_ZN12OrangutanLCD6gotoXYEhh+0x32>
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	80 81       	ld	r24, Z
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	89 0f       	add	r24, r25
     f94:	0e 94 7d 06 	call	0xcfa	; 0xcfa <_ZN12OrangutanLCD4sendEhh>
}
     f98:	22 96       	adiw	r28, 0x02	; 2
     f9a:	e2 e0       	ldi	r30, 0x02	; 2
     f9c:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__epilogue_restores__+0x20>

00000fa0 <lcd_goto_xy>:

extern "C" int void_getchar(FILE *f) {
	return 0;
}

extern "C" void lcd_goto_xy(int col, int row)
     fa0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN12OrangutanLCD6gotoXYEhh>
{
	OrangutanLCD::gotoXY(col,row);
}
     fa4:	08 95       	ret

00000fa6 <_GLOBAL__I_pololu_3pi_init>:
}

unsigned int Pololu3pi::batteryMillivolts()
{
	return OrangutanAnalog::readAverage(6,10)*5000L*3/2/1023;
}
     fa6:	85 e1       	ldi	r24, 0x15	; 21
     fa8:	93 e0       	ldi	r25, 0x03	; 3
     faa:	0e 94 8f 08 	call	0x111e	; 0x111e <_ZN11PololuQTRRCC1Ev>
     fae:	08 95       	ret

00000fb0 <_ZN9Pololu3pi17batteryMillivoltsEv>:
unsigned int Pololu3pi::readLine(unsigned int *sensor_values, unsigned char white_line)
{
	return qtr3pi.readLine(sensor_values, white_line);
}

unsigned int Pololu3pi::batteryMillivolts()
     fb0:	6a e0       	ldi	r22, 0x0A	; 10
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN15OrangutanAnalog11readAverageEhj>
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	2c e4       	ldi	r18, 0x4C	; 76
     fc4:	3d e1       	ldi	r19, 0x1D	; 29
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
     fce:	2f ef       	ldi	r18, 0xFF	; 255
     fd0:	33 e0       	ldi	r19, 0x03	; 3
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__divmodsi4>
     fda:	c9 01       	movw	r24, r18
{
	return OrangutanAnalog::readAverage(6,10)*5000L*3/2/1023;
}
     fdc:	08 95       	ret

00000fde <battery_millivolts>:
extern "C" void pololu_3pi_init(unsigned int line_sensor_timeout_us)
{
	Pololu3pi::init(line_sensor_timeout_us);
}

extern "C" unsigned int battery_millivolts()
     fde:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN9Pololu3pi17batteryMillivoltsEv>
{
	return Pololu3pi::batteryMillivolts();
}
     fe2:	08 95       	ret

00000fe4 <read_line>:
extern "C" void read_line_sensors_calibrated(unsigned int *sensor_values)
{
	qtr3pi.readCalibrated(sensor_values);
}

extern "C" unsigned int read_line(unsigned int *sensor_values)
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	bc 01       	movw	r22, r24
     fe8:	85 e1       	ldi	r24, 0x15	; 21
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	0e 94 41 0b 	call	0x1682	; 0x1682 <_ZN11PololuQTRRC8readLineEPjh>
{
	return qtr3pi.readLine(sensor_values);
}
     ff0:	08 95       	ret

00000ff2 <calibrate_line_sensors>:
extern "C" void emitters_off()
{
	qtr3pi.emittersOff();
}

extern "C" void calibrate_line_sensors()
     ff2:	85 e1       	ldi	r24, 0x15	; 21
     ff4:	93 e0       	ldi	r25, 0x03	; 3
     ff6:	0e 94 bb 0a 	call	0x1576	; 0x1576 <_ZN11PololuQTRRC9calibrateEv>
{
	qtr3pi.calibrate();
}
     ffa:	08 95       	ret

00000ffc <_ZN9Pololu3pi4initEj>:
	return qtr3pi.readLine(sensor_values, 1);
}

#endif

void Pololu3pi::init(unsigned int line_sensor_timeout_us)
     ffc:	0f 93       	push	r16
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <_ZN9Pololu3pi4initEj+0x8>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <_ZN9Pololu3pi4initEj+0xa>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	9c 01       	movw	r18, r24
{
	// Set up the line sensor and turn off the emitters.
	// The sensors are on PC0..4, and the emitter is on PC5.
	unsigned char pins[5] = {14,15,16,17,18};
    100e:	de 01       	movw	r26, r28
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	ed ef       	ldi	r30, 0xFD	; 253
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	45 e0       	ldi	r20, 0x05	; 5
    1018:	01 90       	ld	r0, Z+
    101a:	0d 92       	st	X+, r0
    101c:	41 50       	subi	r20, 0x01	; 1
    101e:	e1 f7       	brne	.-8      	; 0x1018 <_ZN9Pololu3pi4initEj+0x1c>
	qtr3pi.init(pins,5,line_sensor_timeout_us,19);
    1020:	03 e1       	ldi	r16, 0x13	; 19
    1022:	45 e0       	ldi	r20, 0x05	; 5
    1024:	be 01       	movw	r22, r28
    1026:	6f 5f       	subi	r22, 0xFF	; 255
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	85 e1       	ldi	r24, 0x15	; 21
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN11PololuQTRRC4initEPhhjh>
	qtr3pi.emittersOff();
    1032:	85 e1       	ldi	r24, 0x15	; 21
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 a3 0a 	call	0x1546	; 0x1546 <_ZN11PololuQTRRC11emittersOffEv>
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	0f 91       	pop	r16
    104a:	08 95       	ret

0000104c <pololu_3pi_init>:
// a global qtr sensors
static PololuQTRRC qtr3pi;

#ifdef LIB_POLOLU

extern "C" void pololu_3pi_init(unsigned int line_sensor_timeout_us)
    104c:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN9Pololu3pi4initEj>
{
	Pololu3pi::init(line_sensor_timeout_us);
}
    1050:	08 95       	ret

00001052 <delay_ms>:

#define F_CPU 20000000UL
#include <util/delay.h>	// F_CPU is defined in "device.h" above

// delay for time_ms milliseconds by looping
extern "C" void delay_ms( unsigned int time_ms )
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	48 e8       	ldi	r20, 0x88	; 136
    1058:	53 e1       	ldi	r21, 0x13	; 19
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <delay_ms+0x14>
    105c:	fa 01       	movw	r30, r20
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <delay_ms+0xc>
{
  unsigned int i;

  for ( i = 0; i < time_ms; i++ )
    1062:	2f 5f       	subi	r18, 0xFF	; 255
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	28 17       	cp	r18, r24
    1068:	39 07       	cpc	r19, r25
    106a:	c0 f3       	brcs	.-16     	; 0x105c <delay_ms+0xa>
    _delay_ms( 1 );		// _delay_ms() comes from <util/delay.h>
  //  and can only delay for a max of around 13 ms
  //  when the IO clock is 20 MHz.
}
    106c:	08 95       	ret

0000106e <_ZN15OrangutanAnalog11readAverageEhj>:
}


// take 'sample' readings of the specified channel and return the average
unsigned int OrangutanAnalog::readAverage(unsigned char channel, 
											unsigned int samples)
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
// conversion on a channel with startConversion(channel), and then
// poll isConverting in your main loop.  Once isConverting() returns
// a zero, the result can be obtained through a call to conversionResult().
void OrangutanAnalog::startConversion(unsigned char channel)
{
	ADCSRA = 0x87;		// bit 7 set: ADC enabled
    1076:	97 e8       	ldi	r25, 0x87	; 135
    1078:	90 93 7a 00 	sts	0x007A, r25
						// bit 6 clear: don't start conversion
						// bit 5 clear: disable autotrigger
						// bit 4: ADC interrupt flag
						// bit 3 clear: disable ADC interrupt
						// bits 0-2 set: ADC clock prescaler is 128
	ADMUX &= 0xF0;				// set the conversion channel
    107c:	90 91 7c 00 	lds	r25, 0x007C
    1080:	90 7f       	andi	r25, 0xF0	; 240
    1082:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel & 0x0F;
    1086:	90 91 7c 00 	lds	r25, 0x007C
    108a:	8f 70       	andi	r24, 0x0F	; 15
    108c:	89 2b       	or	r24, r25
    108e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= 1 << ADSC;		// start the conversion
    1092:	80 91 7a 00 	lds	r24, 0x007A
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	80 93 7a 00 	sts	0x007A, r24
    109c:	fb 01       	movw	r30, r22
    109e:	ee 24       	eor	r14, r14
    10a0:	ff 24       	eor	r15, r15
    10a2:	87 01       	movw	r16, r14
	unsigned long sum = 0;
	
	startConversion(channel);	// call this first to set the channel
	do
	{
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
    10a4:	80 91 7a 00 	lds	r24, 0x007A
    10a8:	80 64       	ori	r24, 0x40	; 64
    10aa:	80 93 7a 00 	sts	0x007A, r24

	// returns 1 if the ADC is in the middle of an conversion, otherwise
	// returns 0
	static inline unsigned char isConverting()
	{
		return ADCSRA & (1 << ADSC);
    10ae:	80 91 7a 00 	lds	r24, 0x007A
		while (isConverting());	// wait while converting
    10b2:	86 fd       	sbrc	r24, 6
    10b4:	fc cf       	rjmp	.-8      	; 0x10ae <_ZN15OrangutanAnalog11readAverageEhj+0x40>
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return ADMUX & (1 << ADLAR) ? 1 : 0;
    10b6:	80 91 7c 00 	lds	r24, 0x007C
    10ba:	85 ff       	sbrs	r24, 5
    10bc:	2b c0       	rjmp	.+86     	; 0x1114 <__stack+0x15>
	
	// returns the result of the previous ADC conversion.
	static inline unsigned int conversionResult()
	{
		if (getMode())				// if left-adjusted (i.e. 8-bit mode)
			return ADCH;			// 8-bit result
    10be:	80 91 79 00 	lds	r24, 0x0079
    10c2:	90 e0       	ldi	r25, 0x00	; 0
		sum += conversionResult();	// sum the results
    10c4:	a0 e0       	ldi	r26, 0x00	; 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 0e       	add	r14, r24
    10ca:	f9 1e       	adc	r15, r25
    10cc:	0a 1f       	adc	r16, r26
    10ce:	1b 1f       	adc	r17, r27
{
	unsigned int i = samples;
	unsigned long sum = 0;
	
	startConversion(channel);	// call this first to set the channel
	do
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	41 f7       	brne	.-48     	; 0x10a4 <_ZN15OrangutanAnalog11readAverageEhj+0x36>
    10d4:	cb 01       	movw	r24, r22
    10d6:	96 95       	lsr	r25
    10d8:	87 95       	ror	r24
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
		while (isConverting());	// wait while converting
		sum += conversionResult();	// sum the results
	} while (--i);
	
	if (samples < 64)			// can do the division much faster
    10da:	60 34       	cpi	r22, 0x40	; 64
    10dc:	71 05       	cpc	r23, r1
    10de:	38 f4       	brcc	.+14     	; 0x10ee <_ZN15OrangutanAnalog11readAverageEhj+0x80>
		return ((unsigned int)sum + (samples >> 1)) / (unsigned char)samples;
    10e0:	8e 0d       	add	r24, r14
    10e2:	9f 1d       	adc	r25, r15
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodhi4>
    10ea:	9b 01       	movw	r18, r22
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <__stack+0x9>
	return (sum + (samples >> 1)) / samples;	// compute the rounded avg
    10ee:	a0 e0       	ldi	r26, 0x00	; 0
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 0e       	add	r14, r24
    10f4:	f9 1e       	adc	r15, r25
    10f6:	0a 1f       	adc	r16, r26
    10f8:	1b 1f       	adc	r17, r27
    10fa:	9b 01       	movw	r18, r22
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	c8 01       	movw	r24, r16
    1102:	b7 01       	movw	r22, r14
    1104:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
}
    1108:	c9 01       	movw	r24, r18
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	ff 90       	pop	r15
    1110:	ef 90       	pop	r14
    1112:	08 95       	ret
		return ADC;				// 10-bit result
    1114:	80 91 78 00 	lds	r24, 0x0078
    1118:	90 91 79 00 	lds	r25, 0x0079
    111c:	d3 cf       	rjmp	.-90     	; 0x10c4 <_ZN15OrangutanAnalog11readAverageEhj+0x56>

0000111e <_ZN11PololuQTRRCC1Ev>:
}

#endif

// Constructors
PololuQTRRC::PololuQTRRC()
    111e:	08 95       	ret

00001120 <_ZN11PololuQTRRC4initEPhhjh>:

// 'emitterPin' is the Arduino pin that controls the IR LEDs on the 8RC
// modules.  If you are using a 1RC (i.e. if there is no emitter pin),
// use an invalid Arduino pin value (20 or greater).
void PololuQTRRC::init(unsigned char* pins, unsigned char numSensors, 
						 unsigned int timeout_us, unsigned char emitterPin)
    1120:	2f 92       	push	r2
    1122:	3f 92       	push	r3
    1124:	4f 92       	push	r4
    1126:	5f 92       	push	r5
    1128:	6f 92       	push	r6
    112a:	7f 92       	push	r7
    112c:	8f 92       	push	r8
    112e:	9f 92       	push	r9
    1130:	af 92       	push	r10
    1132:	bf 92       	push	r11
    1134:	cf 92       	push	r12
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	ec 01       	movw	r28, r24
    1144:	5b 01       	movw	r10, r22
{
	unsigned char i;
	_portBMask = 0;
    1146:	c0 5c       	subi	r28, 0xC0	; 192
    1148:	df 4f       	sbci	r29, 0xFF	; 255
    114a:	19 92       	st	Y+, r1
	_portCMask = 0;
    114c:	19 92       	st	Y+, r1
	_portDMask = 0;
    114e:	18 82       	st	Y, r1
    1150:	c2 54       	subi	r28, 0x42	; 66
    1152:	d0 40       	sbci	r29, 0x00	; 0
	
	_timeout_us = timeout_us;
    1154:	3a af       	std	Y+58, r19	; 0x3a
    1156:	29 af       	std	Y+57, r18	; 0x39
	if (numSensors > 8)
    1158:	49 30       	cpi	r20, 0x09	; 9
    115a:	18 f0       	brcs	.+6      	; 0x1162 <_ZN11PololuQTRRC4initEPhhjh+0x42>
		_numSensors = 8;
    115c:	88 e0       	ldi	r24, 0x08	; 8
    115e:	88 af       	std	Y+56, r24	; 0x38
    1160:	01 c0       	rjmp	.+2      	; 0x1164 <_ZN11PololuQTRRC4initEPhhjh+0x44>
	else
		_numSensors = numSensors;
    1162:	48 af       	std	Y+56, r20	; 0x38
    1164:	30 e0       	ldi	r19, 0x00	; 0
	for (i = 0; i < _numSensors; i++)
	{
		// Initialize the max and min calibrated values to values that
		// will cause the first reading to update them.
		calibratedMinimum[i] = 1000;
    1166:	a8 ee       	ldi	r26, 0xE8	; 232
    1168:	2a 2e       	mov	r2, r26
    116a:	a3 e0       	ldi	r26, 0x03	; 3
    116c:	3a 2e       	mov	r3, r26
			_portBMask |= _bitmask[i];
			_register[i] = &PINB;
		}
		else if (pins[i] < 20)		// port C
		{
			_bitmask[i] = 1 << (pins[i] - 14);
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	50 e0       	ldi	r21, 0x00	; 0
			_portCMask |= _bitmask[i];
    1172:	f1 e4       	ldi	r31, 0x41	; 65
    1174:	cf 2e       	mov	r12, r31
    1176:	d1 2c       	mov	r13, r1
    1178:	cc 0e       	add	r12, r28
    117a:	dd 1e       	adc	r13, r29
			_register[i] = &PINC;
    117c:	e6 e2       	ldi	r30, 0x26	; 38
    117e:	4e 2e       	mov	r4, r30
    1180:	51 2c       	mov	r5, r1
			_register[i] = &PIND;
		}
		else if (pins[i] < 14)		// port B
		{
			_bitmask[i] = 1 << (pins[i] - 8);
			_portBMask |= _bitmask[i];
    1182:	70 e4       	ldi	r23, 0x40	; 64
    1184:	e7 2e       	mov	r14, r23
    1186:	f1 2c       	mov	r15, r1
    1188:	ec 0e       	add	r14, r28
    118a:	fd 1e       	adc	r15, r29
			_register[i] = &PINB;
    118c:	63 e2       	ldi	r22, 0x23	; 35
    118e:	66 2e       	mov	r6, r22
    1190:	71 2c       	mov	r7, r1
		calibratedMaximum[i] = 0;

		if (pins[i] < 8)			// port D
		{
			_bitmask[i] = 1 << pins[i];
			_portDMask |= _bitmask[i];
    1192:	be 01       	movw	r22, r28
    1194:	6e 5b       	subi	r22, 0xBE	; 190
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
			_register[i] = &PIND;
    1198:	29 e2       	ldi	r18, 0x29	; 41
    119a:	82 2e       	mov	r8, r18
    119c:	91 2c       	mov	r9, r1
    119e:	64 c0       	rjmp	.+200    	; 0x1268 <_ZN11PololuQTRRC4initEPhhjh+0x148>
		_numSensors = numSensors;
	for (i = 0; i < _numSensors; i++)
	{
		// Initialize the max and min calibrated values to values that
		// will cause the first reading to update them.
		calibratedMinimum[i] = 1000;
    11a0:	a3 2f       	mov	r26, r19
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	fd 01       	movw	r30, r26
    11a6:	ee 0f       	add	r30, r30
    11a8:	ff 1f       	adc	r31, r31
    11aa:	ec 0f       	add	r30, r28
    11ac:	fd 1f       	adc	r31, r29
    11ae:	31 82       	std	Z+1, r3	; 0x01
    11b0:	20 82       	st	Z, r2
		calibratedMaximum[i] = 0;
    11b2:	fd 01       	movw	r30, r26
    11b4:	38 96       	adiw	r30, 0x08	; 8
    11b6:	ee 0f       	add	r30, r30
    11b8:	ff 1f       	adc	r31, r31
    11ba:	ec 0f       	add	r30, r28
    11bc:	fd 1f       	adc	r31, r29
    11be:	11 82       	std	Z+1, r1	; 0x01
    11c0:	10 82       	st	Z, r1

		if (pins[i] < 8)			// port D
    11c2:	f5 01       	movw	r30, r10
    11c4:	ea 0f       	add	r30, r26
    11c6:	fb 1f       	adc	r31, r27
    11c8:	80 81       	ld	r24, Z
    11ca:	88 30       	cpi	r24, 0x08	; 8
    11cc:	b8 f4       	brcc	.+46     	; 0x11fc <_ZN11PololuQTRRC4initEPhhjh+0xdc>
		{
			_bitmask[i] = 1 << pins[i];
    11ce:	fa 01       	movw	r30, r20
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <_ZN11PololuQTRRC4initEPhhjh+0xb6>
    11d2:	ee 0f       	add	r30, r30
    11d4:	ff 1f       	adc	r31, r31
    11d6:	8a 95       	dec	r24
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <_ZN11PololuQTRRC4initEPhhjh+0xb2>
    11da:	cf 01       	movw	r24, r30
    11dc:	fe 01       	movw	r30, r28
    11de:	ea 0f       	add	r30, r26
    11e0:	fb 1f       	adc	r31, r27
    11e2:	80 a3       	std	Z+32, r24	; 0x20
			_portDMask |= _bitmask[i];
    11e4:	fb 01       	movw	r30, r22
    11e6:	20 81       	ld	r18, Z
    11e8:	28 2b       	or	r18, r24
    11ea:	20 83       	st	Z, r18
			_register[i] = &PIND;
    11ec:	54 96       	adiw	r26, 0x14	; 20
    11ee:	aa 0f       	add	r26, r26
    11f0:	bb 1f       	adc	r27, r27
    11f2:	ac 0f       	add	r26, r28
    11f4:	bd 1f       	adc	r27, r29
    11f6:	8d 92       	st	X+, r8
    11f8:	9c 92       	st	X, r9
    11fa:	35 c0       	rjmp	.+106    	; 0x1266 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		}
		else if (pins[i] < 14)		// port B
    11fc:	8e 30       	cpi	r24, 0x0E	; 14
    11fe:	c8 f4       	brcc	.+50     	; 0x1232 <_ZN11PololuQTRRC4initEPhhjh+0x112>
		{
			_bitmask[i] = 1 << (pins[i] - 8);
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	08 97       	sbiw	r24, 0x08	; 8
    1204:	fa 01       	movw	r30, r20
    1206:	02 c0       	rjmp	.+4      	; 0x120c <_ZN11PololuQTRRC4initEPhhjh+0xec>
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	8a 95       	dec	r24
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <_ZN11PololuQTRRC4initEPhhjh+0xe8>
    1210:	cf 01       	movw	r24, r30
    1212:	fe 01       	movw	r30, r28
    1214:	ea 0f       	add	r30, r26
    1216:	fb 1f       	adc	r31, r27
    1218:	80 a3       	std	Z+32, r24	; 0x20
			_portBMask |= _bitmask[i];
    121a:	f7 01       	movw	r30, r14
    121c:	20 81       	ld	r18, Z
    121e:	28 2b       	or	r18, r24
    1220:	20 83       	st	Z, r18
			_register[i] = &PINB;
    1222:	54 96       	adiw	r26, 0x14	; 20
    1224:	aa 0f       	add	r26, r26
    1226:	bb 1f       	adc	r27, r27
    1228:	ac 0f       	add	r26, r28
    122a:	bd 1f       	adc	r27, r29
    122c:	6d 92       	st	X+, r6
    122e:	7c 92       	st	X, r7
    1230:	1a c0       	rjmp	.+52     	; 0x1266 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		}
		else if (pins[i] < 20)		// port C
    1232:	84 31       	cpi	r24, 0x14	; 20
    1234:	c0 f4       	brcc	.+48     	; 0x1266 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		{
			_bitmask[i] = 1 << (pins[i] - 14);
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 97       	sbiw	r24, 0x0e	; 14
    123a:	fa 01       	movw	r30, r20
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <_ZN11PololuQTRRC4initEPhhjh+0x122>
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	8a 95       	dec	r24
    1244:	e2 f7       	brpl	.-8      	; 0x123e <_ZN11PololuQTRRC4initEPhhjh+0x11e>
    1246:	cf 01       	movw	r24, r30
    1248:	fe 01       	movw	r30, r28
    124a:	ea 0f       	add	r30, r26
    124c:	fb 1f       	adc	r31, r27
    124e:	80 a3       	std	Z+32, r24	; 0x20
			_portCMask |= _bitmask[i];
    1250:	f6 01       	movw	r30, r12
    1252:	20 81       	ld	r18, Z
    1254:	28 2b       	or	r18, r24
    1256:	20 83       	st	Z, r18
			_register[i] = &PINC;
    1258:	54 96       	adiw	r26, 0x14	; 20
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	ac 0f       	add	r26, r28
    1260:	bd 1f       	adc	r27, r29
    1262:	4d 92       	st	X+, r4
    1264:	5c 92       	st	X, r5
	_timeout_us = timeout_us;
	if (numSensors > 8)
		_numSensors = 8;
	else
		_numSensors = numSensors;
	for (i = 0; i < _numSensors; i++)
    1266:	3f 5f       	subi	r19, 0xFF	; 255
    1268:	88 ad       	ldd	r24, Y+56	; 0x38
    126a:	38 17       	cp	r19, r24
    126c:	08 f4       	brcc	.+2      	; 0x1270 <_ZN11PololuQTRRC4initEPhhjh+0x150>
    126e:	98 cf       	rjmp	.-208    	; 0x11a0 <_ZN11PololuQTRRC4initEPhhjh+0x80>
			_portCMask |= _bitmask[i];
			_register[i] = &PINC;
		}
	}
	
	if (emitterPin < 8)				// port D
    1270:	08 30       	cpi	r16, 0x08	; 8
    1272:	78 f4       	brcc	.+30     	; 0x1292 <_ZN11PololuQTRRC4initEPhhjh+0x172>
	{
		_emitterBitmask = 1 << emitterPin;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <_ZN11PololuQTRRC4initEPhhjh+0x15e>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 95       	dec	r16
    1280:	e2 f7       	brpl	.-8      	; 0x127a <_ZN11PololuQTRRC4initEPhhjh+0x15a>
    1282:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTD;
    1284:	8b e2       	ldi	r24, 0x2B	; 43
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	9d af       	std	Y+61, r25	; 0x3d
    128a:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRD;
    128c:	8a e2       	ldi	r24, 0x2A	; 42
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	29 c0       	rjmp	.+82     	; 0x12e4 <_ZN11PololuQTRRC4initEPhhjh+0x1c4>
	}
	else if (emitterPin < 14)		// port B
    1292:	0e 30       	cpi	r16, 0x0E	; 14
    1294:	98 f4       	brcc	.+38     	; 0x12bc <_ZN11PololuQTRRC4initEPhhjh+0x19c>
	{
		_emitterBitmask = 1 << (emitterPin - 8);
    1296:	20 2f       	mov	r18, r16
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	28 50       	subi	r18, 0x08	; 8
    129c:	30 40       	sbci	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <_ZN11PololuQTRRC4initEPhhjh+0x188>
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	2a 95       	dec	r18
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <_ZN11PololuQTRRC4initEPhhjh+0x184>
    12ac:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTB;
    12ae:	85 e2       	ldi	r24, 0x25	; 37
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9d af       	std	Y+61, r25	; 0x3d
    12b4:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRB;
    12b6:	84 e2       	ldi	r24, 0x24	; 36
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	14 c0       	rjmp	.+40     	; 0x12e4 <_ZN11PololuQTRRC4initEPhhjh+0x1c4>
	}
	else if (emitterPin < 20)		// port C
    12bc:	04 31       	cpi	r16, 0x14	; 20
    12be:	a8 f4       	brcc	.+42     	; 0x12ea <_ZN11PololuQTRRC4initEPhhjh+0x1ca>
	{
		_emitterBitmask = 1 << (emitterPin - 14);
    12c0:	20 2f       	mov	r18, r16
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	2e 50       	subi	r18, 0x0E	; 14
    12c6:	30 40       	sbci	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <_ZN11PololuQTRRC4initEPhhjh+0x1b2>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	2a 95       	dec	r18
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <_ZN11PololuQTRRC4initEPhhjh+0x1ae>
    12d6:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTC;
    12d8:	88 e2       	ldi	r24, 0x28	; 40
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9d af       	std	Y+61, r25	; 0x3d
    12de:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRC;
    12e0:	87 e2       	ldi	r24, 0x27	; 39
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9f af       	std	Y+63, r25	; 0x3f
    12e6:	8e af       	std	Y+62, r24	; 0x3e
    12e8:	04 c0       	rjmp	.+8      	; 0x12f2 <_ZN11PololuQTRRC4initEPhhjh+0x1d2>
	}
	else
	{
		_emitterDDR = 0;
    12ea:	1f ae       	std	Y+63, r1	; 0x3f
    12ec:	1e ae       	std	Y+62, r1	; 0x3e
		_emitterPORT = 0;
    12ee:	1d ae       	std	Y+61, r1	; 0x3d
    12f0:	1c ae       	std	Y+60, r1	; 0x3c
	}
}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	8f 90       	pop	r8
    1308:	7f 90       	pop	r7
    130a:	6f 90       	pop	r6
    130c:	5f 90       	pop	r5
    130e:	4f 90       	pop	r4
    1310:	3f 90       	pop	r3
    1312:	2f 90       	pop	r2
    1314:	08 95       	ret

00001316 <_ZN11PololuQTRRC4readEPj>:
// unsigned int sensor_values[8];
// sensors.read(sensor_values);
// ...
// The values returned are in microseconds and range from 0 to
// timeout_us (as specified in the constructor).
void PololuQTRRC::read(unsigned int *sensor_values)
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e1 e9       	ldi	r30, 0x91	; 145
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__prologue_saves__+0xc>
    1322:	8c 01       	movw	r16, r24
    1324:	5b 01       	movw	r10, r22
	unsigned char i;
	unsigned char start_time;
	unsigned char delta_time;
	unsigned int time = 0;
	unsigned int timeout =
		(unsigned int)(_timeout_us * (unsigned long)(F_CPU / 800000UL) / 10);
    1326:	dc 01       	movw	r26, r24
    1328:	d9 96       	adiw	r26, 0x39	; 57
    132a:	6d 91       	ld	r22, X+
    132c:	7c 91       	ld	r23, X
    132e:	da 97       	sbiw	r26, 0x3a	; 58
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	29 e1       	ldi	r18, 0x19	; 25
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
    134c:	49 01       	movw	r8, r18

	unsigned char last_b = _portBMask;
    134e:	00 5c       	subi	r16, 0xC0	; 192
    1350:	1f 4f       	sbci	r17, 0xFF	; 255
    1352:	e8 01       	movw	r28, r16
    1354:	a9 91       	ld	r26, Y+
	unsigned char last_c = _portCMask;
    1356:	fe 01       	movw	r30, r28
    1358:	b1 91       	ld	r27, Z+
    135a:	8f 01       	movw	r16, r30
	unsigned char last_d = _portDMask;
    135c:	c0 80       	ld	r12, Z
    135e:	02 54       	subi	r16, 0x42	; 66
    1360:	10 40       	sbci	r17, 0x00	; 0
	
	TCCR2A |= 0x03;
    1362:	80 91 b0 00 	lds	r24, 0x00B0
    1366:	83 60       	ori	r24, 0x03	; 3
    1368:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0x02;		// run timer2 in normal mode at 2.5 MHz
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	80 93 b1 00 	sts	0x00B1, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <_ZN11PololuQTRRC4readEPj+0x72>
						// this is compatible with OrangutanMotors
	
	// reset the values
	for(i = 0; i < _numSensors; i++)
		sensor_values[i] = 0;
    1376:	e9 2f       	mov	r30, r25
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	ea 0d       	add	r30, r10
    1380:	fb 1d       	adc	r31, r11
    1382:	11 82       	std	Z+1, r1	; 0x01
    1384:	10 82       	st	Z, r1
	TCCR2A |= 0x03;
	TCCR2B = 0x02;		// run timer2 in normal mode at 2.5 MHz
						// this is compatible with OrangutanMotors
	
	// reset the values
	for(i = 0; i < _numSensors; i++)
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	e8 01       	movw	r28, r16
    138a:	88 ad       	ldd	r24, Y+56	; 0x38
    138c:	98 17       	cp	r25, r24
    138e:	98 f3       	brcs	.-26     	; 0x1376 <_ZN11PololuQTRRC4readEPj+0x60>
		sensor_values[i] = 0;
	
	// set all sensor pins to outputs
	DDRB |= _portBMask;
    1390:	84 b1       	in	r24, 0x04	; 4
    1392:	00 5c       	subi	r16, 0xC0	; 192
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
    1396:	f8 01       	movw	r30, r16
    1398:	31 91       	ld	r19, Z+
    139a:	83 2b       	or	r24, r19
    139c:	84 b9       	out	0x04, r24	; 4
	DDRC |= _portCMask;
    139e:	87 b1       	in	r24, 0x07	; 7
    13a0:	ef 01       	movw	r28, r30
    13a2:	29 91       	ld	r18, Y+
    13a4:	8e 01       	movw	r16, r28
    13a6:	82 2b       	or	r24, r18
    13a8:	87 b9       	out	0x07, r24	; 7
	DDRD |= _portDMask;
    13aa:	8a b1       	in	r24, 0x0a	; 10
    13ac:	98 81       	ld	r25, Y
    13ae:	02 54       	subi	r16, 0x42	; 66
    13b0:	10 40       	sbci	r17, 0x00	; 0
    13b2:	89 2b       	or	r24, r25
    13b4:	8a b9       	out	0x0a, r24	; 10
	
	// drive high for 10 us
	PORTB |= _portBMask;
    13b6:	85 b1       	in	r24, 0x05	; 5
    13b8:	83 2b       	or	r24, r19
    13ba:	85 b9       	out	0x05, r24	; 5
	PORTC |= _portCMask;
    13bc:	88 b1       	in	r24, 0x08	; 8
    13be:	82 2b       	or	r24, r18
    13c0:	88 b9       	out	0x08, r24	; 8
	PORTD |= _portDMask;
    13c2:	8b b1       	in	r24, 0x0b	; 11
    13c4:	89 2b       	or	r24, r25
    13c6:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    13c8:	82 e4       	ldi	r24, 0x42	; 66
    13ca:	8a 95       	dec	r24
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <_ZN11PololuQTRRC4readEPj+0xb4>
}


void PololuQTRRC::emittersOn()
{
  if (_emitterDDR == 0)
    13ce:	e8 01       	movw	r28, r16
    13d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    13d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    13d4:	30 97       	sbiw	r30, 0x00	; 0
    13d6:	51 f0       	breq	.+20     	; 0x13ec <_ZN11PololuQTRRC4readEPj+0xd6>
		return;
	*_emitterDDR |= _emitterBitmask;
    13d8:	80 81       	ld	r24, Z
    13da:	9b ad       	ldd	r25, Y+59	; 0x3b
    13dc:	89 2b       	or	r24, r25
    13de:	80 83       	st	Z, r24
	*_emitterPORT |= _emitterBitmask;
    13e0:	ec ad       	ldd	r30, Y+60	; 0x3c
    13e2:	fd ad       	ldd	r31, Y+61	; 0x3d
    13e4:	80 81       	ld	r24, Z
    13e6:	9b ad       	ldd	r25, Y+59	; 0x3b
    13e8:	89 2b       	or	r24, r25
    13ea:	80 83       	st	Z, r24
	_delay_us(10);
	
	PololuQTRRC::emittersOn();
	
	// set all ports to inputs
	DDRB &= ~_portBMask;
    13ec:	84 b1       	in	r24, 0x04	; 4
    13ee:	00 5c       	subi	r16, 0xC0	; 192
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	f8 01       	movw	r30, r16
    13f4:	31 91       	ld	r19, Z+
    13f6:	30 95       	com	r19
    13f8:	83 23       	and	r24, r19
    13fa:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~_portCMask;
    13fc:	87 b1       	in	r24, 0x07	; 7
    13fe:	ef 01       	movw	r28, r30
    1400:	29 91       	ld	r18, Y+
    1402:	8e 01       	movw	r16, r28
    1404:	20 95       	com	r18
    1406:	82 23       	and	r24, r18
    1408:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~_portDMask;
    140a:	8a b1       	in	r24, 0x0a	; 10
    140c:	98 81       	ld	r25, Y
    140e:	02 54       	subi	r16, 0x42	; 66
    1410:	10 40       	sbci	r17, 0x00	; 0
    1412:	90 95       	com	r25
    1414:	89 23       	and	r24, r25
    1416:	8a b9       	out	0x0a, r24	; 10
	
	// turn off pull ups
	PORTB &= ~_portBMask;
    1418:	85 b1       	in	r24, 0x05	; 5
    141a:	38 23       	and	r19, r24
    141c:	35 b9       	out	0x05, r19	; 5
	PORTC &= ~_portCMask;
    141e:	88 b1       	in	r24, 0x08	; 8
    1420:	28 23       	and	r18, r24
    1422:	28 b9       	out	0x08, r18	; 8
	PORTD &= ~_portDMask;
    1424:	8b b1       	in	r24, 0x0b	; 11
    1426:	98 23       	and	r25, r24
    1428:	9b b9       	out	0x0b, r25	; 11

	start_time = TCNT2;
    142a:	d0 90 b2 00 	lds	r13, 0x00B2
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	3b c0       	rjmp	.+118    	; 0x14aa <_ZN11PololuQTRRC4readEPj+0x194>
	while (time < timeout)
	{
		// Keep track of the total time.
		// This explicitly casts the difference to unsigned char, so
		// we don't add negative values.
		delta_time = TCNT2 - start_time;
    1434:	f0 90 b2 00 	lds	r15, 0x00B2
    1438:	fd 18       	sub	r15, r13
		time += delta_time;
    143a:	6f 0d       	add	r22, r15
    143c:	71 1d       	adc	r23, r1
		start_time += delta_time;

		// continue immediately if there is no change
		if (PINB == last_b && PINC == last_c && PIND == last_d)
    143e:	e3 b0       	in	r14, 0x03	; 3
    1440:	ea 16       	cp	r14, r26
    1442:	09 f0       	breq	.+2      	; 0x1446 <_ZN11PololuQTRRC4readEPj+0x130>
    1444:	76 c0       	rjmp	.+236    	; 0x1532 <_ZN11PololuQTRRC4readEPj+0x21c>
    1446:	56 b1       	in	r21, 0x06	; 6
    1448:	5b 17       	cp	r21, r27
    144a:	09 f0       	breq	.+2      	; 0x144e <_ZN11PololuQTRRC4readEPj+0x138>
    144c:	72 c0       	rjmp	.+228    	; 0x1532 <_ZN11PololuQTRRC4readEPj+0x21c>
    144e:	89 b1       	in	r24, 0x09	; 9
    1450:	8c 15       	cp	r24, r12
    1452:	09 f0       	breq	.+2      	; 0x1456 <_ZN11PololuQTRRC4readEPj+0x140>
    1454:	6e c0       	rjmp	.+220    	; 0x1532 <_ZN11PololuQTRRC4readEPj+0x21c>
    1456:	26 c0       	rjmp	.+76     	; 0x14a4 <_ZN11PololuQTRRC4readEPj+0x18e>
		last_d = PIND;

		// figure out which pins changed
		for (i = 0; i < _numSensors; i++)
		{
			if (sensor_values[i] == 0 && !(*_register[i] & _bitmask[i]))
    1458:	a4 2f       	mov	r26, r20
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	ed 01       	movw	r28, r26
    145e:	cc 0f       	add	r28, r28
    1460:	dd 1f       	adc	r29, r29
    1462:	ca 0d       	add	r28, r10
    1464:	db 1d       	adc	r29, r11
    1466:	88 81       	ld	r24, Y
    1468:	99 81       	ldd	r25, Y+1	; 0x01
    146a:	89 2b       	or	r24, r25
    146c:	b1 f4       	brne	.+44     	; 0x149a <_ZN11PololuQTRRC4readEPj+0x184>
    146e:	fd 01       	movw	r30, r26
    1470:	74 96       	adiw	r30, 0x14	; 20
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	e0 0f       	add	r30, r16
    1478:	f1 1f       	adc	r31, r17
    147a:	01 90       	ld	r0, Z+
    147c:	f0 81       	ld	r31, Z
    147e:	e0 2d       	mov	r30, r0
    1480:	20 81       	ld	r18, Z
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	a0 0f       	add	r26, r16
    1486:	b1 1f       	adc	r27, r17
    1488:	90 96       	adiw	r26, 0x20	; 32
    148a:	8c 91       	ld	r24, X
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	28 23       	and	r18, r24
    1490:	39 23       	and	r19, r25
    1492:	23 2b       	or	r18, r19
    1494:	11 f4       	brne	.+4      	; 0x149a <_ZN11PololuQTRRC4readEPj+0x184>
				sensor_values[i] = time;
    1496:	79 83       	std	Y+1, r23	; 0x01
    1498:	68 83       	st	Y, r22
		last_b = PINB;
		last_c = PINC;
		last_d = PIND;

		// figure out which pins changed
		for (i = 0; i < _numSensors; i++)
    149a:	4f 5f       	subi	r20, 0xFF	; 255
    149c:	f8 01       	movw	r30, r16
    149e:	80 ad       	ldd	r24, Z+56	; 0x38
    14a0:	48 17       	cp	r20, r24
    14a2:	d0 f2       	brcs	.-76     	; 0x1458 <_ZN11PololuQTRRC4readEPj+0x142>
		// Keep track of the total time.
		// This explicitly casts the difference to unsigned char, so
		// we don't add negative values.
		delta_time = TCNT2 - start_time;
		time += delta_time;
		start_time += delta_time;
    14a4:	df 0c       	add	r13, r15
    14a6:	ae 2d       	mov	r26, r14
    14a8:	b5 2f       	mov	r27, r21
	PORTB &= ~_portBMask;
	PORTC &= ~_portCMask;
	PORTD &= ~_portDMask;

	start_time = TCNT2;
	while (time < timeout)
    14aa:	68 15       	cp	r22, r8
    14ac:	79 05       	cpc	r23, r9
    14ae:	10 f2       	brcs	.-124    	; 0x1434 <_ZN11PololuQTRRC4readEPj+0x11e>
// readLineSensors method, and calling these functions before or
// after the reading the sensors will have no effect on the
// readings, but you may wish to use these for testing purposes.
void PololuQTRRC::emittersOff()
{
	if (_emitterDDR == 0)
    14b0:	d8 01       	movw	r26, r16
    14b2:	de 96       	adiw	r26, 0x3e	; 62
    14b4:	ed 91       	ld	r30, X+
    14b6:	fc 91       	ld	r31, X
    14b8:	df 97       	sbiw	r26, 0x3f	; 63
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	81 f0       	breq	.+32     	; 0x14de <_ZN11PololuQTRRC4readEPj+0x1c8>
		return;
	*_emitterDDR |= _emitterBitmask;
    14be:	80 81       	ld	r24, Z
    14c0:	db 96       	adiw	r26, 0x3b	; 59
    14c2:	9c 91       	ld	r25, X
    14c4:	db 97       	sbiw	r26, 0x3b	; 59
    14c6:	89 2b       	or	r24, r25
    14c8:	80 83       	st	Z, r24
	*_emitterPORT &= ~_emitterBitmask;
    14ca:	dc 96       	adiw	r26, 0x3c	; 60
    14cc:	ed 91       	ld	r30, X+
    14ce:	fc 91       	ld	r31, X
    14d0:	dd 97       	sbiw	r26, 0x3d	; 61
    14d2:	90 81       	ld	r25, Z
    14d4:	db 96       	adiw	r26, 0x3b	; 59
    14d6:	8c 91       	ld	r24, X
    14d8:	80 95       	com	r24
    14da:	89 23       	and	r24, r25
    14dc:	80 83       	st	Z, r24
    14de:	ff 24       	eor	r15, r15
    14e0:	22 c0       	rjmp	.+68     	; 0x1526 <_ZN11PololuQTRRC4readEPj+0x210>
	}

	PololuQTRRC::emittersOff();
	
	for(i = 0; i < _numSensors; i++)
		if (!sensor_values[i])
    14e2:	cf 2d       	mov	r28, r15
    14e4:	d0 e0       	ldi	r29, 0x00	; 0
    14e6:	cc 0f       	add	r28, r28
    14e8:	dd 1f       	adc	r29, r29
    14ea:	ca 0d       	add	r28, r10
    14ec:	db 1d       	adc	r29, r11
    14ee:	68 81       	ld	r22, Y
    14f0:	79 81       	ldd	r23, Y+1	; 0x01
    14f2:	61 15       	cp	r22, r1
    14f4:	71 05       	cpc	r23, r1
    14f6:	31 f4       	brne	.+12     	; 0x1504 <_ZN11PololuQTRRC4readEPj+0x1ee>
			sensor_values[i] = _timeout_us;
    14f8:	f8 01       	movw	r30, r16
    14fa:	81 ad       	ldd	r24, Z+57	; 0x39
    14fc:	92 ad       	ldd	r25, Z+58	; 0x3a
    14fe:	99 83       	std	Y+1, r25	; 0x01
    1500:	88 83       	st	Y, r24
    1502:	10 c0       	rjmp	.+32     	; 0x1524 <_ZN11PololuQTRRC4readEPj+0x20e>
		else
			sensor_values[i] = 
				(unsigned int)(sensor_values[i] * 10UL / 
					(unsigned char)(F_CPU / 800000UL));
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
    1514:	29 e1       	ldi	r18, 0x19	; 25
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
    1520:	39 83       	std	Y+1, r19	; 0x01
    1522:	28 83       	st	Y, r18
		}
	}

	PololuQTRRC::emittersOff();
	
	for(i = 0; i < _numSensors; i++)
    1524:	f3 94       	inc	r15
    1526:	d8 01       	movw	r26, r16
    1528:	d8 96       	adiw	r26, 0x38	; 56
    152a:	8c 91       	ld	r24, X
    152c:	f8 16       	cp	r15, r24
    152e:	c8 f2       	brcs	.-78     	; 0x14e2 <_ZN11PololuQTRRC4readEPj+0x1cc>
    1530:	05 c0       	rjmp	.+10     	; 0x153c <_ZN11PololuQTRRC4readEPj+0x226>
		// continue immediately if there is no change
		if (PINB == last_b && PINC == last_c && PIND == last_d)
			continue;

		// save the last observed values
		last_b = PINB;
    1532:	e3 b0       	in	r14, 0x03	; 3
		last_c = PINC;
    1534:	56 b1       	in	r21, 0x06	; 6
		last_d = PIND;
    1536:	c9 b0       	in	r12, 0x09	; 9
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	b0 cf       	rjmp	.-160    	; 0x149c <_ZN11PololuQTRRC4readEPj+0x186>
		else
			sensor_values[i] = 
				(unsigned int)(sensor_values[i] * 10UL / 
					(unsigned char)(F_CPU / 800000UL));

}
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	ec e0       	ldi	r30, 0x0C	; 12
    1542:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__epilogue_restores__+0xc>

00001546 <_ZN11PololuQTRRC11emittersOffEv>:

// Turn the IR LEDs off and on.  This is mainly for use by the
// readLineSensors method, and calling these functions before or
// after the reading the sensors will have no effect on the
// readings, but you may wish to use these for testing purposes.
void PololuQTRRC::emittersOff()
    1546:	dc 01       	movw	r26, r24
{
	if (_emitterDDR == 0)
    1548:	de 96       	adiw	r26, 0x3e	; 62
    154a:	ed 91       	ld	r30, X+
    154c:	fc 91       	ld	r31, X
    154e:	df 97       	sbiw	r26, 0x3f	; 63
    1550:	30 97       	sbiw	r30, 0x00	; 0
    1552:	81 f0       	breq	.+32     	; 0x1574 <_ZN11PololuQTRRC11emittersOffEv+0x2e>
		return;
	*_emitterDDR |= _emitterBitmask;
    1554:	80 81       	ld	r24, Z
    1556:	db 96       	adiw	r26, 0x3b	; 59
    1558:	9c 91       	ld	r25, X
    155a:	db 97       	sbiw	r26, 0x3b	; 59
    155c:	89 2b       	or	r24, r25
    155e:	80 83       	st	Z, r24
	*_emitterPORT &= ~_emitterBitmask;
    1560:	dc 96       	adiw	r26, 0x3c	; 60
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	dd 97       	sbiw	r26, 0x3d	; 61
    1568:	90 81       	ld	r25, Z
    156a:	db 96       	adiw	r26, 0x3b	; 59
    156c:	8c 91       	ld	r24, X
    156e:	80 95       	com	r24
    1570:	89 23       	and	r24, r25
    1572:	80 83       	st	Z, r24
    1574:	08 95       	ret

00001576 <_ZN11PololuQTRRC9calibrateEv>:
		return;
	*_emitterDDR |= _emitterBitmask;
	*_emitterPORT |= _emitterBitmask;
}

void PololuQTRRC::calibrate()
    1576:	a0 e1       	ldi	r26, 0x10	; 16
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e1 ec       	ldi	r30, 0xC1	; 193
    157c:	fa e0       	ldi	r31, 0x0A	; 10
    157e:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__prologue_saves__+0x18>
    1582:	7c 01       	movw	r14, r24
{
	unsigned int sensor_values[8];
	int i;
	read(sensor_values);
    1584:	8e 01       	movw	r16, r28
    1586:	0f 5f       	subi	r16, 0xFF	; 255
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	b8 01       	movw	r22, r16
    158c:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN11PololuQTRRC4readEPj>
    1590:	b8 01       	movw	r22, r16
    1592:	f7 01       	movw	r30, r14
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	19 c0       	rjmp	.+50     	; 0x15cc <_ZN11PololuQTRRC9calibrateEv+0x56>
	
	for(i=0;i<_numSensors;i++)
	{
		if(sensor_values[i] > calibratedMaximum[i])
    159a:	db 01       	movw	r26, r22
    159c:	2d 91       	ld	r18, X+
    159e:	3c 91       	ld	r19, X
    15a0:	80 89       	ldd	r24, Z+16	; 0x10
    15a2:	91 89       	ldd	r25, Z+17	; 0x11
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	10 f4       	brcc	.+4      	; 0x15ae <_ZN11PololuQTRRC9calibrateEv+0x38>
			calibratedMaximum[i] = sensor_values[i];
    15aa:	31 8b       	std	Z+17, r19	; 0x11
    15ac:	20 8b       	std	Z+16, r18	; 0x10
		if(sensor_values[i] < calibratedMinimum[i])
    15ae:	db 01       	movw	r26, r22
    15b0:	2d 91       	ld	r18, X+
    15b2:	3c 91       	ld	r19, X
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	10 f4       	brcc	.+4      	; 0x15c2 <_ZN11PololuQTRRC9calibrateEv+0x4c>
			calibratedMinimum[i] = sensor_values[i];
    15be:	31 83       	std	Z+1, r19	; 0x01
    15c0:	20 83       	st	Z, r18
{
	unsigned int sensor_values[8];
	int i;
	read(sensor_values);
	
	for(i=0;i<_numSensors;i++)
    15c2:	4f 5f       	subi	r20, 0xFF	; 255
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	6e 5f       	subi	r22, 0xFE	; 254
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	32 96       	adiw	r30, 0x02	; 2
    15cc:	d7 01       	movw	r26, r14
    15ce:	d8 96       	adiw	r26, 0x38	; 56
    15d0:	8c 91       	ld	r24, X
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	48 17       	cp	r20, r24
    15d6:	59 07       	cpc	r21, r25
    15d8:	04 f3       	brlt	.-64     	; 0x159a <_ZN11PololuQTRRC9calibrateEv+0x24>
		if(sensor_values[i] > calibratedMaximum[i])
			calibratedMaximum[i] = sensor_values[i];
		if(sensor_values[i] < calibratedMinimum[i])
			calibratedMinimum[i] = sensor_values[i];
	}
}
    15da:	60 96       	adiw	r28, 0x10	; 16
    15dc:	e6 e0       	ldi	r30, 0x06	; 6
    15de:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__epilogue_restores__+0x18>

000015e2 <_ZN11PololuQTRRC14readCalibratedEPj>:

void PololuQTRRC::readCalibrated(unsigned int *sensor_values)
    15e2:	a0 e0       	ldi	r26, 0x00	; 0
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e7 ef       	ldi	r30, 0xF7	; 247
    15e8:	fa e0       	ldi	r31, 0x0A	; 10
    15ea:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__prologue_saves__+0x10>
    15ee:	5c 01       	movw	r10, r24
    15f0:	16 2f       	mov	r17, r22
    15f2:	07 2f       	mov	r16, r23
{
	int i;

	read(sensor_values);
    15f4:	0e 94 8b 09 	call	0x1316	; 0x1316 <_ZN11PololuQTRRC4readEPj>
    15f8:	21 2f       	mov	r18, r17
    15fa:	30 2f       	mov	r19, r16
    15fc:	c9 01       	movw	r24, r18
    15fe:	6c 01       	movw	r12, r24
    1600:	e5 01       	movw	r28, r10
    1602:	ee 24       	eor	r14, r14
    1604:	ff 24       	eor	r15, r15
    1606:	32 c0       	rjmp	.+100    	; 0x166c <_ZN11PololuQTRRC14readCalibratedEPj+0x8a>

	for(i=0;i<_numSensors;i++)
	{
		int denominator = calibratedMaximum[i] - calibratedMinimum[i];
    1608:	28 81       	ld	r18, Y
    160a:	39 81       	ldd	r19, Y+1	; 0x01
    160c:	08 89       	ldd	r16, Y+16	; 0x10
    160e:	19 89       	ldd	r17, Y+17	; 0x11
    1610:	02 1b       	sub	r16, r18
    1612:	13 0b       	sbc	r17, r19
		signed int x = 0;
		if(denominator != 0)
    1614:	09 f1       	breq	.+66     	; 0x1658 <_ZN11PololuQTRRC14readCalibratedEPj+0x76>
			x = (((signed long)sensor_values[i]) - calibratedMinimum[i])
				* 1000 / denominator;
    1616:	f6 01       	movw	r30, r12
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	62 1b       	sub	r22, r18
    1626:	73 0b       	sbc	r23, r19
    1628:	84 0b       	sbc	r24, r20
    162a:	95 0b       	sbc	r25, r21
    162c:	28 ee       	ldi	r18, 0xE8	; 232
    162e:	33 e0       	ldi	r19, 0x03	; 3
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
    1638:	98 01       	movw	r18, r16
    163a:	44 27       	eor	r20, r20
    163c:	37 fd       	sbrc	r19, 7
    163e:	40 95       	com	r20
    1640:	54 2f       	mov	r21, r20
    1642:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__divmodsi4>
    1646:	c9 01       	movw	r24, r18
    1648:	f3 e0       	ldi	r31, 0x03	; 3
    164a:	29 3e       	cpi	r18, 0xE9	; 233
    164c:	3f 07       	cpc	r19, r31
    164e:	14 f0       	brlt	.+4      	; 0x1654 <_ZN11PololuQTRRC14readCalibratedEPj+0x72>
    1650:	88 ee       	ldi	r24, 0xE8	; 232
    1652:	93 e0       	ldi	r25, 0x03	; 3
    1654:	97 ff       	sbrs	r25, 7
    1656:	02 c0       	rjmp	.+4      	; 0x165c <_ZN11PololuQTRRC14readCalibratedEPj+0x7a>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
		if(x < 0)
			x = 0;
		else if(x > 1000)
			x = 1000;
		sensor_values[i] = x;
    165c:	f6 01       	movw	r30, r12
    165e:	81 93       	st	Z+, r24
    1660:	91 93       	st	Z+, r25
    1662:	6f 01       	movw	r12, r30
{
	int i;

	read(sensor_values);

	for(i=0;i<_numSensors;i++)
    1664:	08 94       	sec
    1666:	e1 1c       	adc	r14, r1
    1668:	f1 1c       	adc	r15, r1
    166a:	22 96       	adiw	r28, 0x02	; 2
    166c:	f5 01       	movw	r30, r10
    166e:	80 ad       	ldd	r24, Z+56	; 0x38
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	e8 16       	cp	r14, r24
    1674:	f9 06       	cpc	r15, r25
    1676:	44 f2       	brlt	.-112    	; 0x1608 <_ZN11PololuQTRRC14readCalibratedEPj+0x26>
			x = 0;
		else if(x > 1000)
			x = 1000;
		sensor_values[i] = x;
	}
}
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	ea e0       	ldi	r30, 0x0A	; 10
    167e:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__epilogue_restores__+0x10>

00001682 <_ZN11PololuQTRRC8readLineEPjh>:

unsigned int PololuQTRRC::readLine(unsigned int *sensor_values, unsigned char white_line)
    1682:	a5 e0       	ldi	r26, 0x05	; 5
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e4       	ldi	r30, 0x47	; 71
    1688:	fb e0       	ldi	r31, 0x0B	; 11
    168a:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__prologue_saves__>
    168e:	8c 01       	movw	r16, r24
    1690:	f6 2e       	mov	r15, r22
    1692:	e7 2e       	mov	r14, r23
    1694:	4b 83       	std	Y+3, r20	; 0x03
	unsigned long avg; // this is for the weighted total, which is long
	                   // before division
	unsigned int sum; // this is for the denominator which is <= 64000
	static int16_t last_value=0; // assume initially that the line is left.

	readCalibrated(sensor_values);
    1696:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <_ZN11PololuQTRRC14readCalibratedEPj>

	avg = 0;
	sum = 0;
  
	for(i=0;i<_numSensors;i++) {
    169a:	d8 01       	movw	r26, r16
    169c:	d8 96       	adiw	r26, 0x38	; 56
    169e:	bc 91       	ld	r27, X
    16a0:	ba 83       	std	Y+2, r27	; 0x02
    16a2:	2f 2d       	mov	r18, r15
    16a4:	3e 2d       	mov	r19, r14
    16a6:	c9 01       	movw	r24, r18
    16a8:	9d 83       	std	Y+5, r25	; 0x05
    16aa:	8c 83       	std	Y+4, r24	; 0x04
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	66 24       	eor	r6, r6
    16b0:	77 24       	eor	r7, r7
    16b2:	43 01       	movw	r8, r6
    16b4:	00 e0       	ldi	r16, 0x00	; 0
    16b6:	10 e0       	ldi	r17, 0x00	; 0
    16b8:	aa 24       	eor	r10, r10
    16ba:	bb 24       	eor	r11, r11
    16bc:	65 01       	movw	r12, r10
    16be:	2b 2e       	mov	r2, r27
    16c0:	33 24       	eor	r3, r3
    16c2:	44 24       	eor	r4, r4
    16c4:	55 24       	eor	r5, r5
    16c6:	2e c0       	rjmp	.+92     	; 0x1724 <_ZN11PololuQTRRC8readLineEPjh+0xa2>
		int value = sensor_values[i];
    16c8:	ec 81       	ldd	r30, Y+4	; 0x04
    16ca:	fd 81       	ldd	r31, Y+5	; 0x05
    16cc:	e0 80       	ld	r14, Z
    16ce:	f1 80       	ldd	r15, Z+1	; 0x01
		if(white_line)
    16d0:	fb 81       	ldd	r31, Y+3	; 0x03
    16d2:	ff 23       	and	r31, r31
    16d4:	29 f0       	breq	.+10     	; 0x16e0 <_ZN11PololuQTRRC8readLineEPjh+0x5e>
			value = 1000-value;
    16d6:	28 ee       	ldi	r18, 0xE8	; 232
    16d8:	33 e0       	ldi	r19, 0x03	; 3
    16da:	2e 19       	sub	r18, r14
    16dc:	3f 09       	sbc	r19, r15
    16de:	79 01       	movw	r14, r18

		// keep track of whether we see the line at all
		if(value > 200) {
    16e0:	39 ec       	ldi	r19, 0xC9	; 201
    16e2:	e3 16       	cp	r14, r19
    16e4:	f1 04       	cpc	r15, r1
    16e6:	14 f0       	brlt	.+4      	; 0x16ec <_ZN11PololuQTRRC8readLineEPjh+0x6a>
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
			on_line = 1;
		}

		avg += (long)(value) * (i * 1000);
    16ec:	b7 01       	movw	r22, r14
    16ee:	88 27       	eor	r24, r24
    16f0:	77 fd       	sbrc	r23, 7
    16f2:	80 95       	com	r24
    16f4:	98 2f       	mov	r25, r24
    16f6:	a6 01       	movw	r20, r12
    16f8:	95 01       	movw	r18, r10
    16fa:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
    16fe:	66 0e       	add	r6, r22
    1700:	77 1e       	adc	r7, r23
    1702:	88 1e       	adc	r8, r24
    1704:	99 1e       	adc	r9, r25
		sum += value;
    1706:	0e 0d       	add	r16, r14
    1708:	1f 1d       	adc	r17, r15
    170a:	88 ee       	ldi	r24, 0xE8	; 232
    170c:	93 e0       	ldi	r25, 0x03	; 3
    170e:	a0 e0       	ldi	r26, 0x00	; 0
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	a8 0e       	add	r10, r24
    1714:	b9 1e       	adc	r11, r25
    1716:	ca 1e       	adc	r12, r26
    1718:	db 1e       	adc	r13, r27
    171a:	ac 81       	ldd	r26, Y+4	; 0x04
    171c:	bd 81       	ldd	r27, Y+5	; 0x05
    171e:	12 96       	adiw	r26, 0x02	; 2
    1720:	bd 83       	std	Y+5, r27	; 0x05
    1722:	ac 83       	std	Y+4, r26	; 0x04
	readCalibrated(sensor_values);

	avg = 0;
	sum = 0;
  
	for(i=0;i<_numSensors;i++) {
    1724:	c2 01       	movw	r24, r4
    1726:	b1 01       	movw	r22, r2
    1728:	28 ee       	ldi	r18, 0xE8	; 232
    172a:	33 e0       	ldi	r19, 0x03	; 3
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	50 e0       	ldi	r21, 0x00	; 0
    1730:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__mulsi3>
    1734:	a6 16       	cp	r10, r22
    1736:	b7 06       	cpc	r11, r23
    1738:	c8 06       	cpc	r12, r24
    173a:	d9 06       	cpc	r13, r25
    173c:	29 f6       	brne	.-118    	; 0x16c8 <_ZN11PololuQTRRC8readLineEPjh+0x46>

		avg += (long)(value) * (i * 1000);
		sum += value;
	}

	if(!on_line)
    173e:	b9 81       	ldd	r27, Y+1	; 0x01
    1740:	bb 23       	and	r27, r27
    1742:	29 f5       	brne	.+74     	; 0x178e <_ZN11PololuQTRRC8readLineEPjh+0x10c>
	{
		// If it last read to the left of center, return 0.
		if(last_value < (_numSensors-1)*1000/2)
    1744:	ea 81       	ldd	r30, Y+2	; 0x02
    1746:	4e 2f       	mov	r20, r30
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	84 ef       	ldi	r24, 0xF4	; 244
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	9c 01       	movw	r18, r24
    1750:	42 9f       	mul	r20, r18
    1752:	c0 01       	movw	r24, r0
    1754:	43 9f       	mul	r20, r19
    1756:	90 0d       	add	r25, r0
    1758:	52 9f       	mul	r21, r18
    175a:	90 0d       	add	r25, r0
    175c:	11 24       	eor	r1, r1
    175e:	84 5f       	subi	r24, 0xF4	; 244
    1760:	91 40       	sbci	r25, 0x01	; 1
    1762:	20 91 9b 03 	lds	r18, 0x039B
    1766:	30 91 9c 03 	lds	r19, 0x039C
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	1c f4       	brge	.+6      	; 0x1776 <_ZN11PololuQTRRC8readLineEPjh+0xf4>
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <_ZN11PololuQTRRC8readLineEPjh+0x122>
			return 0;
		
		// If it last read to the right of center, return the max.
		else
			return (_numSensors-1)*1000;
    1776:	88 ee       	ldi	r24, 0xE8	; 232
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	48 9f       	mul	r20, r24
    177c:	90 01       	movw	r18, r0
    177e:	49 9f       	mul	r20, r25
    1780:	30 0d       	add	r19, r0
    1782:	58 9f       	mul	r21, r24
    1784:	30 0d       	add	r19, r0
    1786:	11 24       	eor	r1, r1
    1788:	28 5e       	subi	r18, 0xE8	; 232
    178a:	33 40       	sbci	r19, 0x03	; 3
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <_ZN11PololuQTRRC8readLineEPjh+0x122>

	}

	last_value = avg/sum;
    178e:	98 01       	movw	r18, r16
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	c4 01       	movw	r24, r8
    1796:	b3 01       	movw	r22, r6
    1798:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__udivmodsi4>
    179c:	20 93 9b 03 	sts	0x039B, r18
    17a0:	30 93 9c 03 	sts	0x039C, r19

	return last_value;
}
    17a4:	c9 01       	movw	r24, r18
    17a6:	25 96       	adiw	r28, 0x05	; 5
    17a8:	e2 e1       	ldi	r30, 0x12	; 18
    17aa:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__epilogue_restores__>

000017ae <_GLOBAL__I_qtr_emitters_on>:
    17ae:	08 95       	ret

000017b0 <__mulsi3>:
    17b0:	62 9f       	mul	r22, r18
    17b2:	d0 01       	movw	r26, r0
    17b4:	73 9f       	mul	r23, r19
    17b6:	f0 01       	movw	r30, r0
    17b8:	82 9f       	mul	r24, r18
    17ba:	e0 0d       	add	r30, r0
    17bc:	f1 1d       	adc	r31, r1
    17be:	64 9f       	mul	r22, r20
    17c0:	e0 0d       	add	r30, r0
    17c2:	f1 1d       	adc	r31, r1
    17c4:	92 9f       	mul	r25, r18
    17c6:	f0 0d       	add	r31, r0
    17c8:	83 9f       	mul	r24, r19
    17ca:	f0 0d       	add	r31, r0
    17cc:	74 9f       	mul	r23, r20
    17ce:	f0 0d       	add	r31, r0
    17d0:	65 9f       	mul	r22, r21
    17d2:	f0 0d       	add	r31, r0
    17d4:	99 27       	eor	r25, r25
    17d6:	72 9f       	mul	r23, r18
    17d8:	b0 0d       	add	r27, r0
    17da:	e1 1d       	adc	r30, r1
    17dc:	f9 1f       	adc	r31, r25
    17de:	63 9f       	mul	r22, r19
    17e0:	b0 0d       	add	r27, r0
    17e2:	e1 1d       	adc	r30, r1
    17e4:	f9 1f       	adc	r31, r25
    17e6:	bd 01       	movw	r22, r26
    17e8:	cf 01       	movw	r24, r30
    17ea:	11 24       	eor	r1, r1
    17ec:	08 95       	ret

000017ee <__udivmodqi4>:
    17ee:	99 1b       	sub	r25, r25
    17f0:	79 e0       	ldi	r23, 0x09	; 9
    17f2:	04 c0       	rjmp	.+8      	; 0x17fc <__udivmodqi4_ep>

000017f4 <__udivmodqi4_loop>:
    17f4:	99 1f       	adc	r25, r25
    17f6:	96 17       	cp	r25, r22
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <__udivmodqi4_ep>
    17fa:	96 1b       	sub	r25, r22

000017fc <__udivmodqi4_ep>:
    17fc:	88 1f       	adc	r24, r24
    17fe:	7a 95       	dec	r23
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__udivmodqi4_loop>
    1802:	80 95       	com	r24
    1804:	08 95       	ret

00001806 <__udivmodhi4>:
    1806:	aa 1b       	sub	r26, r26
    1808:	bb 1b       	sub	r27, r27
    180a:	51 e1       	ldi	r21, 0x11	; 17
    180c:	07 c0       	rjmp	.+14     	; 0x181c <__udivmodhi4_ep>

0000180e <__udivmodhi4_loop>:
    180e:	aa 1f       	adc	r26, r26
    1810:	bb 1f       	adc	r27, r27
    1812:	a6 17       	cp	r26, r22
    1814:	b7 07       	cpc	r27, r23
    1816:	10 f0       	brcs	.+4      	; 0x181c <__udivmodhi4_ep>
    1818:	a6 1b       	sub	r26, r22
    181a:	b7 0b       	sbc	r27, r23

0000181c <__udivmodhi4_ep>:
    181c:	88 1f       	adc	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	5a 95       	dec	r21
    1822:	a9 f7       	brne	.-22     	; 0x180e <__udivmodhi4_loop>
    1824:	80 95       	com	r24
    1826:	90 95       	com	r25
    1828:	bc 01       	movw	r22, r24
    182a:	cd 01       	movw	r24, r26
    182c:	08 95       	ret

0000182e <__divmodhi4>:
    182e:	97 fb       	bst	r25, 7
    1830:	09 2e       	mov	r0, r25
    1832:	07 26       	eor	r0, r23
    1834:	0a d0       	rcall	.+20     	; 0x184a <__divmodhi4_neg1>
    1836:	77 fd       	sbrc	r23, 7
    1838:	04 d0       	rcall	.+8      	; 0x1842 <__divmodhi4_neg2>
    183a:	e5 df       	rcall	.-54     	; 0x1806 <__udivmodhi4>
    183c:	06 d0       	rcall	.+12     	; 0x184a <__divmodhi4_neg1>
    183e:	00 20       	and	r0, r0
    1840:	1a f4       	brpl	.+6      	; 0x1848 <__divmodhi4_exit>

00001842 <__divmodhi4_neg2>:
    1842:	70 95       	com	r23
    1844:	61 95       	neg	r22
    1846:	7f 4f       	sbci	r23, 0xFF	; 255

00001848 <__divmodhi4_exit>:
    1848:	08 95       	ret

0000184a <__divmodhi4_neg1>:
    184a:	f6 f7       	brtc	.-4      	; 0x1848 <__divmodhi4_exit>
    184c:	90 95       	com	r25
    184e:	81 95       	neg	r24
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	08 95       	ret

00001854 <__udivmodsi4>:
    1854:	a1 e2       	ldi	r26, 0x21	; 33
    1856:	1a 2e       	mov	r1, r26
    1858:	aa 1b       	sub	r26, r26
    185a:	bb 1b       	sub	r27, r27
    185c:	fd 01       	movw	r30, r26
    185e:	0d c0       	rjmp	.+26     	; 0x187a <__udivmodsi4_ep>

00001860 <__udivmodsi4_loop>:
    1860:	aa 1f       	adc	r26, r26
    1862:	bb 1f       	adc	r27, r27
    1864:	ee 1f       	adc	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	a2 17       	cp	r26, r18
    186a:	b3 07       	cpc	r27, r19
    186c:	e4 07       	cpc	r30, r20
    186e:	f5 07       	cpc	r31, r21
    1870:	20 f0       	brcs	.+8      	; 0x187a <__udivmodsi4_ep>
    1872:	a2 1b       	sub	r26, r18
    1874:	b3 0b       	sbc	r27, r19
    1876:	e4 0b       	sbc	r30, r20
    1878:	f5 0b       	sbc	r31, r21

0000187a <__udivmodsi4_ep>:
    187a:	66 1f       	adc	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	88 1f       	adc	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	1a 94       	dec	r1
    1884:	69 f7       	brne	.-38     	; 0x1860 <__udivmodsi4_loop>
    1886:	60 95       	com	r22
    1888:	70 95       	com	r23
    188a:	80 95       	com	r24
    188c:	90 95       	com	r25
    188e:	9b 01       	movw	r18, r22
    1890:	ac 01       	movw	r20, r24
    1892:	bd 01       	movw	r22, r26
    1894:	cf 01       	movw	r24, r30
    1896:	08 95       	ret

00001898 <__divmodsi4>:
    1898:	97 fb       	bst	r25, 7
    189a:	09 2e       	mov	r0, r25
    189c:	05 26       	eor	r0, r21
    189e:	0e d0       	rcall	.+28     	; 0x18bc <__divmodsi4_neg1>
    18a0:	57 fd       	sbrc	r21, 7
    18a2:	04 d0       	rcall	.+8      	; 0x18ac <__divmodsi4_neg2>
    18a4:	d7 df       	rcall	.-82     	; 0x1854 <__udivmodsi4>
    18a6:	0a d0       	rcall	.+20     	; 0x18bc <__divmodsi4_neg1>
    18a8:	00 1c       	adc	r0, r0
    18aa:	38 f4       	brcc	.+14     	; 0x18ba <__divmodsi4_exit>

000018ac <__divmodsi4_neg2>:
    18ac:	50 95       	com	r21
    18ae:	40 95       	com	r20
    18b0:	30 95       	com	r19
    18b2:	21 95       	neg	r18
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
    18b6:	4f 4f       	sbci	r20, 0xFF	; 255
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255

000018ba <__divmodsi4_exit>:
    18ba:	08 95       	ret

000018bc <__divmodsi4_neg1>:
    18bc:	f6 f7       	brtc	.-4      	; 0x18ba <__divmodsi4_exit>
    18be:	90 95       	com	r25
    18c0:	80 95       	com	r24
    18c2:	70 95       	com	r23
    18c4:	61 95       	neg	r22
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	08 95       	ret

000018ce <__prologue_saves__>:
    18ce:	2f 92       	push	r2
    18d0:	3f 92       	push	r3
    18d2:	4f 92       	push	r4
    18d4:	5f 92       	push	r5
    18d6:	6f 92       	push	r6
    18d8:	7f 92       	push	r7
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	ca 1b       	sub	r28, r26
    18f8:	db 0b       	sbc	r29, r27
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	09 94       	ijmp

00001906 <__epilogue_restores__>:
    1906:	2a 88       	ldd	r2, Y+18	; 0x12
    1908:	39 88       	ldd	r3, Y+17	; 0x11
    190a:	48 88       	ldd	r4, Y+16	; 0x10
    190c:	5f 84       	ldd	r5, Y+15	; 0x0f
    190e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1910:	7d 84       	ldd	r7, Y+13	; 0x0d
    1912:	8c 84       	ldd	r8, Y+12	; 0x0c
    1914:	9b 84       	ldd	r9, Y+11	; 0x0b
    1916:	aa 84       	ldd	r10, Y+10	; 0x0a
    1918:	b9 84       	ldd	r11, Y+9	; 0x09
    191a:	c8 84       	ldd	r12, Y+8	; 0x08
    191c:	df 80       	ldd	r13, Y+7	; 0x07
    191e:	ee 80       	ldd	r14, Y+6	; 0x06
    1920:	fd 80       	ldd	r15, Y+5	; 0x05
    1922:	0c 81       	ldd	r16, Y+4	; 0x04
    1924:	1b 81       	ldd	r17, Y+3	; 0x03
    1926:	aa 81       	ldd	r26, Y+2	; 0x02
    1928:	b9 81       	ldd	r27, Y+1	; 0x01
    192a:	ce 0f       	add	r28, r30
    192c:	d1 1d       	adc	r29, r1
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	ed 01       	movw	r28, r26
    193a:	08 95       	ret

0000193c <__tablejump2__>:
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31

00001940 <__tablejump__>:
    1940:	05 90       	lpm	r0, Z+
    1942:	f4 91       	lpm	r31, Z+
    1944:	e0 2d       	mov	r30, r0
    1946:	09 94       	ijmp

00001948 <_exit>:
    1948:	f8 94       	cli

0000194a <__stop_program>:
    194a:	ff cf       	rjmp	.-2      	; 0x194a <__stop_program>
