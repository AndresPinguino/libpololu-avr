
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000018b4  00001928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  00800148  000018fc  00001970  2**0
                  ALLOC
  3 .debug_aranges 000004e8  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dc0  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032c6  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000120f  00000000  00000000  00005ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029a0  00000000  00000000  000070ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008c0  00000000  00000000  00009a90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000145a  00000000  00000000  0000a350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ba3  00000000  00000000  0000b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000590  00000000  00000000  0000d34d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
#endif


// constructor

OrangutanMotors::OrangutanMotors()
       0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
}


// constructor

OrangutanBuzzer::OrangutanBuzzer()
       4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
	static unsigned char isPressed(unsigned char buttons);

	
  private:

	static inline void init()
       8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
// *************************************************************************


// constructor (doesn't do anything)

OrangutanLCD::OrangutanLCD()
       c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
void readLineSensorsCalibrated(unsigned int *sensor_values)
{
	qtr3pi.readCalibrated(sensor_values);
}

unsigned int Pololu3pi::readLine(unsigned int *sensor_values, unsigned char white_line)
      10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
#include "OrangutanAnalog.h"


#ifdef LIB_POLOLU

extern "C" void set_analog_mode(unsigned char mode)
      14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>


#ifdef LIB_POLOLU
static PololuQTRRC qtr;

extern "C" void qtr_emitters_on()
      18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      34:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_13>
      38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
      68:	cb 02       	muls	r28, r27
      6a:	d1 02       	muls	r29, r17
      6c:	d4 02       	muls	r29, r20
      6e:	d7 02       	muls	r29, r23
      70:	da 02       	muls	r29, r26
      72:	dd 02       	muls	r29, r29
      74:	e0 02       	muls	r30, r16
      76:	e3 02       	muls	r30, r19
      78:	e6 02       	muls	r30, r22
      7a:	e9 02       	muls	r30, r25
      7c:	ec 02       	muls	r30, r28
      7e:	ef 02       	muls	r30, r31

00000080 <__ctors_start>:
      80:	9a 07       	cpc	r25, r26
      82:	9e 0b       	sbc	r25, r30

00000084 <__ctors_end>:
      84:	11 24       	eor	r1, r1
      86:	1f be       	out	0x3f, r1	; 63
      88:	cf ef       	ldi	r28, 0xFF	; 255
      8a:	d4 e0       	ldi	r29, 0x04	; 4
      8c:	de bf       	out	0x3e, r29	; 62
      8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
      90:	11 e0       	ldi	r17, 0x01	; 1
      92:	a0 e0       	ldi	r26, 0x00	; 0
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	e4 eb       	ldi	r30, 0xB4	; 180
      98:	f8 e1       	ldi	r31, 0x18	; 24
      9a:	02 c0       	rjmp	.+4      	; 0xa0 <.do_copy_data_start>

0000009c <.do_copy_data_loop>:
      9c:	05 90       	lpm	r0, Z+
      9e:	0d 92       	st	X+, r0

000000a0 <.do_copy_data_start>:
      a0:	a8 34       	cpi	r26, 0x48	; 72
      a2:	b1 07       	cpc	r27, r17
      a4:	d9 f7       	brne	.-10     	; 0x9c <.do_copy_data_loop>

000000a6 <__do_clear_bss>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a8 e4       	ldi	r26, 0x48	; 72
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a3 3e       	cpi	r26, 0xE3	; 227
      b2:	b1 07       	cpc	r27, r17
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>

000000b6 <__do_global_ctors>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	c4 e8       	ldi	r28, 0x84	; 132
      ba:	d0 e0       	ldi	r29, 0x00	; 0
      bc:	04 c0       	rjmp	.+8      	; 0xc6 <.do_global_ctors_start>

000000be <.do_global_ctors_loop>:
      be:	22 97       	sbiw	r28, 0x02	; 2
      c0:	fe 01       	movw	r30, r28
      c2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <__tablejump__>

000000c6 <.do_global_ctors_start>:
      c6:	c0 38       	cpi	r28, 0x80	; 128
      c8:	d1 07       	cpc	r29, r17
      ca:	c9 f7       	brne	.-14     	; 0xbe <.do_global_ctors_loop>
      cc:	0e 94 8b 00 	call	0x116	; 0x116 <main>
      d0:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <_exit>

000000d4 <__bad_interrupt>:
      d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <display_readings>:
#include <pololu/3pi.h>

void display_readings(const unsigned int *calibrated_values)
{
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	8c 01       	movw	r16, r24
      e2:	c0 e0       	ldi	r28, 0x00	; 0
      e4:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<5;i++) {
		const char display_characters[10] = {' ','.',',','-','+','o','O','0','@','#'};
		// values from 0 to 9
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
      e6:	f8 01       	movw	r30, r16
      e8:	ec 0f       	add	r30, r28
      ea:	fd 1f       	adc	r31, r29
      ec:	80 81       	ld	r24, Z
      ee:	91 81       	ldd	r25, Z+1	; 0x01
      f0:	65 e6       	ldi	r22, 0x65	; 101
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
      f8:	fb 01       	movw	r30, r22
      fa:	e0 5d       	subi	r30, 0xD0	; 208
      fc:	fe 4f       	sbci	r31, 0xFE	; 254
      fe:	80 81       	ld	r24, Z
     100:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <print_character>
     104:	22 96       	adiw	r28, 0x02	; 2

void display_readings(const unsigned int *calibrated_values)
{
	unsigned char i;

	for(i=0;i<5;i++) {
     106:	ca 30       	cpi	r28, 0x0A	; 10
     108:	d1 05       	cpc	r29, r1
     10a:	69 f7       	brne	.-38     	; 0xe6 <display_readings+0xe>
		const char display_characters[10] = {' ','.',',','-','+','o','O','0','@','#'};
		// values from 0 to 9
		char c = display_characters[calibrated_values[i]/101];
		print_character(c);
	}
}
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	08 95       	ret

00000116 <main>:

int main()
{
     116:	cf 92       	push	r12
     118:	df 92       	push	r13
     11a:	ef 92       	push	r14
     11c:	ff 92       	push	r15
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	df 93       	push	r29
     124:	cf 93       	push	r28
     126:	cd b7       	in	r28, 0x3d	; 61
     128:	de b7       	in	r29, 0x3e	; 62
     12a:	2a 97       	sbiw	r28, 0x0a	; 10
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	f8 94       	cli
     130:	de bf       	out	0x3e, r29	; 62
     132:	0f be       	out	0x3f, r0	; 63
     134:	cd bf       	out	0x3d, r28	; 61
	unsigned int counter;

	pololu_3pi_init(2000);
     136:	80 ed       	ldi	r24, 0xD0	; 208
     138:	97 e0       	ldi	r25, 0x07	; 7
     13a:	0e 94 ed 07 	call	0xfda	; 0xfda <pololu_3pi_init>
     13e:	1f c0       	rjmp	.+62     	; 0x17e <main+0x68>

	// display temperature and wait for button press
  
	while(!button_is_pressed(BUTTON_B))
	{
		int bat = battery_millivolts();
     140:	0e 94 b6 07 	call	0xf6c	; 0xf6c <battery_millivolts>
     144:	7c 01       	movw	r14, r24

		clear();
     146:	0e 94 c5 06 	call	0xd8a	; 0xd8a <clear>
		print_long(bat);
     14a:	00 27       	eor	r16, r16
     14c:	f7 fc       	sbrc	r15, 7
     14e:	00 95       	com	r16
     150:	10 2f       	mov	r17, r16
     152:	c8 01       	movw	r24, r16
     154:	b7 01       	movw	r22, r14
     156:	0e 94 72 07 	call	0xee4	; 0xee4 <print_long>
		print("mV");
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <print>
		lcd_goto_xy(0,1);
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_goto_xy>
		print("Press B");
     16e:	83 e0       	ldi	r24, 0x03	; 3
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <print>

		delay_ms(50);
     176:	82 e3       	ldi	r24, 0x32	; 50
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay_ms>

	pololu_3pi_init(2000);

	// display temperature and wait for button press
  
	while(!button_is_pressed(BUTTON_B))
     17e:	80 e1       	ldi	r24, 0x10	; 16
     180:	0e 94 be 05 	call	0xb7c	; 0xb7c <button_is_pressed>
     184:	88 23       	and	r24, r24
     186:	e1 f2       	breq	.-72     	; 0x140 <main+0x2a>
		print("Press B");

		delay_ms(50);
	}

	wait_for_button_release(BUTTON_B);
     188:	80 e1       	ldi	r24, 0x10	; 16
     18a:	0e 94 03 06 	call	0xc06	; 0xc06 <wait_for_button_release>
	delay_ms(500);
     18e:	84 ef       	ldi	r24, 0xF4	; 244
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay_ms>
     196:	0c ee       	ldi	r16, 0xEC	; 236
     198:	1f ef       	ldi	r17, 0xFF	; 255

	// auto-calibration

	for(counter=0;counter<80;counter++)
	{
		if(counter < 20 || counter >= 60)
     19a:	08 32       	cpi	r16, 0x28	; 40
     19c:	11 05       	cpc	r17, r1
     19e:	28 f0       	brcs	.+10     	; 0x1aa <main+0x94>
			set_motors(40,-40);
     1a0:	68 ed       	ldi	r22, 0xD8	; 216
     1a2:	7f ef       	ldi	r23, 0xFF	; 255
     1a4:	88 e2       	ldi	r24, 0x28	; 40
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <main+0x9c>
		else
			set_motors(-40,40);
     1aa:	68 e2       	ldi	r22, 0x28	; 40
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	88 ed       	ldi	r24, 0xD8	; 216
     1b0:	9f ef       	ldi	r25, 0xFF	; 255
     1b2:	0e 94 bf 01 	call	0x37e	; 0x37e <set_motors>

		clear();
     1b6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <clear>
		lcd_goto_xy(0,1);
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_goto_xy>
		print("Press B");
     1c6:	83 e0       	ldi	r24, 0x03	; 3
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <print>

		calibrate_line_sensors();
     1ce:	0e 94 c0 07 	call	0xf80	; 0xf80 <calibrate_line_sensors>

		delay_ms(20);
     1d2:	84 e1       	ldi	r24, 0x14	; 20
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay_ms>
     1da:	0f 5f       	subi	r16, 0xFF	; 255
     1dc:	1f 4f       	sbci	r17, 0xFF	; 255
	wait_for_button_release(BUTTON_B);
	delay_ms(500);

	// auto-calibration

	for(counter=0;counter<80;counter++)
     1de:	0c 33       	cpi	r16, 0x3C	; 60
     1e0:	11 05       	cpc	r17, r1
     1e2:	d9 f6       	brne	.-74     	; 0x19a <main+0x84>

		calibrate_line_sensors();

		delay_ms(20);
	}
	set_motors(0,0);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 bf 01 	call	0x37e	; 0x37e <set_motors>

	// display calibrated values

	while(!button_is_pressed(BUTTON_B))
	{
		unsigned int sensors[5] = {1,2,3,4,5};
     1f0:	6e 01       	movw	r12, r28
     1f2:	08 94       	sec
     1f4:	c1 1c       	adc	r12, r1
     1f6:	d1 1c       	adc	r13, r1
     1f8:	21 c0       	rjmp	.+66     	; 0x23c <main+0x126>
     1fa:	d6 01       	movw	r26, r12
     1fc:	e6 e2       	ldi	r30, 0x26	; 38
     1fe:	f1 e0       	ldi	r31, 0x01	; 1
     200:	8a e0       	ldi	r24, 0x0A	; 10
     202:	01 90       	ld	r0, Z+
     204:	0d 92       	st	X+, r0
     206:	81 50       	subi	r24, 0x01	; 1
     208:	e1 f7       	brne	.-8      	; 0x202 <main+0xec>
		unsigned int position = read_line(sensors);
     20a:	c6 01       	movw	r24, r12
     20c:	0e 94 b9 07 	call	0xf72	; 0xf72 <read_line>
     210:	7c 01       	movw	r14, r24

		clear();
     212:	0e 94 c5 06 	call	0xd8a	; 0xd8a <clear>
		print_long(position);
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	10 e0       	ldi	r17, 0x00	; 0
     21a:	c8 01       	movw	r24, r16
     21c:	b7 01       	movw	r22, r14
     21e:	0e 94 72 07 	call	0xee4	; 0xee4 <print_long>
		lcd_goto_xy(0,1);
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 97 07 	call	0xf2e	; 0xf2e <lcd_goto_xy>
		display_readings(sensors);
     22e:	c6 01       	movw	r24, r12
     230:	0e 94 6c 00 	call	0xd8	; 0xd8 <display_readings>

		delay_ms(50);
     234:	82 e3       	ldi	r24, 0x32	; 50
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <delay_ms>
	}
	set_motors(0,0);

	// display calibrated values

	while(!button_is_pressed(BUTTON_B))
     23c:	80 e1       	ldi	r24, 0x10	; 16
     23e:	0e 94 be 05 	call	0xb7c	; 0xb7c <button_is_pressed>
     242:	88 23       	and	r24, r24
     244:	d1 f2       	breq	.-76     	; 0x1fa <main+0xe4>
		lcd_goto_xy(0,1);
		display_readings(sensors);

		delay_ms(50);
	}
	wait_for_button_release(BUTTON_B);
     246:	80 e1       	ldi	r24, 0x10	; 16
     248:	0e 94 03 06 	call	0xc06	; 0xc06 <wait_for_button_release>

	clear();
     24c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <clear>

	play("L16 cdegreg4");
     250:	8b e0       	ldi	r24, 0x0B	; 11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 86 05 	call	0xb0c	; 0xb0c <play>

	print("Go!");		
     258:	88 e1       	ldi	r24, 0x18	; 24
     25a:	91 e0       	ldi	r25, 0x01	; 1
     25c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <print>

	while(is_playing());
     260:	0e 94 e5 01 	call	0x3ca	; 0x3ca <is_playing>
     264:	88 23       	and	r24, r24
     266:	e1 f7       	brne	.-8      	; 0x260 <main+0x14a>

	while(1)
	{
		unsigned int sensors[5] = {1,2,3,4,5};
     268:	8e 01       	movw	r16, r28
     26a:	0f 5f       	subi	r16, 0xFF	; 255
     26c:	1f 4f       	sbci	r17, 0xFF	; 255
     26e:	d8 01       	movw	r26, r16
     270:	ec e1       	ldi	r30, 0x1C	; 28
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	01 90       	ld	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x160>
		unsigned int position = read_line(sensors);
     27e:	c8 01       	movw	r24, r16
     280:	0e 94 b9 07 	call	0xf72	; 0xf72 <read_line>

		if(position < 2000)
     284:	80 5d       	subi	r24, 0xD0	; 208
     286:	97 40       	sbci	r25, 0x07	; 7
     288:	28 f4       	brcc	.+10     	; 0x294 <main+0x17e>
			set_motors(0,100);
     28a:	64 e6       	ldi	r22, 0x64	; 100
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	04 c0       	rjmp	.+8      	; 0x29c <main+0x186>
		else
			set_motors(100,0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	84 e6       	ldi	r24, 0x64	; 100
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 bf 01 	call	0x37e	; 0x37e <set_motors>
     2a0:	e6 cf       	rjmp	.-52     	; 0x26e <main+0x158>

000002a2 <_ZN15OrangutanMotors4initEv>:
	static void setSpeeds(int m1Speed, int m2Speed);


  private:

	static inline void init()
     2a2:	80 91 48 01 	lds	r24, 0x0148
     2a6:	88 23       	and	r24, r24
     2a8:	f1 f4       	brne	.+60     	; 0x2e6 <_ZN15OrangutanMotors4initEv+0x44>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;	// this MUST be set before init2() is called
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	80 93 48 01 	sts	0x0148, r24
#endif

	// configure for inverted PWM output on motor control pins:   
    //  set OCxx on compare match, clear on timer overflow   
    //  Timer0 and Timer2 count up from 0 to 255   
    TCCR0A = TCCR2A = 0xF3;
     2b0:	83 ef       	ldi	r24, 0xF3	; 243
     2b2:	80 93 b0 00 	sts	0x00B0, r24
     2b6:	80 91 b0 00 	lds	r24, 0x00B0
     2ba:	84 bd       	out	0x24, r24	; 36
  
    // use the system clock/8 (=2.5 MHz) as the timer clock,
	// which will produce a PWM frequency of 10 kHz
    TCCR0B = TCCR2B = 0x02;
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	80 93 b1 00 	sts	0x00B1, r24
     2c2:	80 91 b1 00 	lds	r24, 0x00B1
     2c6:	85 bd       	out	0x25, r24	; 37
	// and 3Pi can support PWM frequencies this high.  The
	// Orangutan LV-168 cannot support frequencies above 10 kHz.
    //TCCR0B = TCCR2B = 0x01;

    // initialize all PWMs to 0% duty cycle (braking)   
    OCR0A = OCR0B = OCR2A = OCR2B = 0;   
     2c8:	10 92 b4 00 	sts	0x00B4, r1
     2cc:	80 91 b4 00 	lds	r24, 0x00B4
     2d0:	80 93 b3 00 	sts	0x00B3, r24
     2d4:	80 91 b3 00 	lds	r24, 0x00B3
     2d8:	88 bd       	out	0x28, r24	; 40
     2da:	88 b5       	in	r24, 0x28	; 40
     2dc:	87 bd       	out	0x27, r24	; 39
  
    // set PWM pins as digital outputs (the PWM signals will not   
    // appear on the lines if they are digital inputs)   
    DDRD |= (1 << PD3) | (1 << PD5) | (1 << PD6);   
     2de:	8a b1       	in	r24, 0x0a	; 10
     2e0:	88 66       	ori	r24, 0x68	; 104
     2e2:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << PB3);
     2e4:	23 9a       	sbi	0x04, 3	; 4
     2e6:	08 95       	ret

000002e8 <_ZN15OrangutanMotors10setM1SpeedEi>:


// sets the motor speed.  The sign of 'speed' determines the direction
// and the magnitude determines the speed.  limits: -255 <= speed < 255
// |speed| = 255 produces the maximum speed while speed = 0 is full brake.
void OrangutanMotors::setM1Speed(int speed)
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	ec 01       	movw	r28, r24
{
	init();
     2ee:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
     2f2:	d7 fd       	sbrc	r29, 7
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_ZN15OrangutanMotors10setM1SpeedEi+0x12>
     2f6:	20 e0       	ldi	r18, 0x00	; 0
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <_ZN15OrangutanMotors10setM1SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
     2fa:	d0 95       	com	r29
     2fc:	c1 95       	neg	r28
     2fe:	df 4f       	sbci	r29, 0xFF	; 255
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	ce 01       	movw	r24, r28
     304:	cf 3f       	cpi	r28, 0xFF	; 255
     306:	d1 05       	cpc	r29, r1
     308:	19 f0       	breq	.+6      	; 0x310 <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
     30a:	14 f0       	brlt	.+4      	; 0x310 <_ZN15OrangutanMotors10setM1SpeedEi+0x28>
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	90 e0       	ldi	r25, 0x00	; 0
		reverse = 1;	// preserve the direction
	}
	if (speed > 0xFF)	// 0xFF = 255
		speed = 0xFF;

	if (reverse)
     310:	22 23       	and	r18, r18
     312:	19 f0       	breq	.+6      	; 0x31a <_ZN15OrangutanMotors10setM1SpeedEi+0x32>
	{
		OCR0B = 0;		// hold one driver input high
     314:	18 bc       	out	0x28, r1	; 40
		OCR0A = speed;	// pwm the other input
     316:	87 bd       	out	0x27, r24	; 39
     318:	02 c0       	rjmp	.+4      	; 0x31e <_ZN15OrangutanMotors10setM1SpeedEi+0x36>
	}
	else	// forward
	{
		OCR0B = speed;	// pwm one driver input
     31a:	88 bd       	out	0x28, r24	; 40
		OCR0A = 0;		// hold the other driver input high
     31c:	17 bc       	out	0x27, r1	; 39
	}
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <_ZN15OrangutanMotors10setM2SpeedEi>:


void OrangutanMotors::setM2Speed(int speed)
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	ec 01       	movw	r28, r24
{
	init();
     32a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_ZN15OrangutanMotors4initEv>
	unsigned char reverse = 0;

	if (speed < 0)
     32e:	d7 fd       	sbrc	r29, 7
     330:	02 c0       	rjmp	.+4      	; 0x336 <_ZN15OrangutanMotors10setM2SpeedEi+0x12>
     332:	20 e0       	ldi	r18, 0x00	; 0
     334:	04 c0       	rjmp	.+8      	; 0x33e <_ZN15OrangutanMotors10setM2SpeedEi+0x1a>
	{
		speed = -speed;	// make speed a positive quantity
     336:	d0 95       	com	r29
     338:	c1 95       	neg	r28
     33a:	df 4f       	sbci	r29, 0xFF	; 255
     33c:	21 e0       	ldi	r18, 0x01	; 1
     33e:	ce 01       	movw	r24, r28
     340:	cf 3f       	cpi	r28, 0xFF	; 255
     342:	d1 05       	cpc	r29, r1
     344:	19 f0       	breq	.+6      	; 0x34c <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
     346:	14 f0       	brlt	.+4      	; 0x34c <_ZN15OrangutanMotors10setM2SpeedEi+0x28>
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	90 e0       	ldi	r25, 0x00	; 0
		reverse = 1;	// preserve the direction
	}
	if (speed > 0xFF)	// 0xFF = 255
		speed = 0xFF;

	if (reverse)
     34c:	22 23       	and	r18, r18
     34e:	29 f0       	breq	.+10     	; 0x35a <_ZN15OrangutanMotors10setM2SpeedEi+0x36>
	{
		OCR2B = 0;		// hold one driver input high
     350:	10 92 b4 00 	sts	0x00B4, r1
		OCR2A = speed;	// pwm the other input
     354:	80 93 b3 00 	sts	0x00B3, r24
     358:	04 c0       	rjmp	.+8      	; 0x362 <_ZN15OrangutanMotors10setM2SpeedEi+0x3e>
	}
	else	// forward
	{
		OCR2B = speed;	// pwm one driver input
     35a:	80 93 b4 00 	sts	0x00B4, r24
		OCR2A = 0;		// hold the other driver input high
     35e:	10 92 b3 00 	sts	0x00B3, r1
	}
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <_ZN15OrangutanMotors9setSpeedsEii>:


void OrangutanMotors::setSpeeds(int m1Speed, int m2Speed)
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	8b 01       	movw	r16, r22
{
	setM1Speed(m1Speed);
     36e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN15OrangutanMotors10setM1SpeedEi>
	setM2Speed(m2Speed);
     372:	c8 01       	movw	r24, r16
     374:	0e 94 92 01 	call	0x324	; 0x324 <_ZN15OrangutanMotors10setM2SpeedEi>
}
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	08 95       	ret

0000037e <set_motors>:
extern "C" void set_m2_speed(int speed)
{
	OrangutanMotors::setM2Speed(speed);
}

extern "C" void set_motors(int m1, int m2)
     37e:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN15OrangutanMotors9setSpeedsEii>
{
	OrangutanMotors::setSpeeds(m1, m2);
}
     382:	08 95       	ret

00000384 <_ZN15OrangutanBuzzer4initEv>:
	
	// initializes timer1 for buzzer control
	static void init2();
	
	// this is called by playFrequency()
	static inline void init()
     384:	80 91 49 01 	lds	r24, 0x0149
     388:	88 23       	and	r24, r24
     38a:	f1 f4       	brne	.+60     	; 0x3c8 <_ZN15OrangutanBuzzer4initEv+0x44>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	20 93 49 01 	sts	0x0149, r18
#endif

// initializes timer1 for buzzer control
void OrangutanBuzzer::init2()
{
	DDRB &= ~(1 << PB2);		// buzzer pin set as input
     392:	22 98       	cbi	0x04, 2	; 4

	TCCR1A = 0x23;	// bits 6 and 7 clear: normal port op., OC1A disconnected
     394:	83 e2       	ldi	r24, 0x23	; 35
     396:	80 93 80 00 	sts	0x0080, r24
					// bit 4 clear, 5 set: clear OC1B on compare match
					// bits 2 and 3: not used
					// bits 0 & 1 set: combine with bits 3 & 4 of TCCR1B...

	TCCR1B = 0x19;	// bit 7 clear: input capture noise canceler disabled
     39a:	89 e1       	ldi	r24, 0x19	; 25
     39c:	80 93 81 00 	sts	0x0081, r24
					// bits 3 and 4 set: combine with bits 0 & 1 of TCCR1A to
					// 		select waveform generation mode 14, fast PWM,
					//		TOP = OCR1A, OCR1B set at TOP, TOV1 flag set at TOP
					// bit 0 set, 1-2 clear: timer clock = IO clk (prescaler 1)

	TCCR1C = 0x00;	// bit 7 clear: no force output compare for channel A
     3a0:	10 92 82 00 	sts	0x0082, r1
	//   on compare match, set at TOP; OC1B is disconnected.
	//   Note: if the PWM frequency and duty cycle are changed, the first
	//   cycle of the new frequency will be at the old duty cycle, since
	//   the duty cycle (OCR1A) is not updated until TOP.

	OCR1A = F_CPU / 1000;					// set TOP for freq = 1 kHz
     3a4:	80 e2       	ldi	r24, 0x20	; 32
     3a6:	9e e4       	ldi	r25, 0x4E	; 78
     3a8:	90 93 89 00 	sts	0x0089, r25
     3ac:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 0;								// set 0% duty cycle
     3b0:	10 92 8b 00 	sts	0x008B, r1
     3b4:	10 92 8a 00 	sts	0x008A, r1
	TCNT1 = 0;								// clear counter register
     3b8:	10 92 85 00 	sts	0x0085, r1
     3bc:	10 92 84 00 	sts	0x0084, r1

	TIFR1 = 0xFF;							// clear all timer1 interrupt flags
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	86 bb       	out	0x16, r24	; 22
	ENABLE_TIMER1_INTERRUPT();				// overflow interrupt enabled
     3c4:	20 93 6f 00 	sts	0x006F, r18
     3c8:	08 95       	ret

000003ca <is_playing>:
extern "C" void play(char *sequence)
{
	OrangutanBuzzer::play(sequence);
}

extern "C" unsigned char is_playing()
     3ca:	80 91 3a 01 	lds	r24, 0x013A
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	88 23       	and	r24, r24
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <is_playing+0xc>
     3d4:	91 e0       	ldi	r25, 0x01	; 1
{
	return OrangutanBuzzer::isPlaying();
}
     3d6:	89 2f       	mov	r24, r25
     3d8:	08 95       	ret

000003da <_ZN15OrangutanBuzzer13playFrequencyEjjh>:
//   means that you can't use a max duration of 65535 ms for frequencies
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playFrequency(unsigned int freq, unsigned int dur, 
				   					unsigned char volume)
     3da:	a0 e0       	ldi	r26, 0x00	; 0
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e3 ef       	ldi	r30, 0xF3	; 243
     3e0:	f1 e0       	ldi	r31, 0x01	; 1
     3e2:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__prologue_saves__+0x10>
     3e6:	8c 01       	movw	r16, r24
     3e8:	5b 01       	movw	r10, r22
     3ea:	c4 2e       	mov	r12, r20
	unsigned int newOCR1A;
	unsigned int newTCCR1B;
	unsigned int timeout;
	unsigned char multiplier = 1;
	
	init();		// initializes the buzzer if necessary
     3ec:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN15OrangutanBuzzer4initEv>

	buzzerFinished = 0;
     3f0:	10 92 3a 01 	sts	0x013A, r1

	if (freq & DIV_BY_10)		// if frequency's DIV_BY_10 bit is set
     3f4:	17 fd       	sbrc	r17, 7
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x24>
     3f8:	dd 24       	eor	r13, r13
     3fa:	d3 94       	inc	r13
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x2a>
	{							//   then the true frequency is freq/10
		multiplier = 10;		//   (gives higher resolution for small freqs)
		freq &= ~DIV_BY_10;		// clear DIV_BY_10 bit
     3fe:	1f 77       	andi	r17, 0x7F	; 127
     400:	9a e0       	ldi	r25, 0x0A	; 10
     402:	d9 2e       	mov	r13, r25
	}

	newTCCR1B = TCCR1B & 0xF8;	// clear clock select bits
     404:	80 91 81 00 	lds	r24, 0x0081
     408:	e8 2e       	mov	r14, r24
     40a:	ff 24       	eor	r15, r15
     40c:	48 ef       	ldi	r20, 0xF8	; 248
     40e:	e4 22       	and	r14, r20
     410:	ff 24       	eor	r15, r15

	// calculate necessary clock source and counter top value to get freq
	if (freq > 400 * ((unsigned int)multiplier))	// clock prescaler = 1
     412:	2d 2d       	mov	r18, r13
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	80 e9       	ldi	r24, 0x90	; 144
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	ac 01       	movw	r20, r24
     41c:	24 9f       	mul	r18, r20
     41e:	c0 01       	movw	r24, r0
     420:	25 9f       	mul	r18, r21
     422:	90 0d       	add	r25, r0
     424:	34 9f       	mul	r19, r20
     426:	90 0d       	add	r25, r0
     428:	11 24       	eor	r1, r1
     42a:	80 17       	cp	r24, r16
     42c:	91 07       	cpc	r25, r17
     42e:	b0 f4       	brcc	.+44     	; 0x45c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x82>
     430:	e8 01       	movw	r28, r16
     432:	57 e2       	ldi	r21, 0x27	; 39
     434:	01 31       	cpi	r16, 0x11	; 17
     436:	15 07       	cpc	r17, r21
     438:	10 f0       	brcs	.+4      	; 0x43e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x64>
     43a:	c0 e1       	ldi	r28, 0x10	; 16
     43c:	d7 e2       	ldi	r29, 0x27	; 39
	{
		if (freq > 10000)
			freq = 10000;			// max frequency allowed is 10kHz

		newOCR1A = (unsigned int)(20000000UL / freq);
     43e:	9e 01       	movw	r18, r28
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	7d e2       	ldi	r23, 0x2D	; 45
     448:	81 e3       	ldi	r24, 0x31	; 49
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
     450:	89 01       	movw	r16, r18

		// timer1 clock select:
		newTCCR1B |= TIMER1_CLK_1;	// select IO clk (prescaler = 1)
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	e8 2a       	or	r14, r24
     458:	f9 2a       	or	r15, r25
     45a:	20 c0       	rjmp	.+64     	; 0x49c <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xc2>
     45c:	88 e2       	ldi	r24, 0x28	; 40
     45e:	d8 9e       	mul	r13, r24
     460:	80 2d       	mov	r24, r0
     462:	11 24       	eor	r1, r1
     464:	c8 2f       	mov	r28, r24
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	c0 17       	cp	r28, r16
     46a:	d1 07       	cpc	r29, r17
     46c:	08 f4       	brcc	.+2      	; 0x470 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x96>
     46e:	e8 01       	movw	r28, r16
     470:	9e 01       	movw	r18, r28
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	50 e0       	ldi	r21, 0x00	; 0
		unsigned char val = 40 * multiplier;
		if (freq < val)				// min frequency allowed is 40 Hz
			freq = val;

		// set top (frequency):
		if (multiplier == 10)
     476:	9a e0       	ldi	r25, 0x0A	; 10
     478:	d9 16       	cp	r13, r25
     47a:	29 f4       	brne	.+10     	; 0x486 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xac>
			newOCR1A = (unsigned int)(25000000UL / freq);
     47c:	60 e4       	ldi	r22, 0x40	; 64
     47e:	78 e7       	ldi	r23, 0x78	; 120
     480:	8d e7       	ldi	r24, 0x7D	; 125
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	04 c0       	rjmp	.+8      	; 0x48e <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xb4>
		else
			newOCR1A = (unsigned int)(2500000UL / freq);
     486:	60 ea       	ldi	r22, 0xA0	; 160
     488:	75 e2       	ldi	r23, 0x25	; 37
     48a:	86 e2       	ldi	r24, 0x26	; 38
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
     492:	89 01       	movw	r16, r18

		// timer1 clock select
		newTCCR1B |= TIMER1_CLK_8;	// select IO clk / 8
     494:	42 e0       	ldi	r20, 0x02	; 2
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	e4 2a       	or	r14, r20
     49a:	f5 2a       	or	r15, r21
	}


	// set timeout (duration):
	if (multiplier == 10)
     49c:	5a e0       	ldi	r21, 0x0A	; 10
     49e:	d5 16       	cp	r13, r21
     4a0:	39 f4       	brne	.+14     	; 0x4b0 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xd6>
		freq = (freq + 5) / 10;
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	6a e0       	ldi	r22, 0x0A	; 10
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
     4ae:	eb 01       	movw	r28, r22

	if (freq == 1000)
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	c8 3e       	cpi	r28, 0xE8	; 232
     4b4:	d8 07       	cpc	r29, r24
     4b6:	11 f4       	brne	.+4      	; 0x4bc <_ZN15OrangutanBuzzer13playFrequencyEjjh+0xe2>
     4b8:	b5 01       	movw	r22, r10
     4ba:	0f c0       	rjmp	.+30     	; 0x4da <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x100>
		timeout = dur;	// duration for silent notes is exact
	else
		timeout = (unsigned int)((long)dur * freq / 1000);
     4bc:	be 01       	movw	r22, r28
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	95 01       	movw	r18, r10
     4c4:	40 e0       	ldi	r20, 0x00	; 0
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
     4cc:	28 ee       	ldi	r18, 0xE8	; 232
     4ce:	33 e0       	ldi	r19, 0x03	; 3
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divmodsi4>
     4d8:	b9 01       	movw	r22, r18

	if (volume == 0)
     4da:	cc 20       	and	r12, r12
     4dc:	11 f4       	brne	.+4      	; 0x4e2 <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x108>
		DDRB &= ~(1 << PB2);		// buzzer pin->input (silence buz.)
     4de:	22 98       	cbi	0x04, 2	; 4
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x114>
	else
		DDRB |= 1 << PB2;			// buzzer pin->output
     4e2:	22 9a       	sbi	0x04, 2	; 4
     4e4:	9f e0       	ldi	r25, 0x0F	; 15
     4e6:	9c 15       	cp	r25, r12
     4e8:	10 f4       	brcc	.+4      	; 0x4ee <_ZN15OrangutanBuzzer13playFrequencyEjjh+0x114>
     4ea:	8f e0       	ldi	r24, 0x0F	; 15
     4ec:	c8 2e       	mov	r12, r24

	if (volume > 15)
		volume = 15;

	DISABLE_TIMER1_INTERRUPT();			// disable interrupts while writing to 16-bit registers
     4ee:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = newTCCR1B;					// select timer 1 clock prescaler
     4f2:	e0 92 81 00 	sts	0x0081, r14
	OCR1A = newOCR1A;					// set timer 1 pwm frequency
     4f6:	10 93 89 00 	sts	0x0089, r17
     4fa:	00 93 88 00 	sts	0x0088, r16
	OCR1B = OCR1A >> (16 - volume);		// set duty cycle (volume)
     4fe:	80 91 88 00 	lds	r24, 0x0088
     502:	90 91 89 00 	lds	r25, 0x0089
     506:	20 e1       	ldi	r18, 0x10	; 16
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	2c 19       	sub	r18, r12
     50c:	31 09       	sbc	r19, r1
     50e:	02 c0       	rjmp	.+4      	; 0x514 <__stack+0x15>
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	2a 95       	dec	r18
     516:	e2 f7       	brpl	.-8      	; 0x510 <__stack+0x11>
     518:	90 93 8b 00 	sts	0x008B, r25
     51c:	80 93 8a 00 	sts	0x008A, r24
	buzzerTimeout = timeout;			// set buzzer duration
     520:	70 93 56 01 	sts	0x0156, r23
     524:	60 93 55 01 	sts	0x0155, r22
	ENABLE_TIMER1_INTERRUPT();
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	80 93 6f 00 	sts	0x006F, r24
	sei();
     52e:	78 94       	sei
}
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	ea e0       	ldi	r30, 0x0A	; 10
     536:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__epilogue_restores__+0x10>

0000053a <_ZN15OrangutanBuzzer8playNoteEhjh>:
//   means that you can't use a max duration of 65535 ms for frequencies
//   greater than 1 kHz.  For example, the max duration you can use for a
//   frequency of 10 kHz is 6553 ms.  If you use a duration longer than this,
//   you will cause an integer overflow that produces unexpected behavior.
void OrangutanBuzzer::playNote(unsigned char note, unsigned int dur,
							   unsigned char volume)
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	eb 01       	movw	r28, r22
	// of resolution for low frequencies without the need for using floats.

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;

	if (note == SILENT_NOTE || volume == 0)
     540:	8f 3f       	cpi	r24, 0xFF	; 255
     542:	11 f0       	breq	.+4      	; 0x548 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe>
     544:	44 23       	and	r20, r20
     546:	29 f4       	brne	.+10     	; 0x552 <_ZN15OrangutanBuzzer8playNoteEhjh+0x18>
	{
		freq = 1000;	// silent notes => use 1kHz freq (for cycle counter)
		playFrequency(freq, dur, 0);
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	be 01       	movw	r22, r28
     54c:	88 ee       	ldi	r24, 0xE8	; 232
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	67 c0       	rjmp	.+206    	; 0x620 <_ZN15OrangutanBuzzer8playNoteEhjh+0xe6>
		return;
	}

	if (note <= 16)
     552:	81 31       	cpi	r24, 0x11	; 17
     554:	10 f4       	brcc	.+4      	; 0x55a <_ZN15OrangutanBuzzer8playNoteEhjh+0x20>
     556:	20 e0       	ldi	r18, 0x00	; 0
     558:	05 c0       	rjmp	.+10     	; 0x564 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
	// the units for frequency are .1 Hz, not Hz, and freq must be divided
	// by 10 to get the true frequency in Hz.  This allows for an extra digit
	// of resolution for low frequencies without the need for using floats.

	unsigned int freq = 0;
	unsigned char offset_note = note - 16;
     55a:	28 2f       	mov	r18, r24
     55c:	20 51       	subi	r18, 0x10	; 16
     55e:	20 36       	cpi	r18, 0x60	; 96
     560:	08 f0       	brcs	.+2      	; 0x564 <_ZN15OrangutanBuzzer8playNoteEhjh+0x2a>
     562:	2f e5       	ldi	r18, 0x5F	; 95
	if (note <= 16)
		offset_note = 0;
	else if (offset_note > 95)
		offset_note = 95;

	unsigned char exponent = offset_note / 12;
     564:	82 2f       	mov	r24, r18
     566:	6c e0       	ldi	r22, 0x0C	; 12
     568:	0e 94 be 0b 	call	0x177c	; 0x177c <__udivmodqi4>
     56c:	38 2f       	mov	r19, r24

	// frequency table for the lowest 12 allowed notes
	//   frequencies are specified in tenths of a Hertz for added resolution
	switch (offset_note - exponent * 12)	// equivalent to (offset_note % 12)
     56e:	68 2f       	mov	r22, r24
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	84 ef       	ldi	r24, 0xF4	; 244
     574:	9f ef       	ldi	r25, 0xFF	; 255
     576:	68 9f       	mul	r22, r24
     578:	f0 01       	movw	r30, r0
     57a:	69 9f       	mul	r22, r25
     57c:	f0 0d       	add	r31, r0
     57e:	78 9f       	mul	r23, r24
     580:	f0 0d       	add	r31, r0
     582:	11 24       	eor	r1, r1
     584:	e2 0f       	add	r30, r18
     586:	f1 1d       	adc	r31, r1
     588:	ec 30       	cpi	r30, 0x0C	; 12
     58a:	f1 05       	cpc	r31, r1
     58c:	38 f4       	brcc	.+14     	; 0x59c <_ZN15OrangutanBuzzer8playNoteEhjh+0x62>
     58e:	ec 5c       	subi	r30, 0xCC	; 204
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__tablejump2__>
     596:	8c e9       	ldi	r24, 0x9C	; 156
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	23 c0       	rjmp	.+70     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	20 c0       	rjmp	.+64     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
     5a2:	85 eb       	ldi	r24, 0xB5	; 181
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	1d c0       	rjmp	.+58     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 0:				// note E1 = 41.2 Hz
			freq = 412;
			break;
		case 1:				// note F1 = 43.7 Hz
			freq = 437;
			break;
     5a8:	8f ec       	ldi	r24, 0xCF	; 207
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	1a c0       	rjmp	.+52     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 2:				// note F#1 = 46.3 Hz
			freq = 463;
			break;
     5ae:	8a ee       	ldi	r24, 0xEA	; 234
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 3:				// note G1 = 49.0 Hz
			freq = 490;
			break;
     5b4:	87 e0       	ldi	r24, 0x07	; 7
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 4:				// note G#1 = 51.9 Hz
			freq = 519;
			break;
     5ba:	86 e2       	ldi	r24, 0x26	; 38
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	11 c0       	rjmp	.+34     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 5:				// note A1 = 55.0 Hz
			freq = 550;
			break;
     5c0:	87 e4       	ldi	r24, 0x47	; 71
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e c0       	rjmp	.+28     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 6:				// note A#1 = 58.3 Hz
			freq = 583;
			break;
     5c6:	89 e6       	ldi	r24, 0x69	; 105
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 7:				// note B1 = 61.7 Hz
			freq = 617;
			break;
     5cc:	8e e8       	ldi	r24, 0x8E	; 142
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 8:				// note C2 = 65.4 Hz
			freq = 654;
			break;
     5d2:	85 eb       	ldi	r24, 0xB5	; 181
     5d4:	92 e0       	ldi	r25, 0x02	; 2
     5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 9:				// note C#2 = 69.3 Hz
			freq = 693;
			break;
     5d8:	8e ed       	ldi	r24, 0xDE	; 222
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <_ZN15OrangutanBuzzer8playNoteEhjh+0xa8>
		case 10:			// note D2 = 73.4 Hz
			freq = 734;
			break;
     5de:	8a e0       	ldi	r24, 0x0A	; 10
     5e0:	93 e0       	ldi	r25, 0x03	; 3
		case 11:			// note D#2 = 77.8 Hz
			freq = 778;
			break;
	}

	if (exponent < 7)
     5e2:	37 30       	cpi	r19, 0x07	; 7
     5e4:	71 f0       	breq	.+28     	; 0x602 <_ZN15OrangutanBuzzer8playNoteEhjh+0xc8>
	{
		freq = freq << exponent;	// frequency *= 2 ^ exponent
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <_ZN15OrangutanBuzzer8playNoteEhjh+0xb2>
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	6a 95       	dec	r22
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <_ZN15OrangutanBuzzer8playNoteEhjh+0xae>
		if (exponent > 1)			// if the frequency is greater than 160 Hz
     5f0:	32 30       	cpi	r19, 0x02	; 2
     5f2:	20 f0       	brcs	.+8      	; 0x5fc <_ZN15OrangutanBuzzer8playNoteEhjh+0xc2>
			freq = (freq + 5) / 10;	//   we don't need the extra resolution
     5f4:	05 96       	adiw	r24, 0x05	; 5
     5f6:	6a e0       	ldi	r22, 0x0A	; 10
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	0b c0       	rjmp	.+22     	; 0x612 <_ZN15OrangutanBuzzer8playNoteEhjh+0xd8>
		else
			freq += DIV_BY_10;		// else keep the added digit of resolution
     5fc:	80 50       	subi	r24, 0x00	; 0
     5fe:	90 48       	sbci	r25, 0x80	; 128
     600:	0b c0       	rjmp	.+22     	; 0x618 <_ZN15OrangutanBuzzer8playNoteEhjh+0xde>
	}
	else
		freq = (freq * 64 + 2) / 5;	// == freq * 2^7 / 10 without int overflow
     602:	26 e0       	ldi	r18, 0x06	; 6
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	2a 95       	dec	r18
     60a:	e1 f7       	brne	.-8      	; 0x604 <_ZN15OrangutanBuzzer8playNoteEhjh+0xca>
     60c:	02 96       	adiw	r24, 0x02	; 2
     60e:	65 e0       	ldi	r22, 0x05	; 5
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
     616:	cb 01       	movw	r24, r22

	if (volume > 15)
		volume = 15;
	playFrequency(freq, dur, volume);	// set buzzer this freq/duration
     618:	40 31       	cpi	r20, 0x10	; 16
     61a:	08 f0       	brcs	.+2      	; 0x61e <_ZN15OrangutanBuzzer8playNoteEhjh+0xe4>
     61c:	4f e0       	ldi	r20, 0x0F	; 15
     61e:	be 01       	movw	r22, r28
     620:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN15OrangutanBuzzer13playFrequencyEjjh>
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <_Z11getDurationv>:

	return arg;
}

// Returns whole_note_duration/getNumber()
unsigned int getDuration()
     62a:	40 91 51 01 	lds	r20, 0x0151
     62e:	50 91 52 01 	lds	r21, 0x0152
     632:	e0 91 4d 01 	lds	r30, 0x014D
     636:	f0 91 4e 01 	lds	r31, 0x014E
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	12 c0       	rjmp	.+36     	; 0x664 <_Z11getDurationv+0x3a>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     640:	cb 01       	movw	r24, r22
     642:	b3 e0       	ldi	r27, 0x03	; 3
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	ba 95       	dec	r27
     64a:	e1 f7       	brne	.-8      	; 0x644 <_Z11getDurationv+0x1a>
     64c:	66 0f       	add	r22, r22
     64e:	77 1f       	adc	r23, r23
     650:	86 0f       	add	r24, r22
     652:	97 1f       	adc	r25, r23
		arg += *sequence-'0';
     654:	62 2f       	mov	r22, r18
     656:	77 27       	eor	r23, r23
     658:	67 fd       	sbrc	r22, 7
     65a:	70 95       	com	r23
     65c:	60 53       	subi	r22, 0x30	; 48
     65e:	70 40       	sbci	r23, 0x00	; 0
     660:	68 0f       	add	r22, r24
     662:	79 1f       	adc	r23, r25
     664:	9e 2f       	mov	r25, r30
     666:	3f 2f       	mov	r19, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     668:	21 91       	ld	r18, Z+
     66a:	82 2f       	mov	r24, r18
     66c:	80 53       	subi	r24, 0x30	; 48
     66e:	8a 30       	cpi	r24, 0x0A	; 10
     670:	38 f3       	brcs	.-50     	; 0x640 <_Z11getDurationv+0x16>
     672:	90 93 4d 01 	sts	0x014D, r25
     676:	30 93 4e 01 	sts	0x014E, r19
     67a:	ca 01       	movw	r24, r20
     67c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
     680:	cb 01       	movw	r24, r22

// Returns whole_note_duration/getNumber()
unsigned int getDuration()
{
	return whole_note_duration/getNumber();
}
     682:	08 95       	ret

00000684 <_Z8nextNotev>:

void nextNote()
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
{
	unsigned char note = 0;
	unsigned char rest = 0;
	unsigned char tmp_octave = octave; // the octave for this note
     690:	f0 90 4a 01 	lds	r15, 0x014A
	unsigned int dot_add;

	char c; // temporary variable

	// if we are playing staccato, after every note we play a rest
	if(staccato && staccato_rest_duration)
     694:	10 91 4b 01 	lds	r17, 0x014B
     698:	11 23       	and	r17, r17
     69a:	21 f0       	breq	.+8      	; 0x6a4 <_Z8nextNotev+0x20>
     69c:	60 91 4c 01 	lds	r22, 0x014C
     6a0:	66 23       	and	r22, r22
     6a2:	61 f4       	brne	.+24     	; 0x6bc <_Z8nextNotev+0x38>
     6a4:	00 91 4c 01 	lds	r16, 0x014C
     6a8:	20 91 4f 01 	lds	r18, 0x014F
     6ac:	30 91 50 01 	lds	r19, 0x0150
     6b0:	c0 91 53 01 	lds	r28, 0x0153
     6b4:	d0 91 54 01 	lds	r29, 0x0154
     6b8:	ef 2c       	mov	r14, r15
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <_Z8nextNotev+0x48>
	{
		OrangutanBuzzer::playNote(20, staccato_rest_duration, 0);
     6bc:	40 e0       	ldi	r20, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	84 e1       	ldi	r24, 0x14	; 20
     6c2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN15OrangutanBuzzer8playNoteEhjh>
		staccato_rest_duration = 0;
     6c6:	10 92 4c 01 	sts	0x014C, r1
     6ca:	f2 c1       	rjmp	.+996    	; 0xab0 <_Z8nextNotev+0x42c>
		return;
     6cc:	e0 91 4d 01 	lds	r30, 0x014D
     6d0:	f0 91 4e 01 	lds	r31, 0x014E
	}

 parse_character:

	// Convert the current character to lower case.
	c = *sequence;
     6d4:	90 81       	ld	r25, Z
	if(c >= 'A' && c <= 'Z')
     6d6:	89 2f       	mov	r24, r25
     6d8:	81 54       	subi	r24, 0x41	; 65
     6da:	8a 31       	cpi	r24, 0x1A	; 26
     6dc:	08 f4       	brcc	.+2      	; 0x6e0 <_Z8nextNotev+0x5c>
		c += 'a'-'A';
     6de:	90 5e       	subi	r25, 0xE0	; 224
     6e0:	31 96       	adiw	r30, 0x01	; 1

	// Advance to the next character.
	sequence ++;

	// Interpret the character.
	switch(c)
     6e2:	96 36       	cpi	r25, 0x66	; 102
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <_Z8nextNotev+0x64>
     6e6:	a3 c0       	rjmp	.+326    	; 0x82e <_Z8nextNotev+0x1aa>
     6e8:	97 36       	cpi	r25, 0x67	; 103
     6ea:	d4 f4       	brge	.+52     	; 0x720 <_Z8nextNotev+0x9c>
     6ec:	92 36       	cpi	r25, 0x62	; 98
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <_Z8nextNotev+0x6e>
     6f0:	4e c0       	rjmp	.+156    	; 0x78e <_Z8nextNotev+0x10a>
     6f2:	93 36       	cpi	r25, 0x63	; 99
     6f4:	74 f4       	brge	.+28     	; 0x712 <_Z8nextNotev+0x8e>
     6f6:	9e 33       	cpi	r25, 0x3E	; 62
     6f8:	f1 f1       	breq	.+124    	; 0x776 <_Z8nextNotev+0xf2>
     6fa:	9f 33       	cpi	r25, 0x3F	; 63
     6fc:	34 f4       	brge	.+12     	; 0x70a <_Z8nextNotev+0x86>
     6fe:	90 32       	cpi	r25, 0x20	; 32
     700:	49 f3       	breq	.-46     	; 0x6d4 <_Z8nextNotev+0x50>
     702:	9c 33       	cpi	r25, 0x3C	; 60
     704:	09 f0       	breq	.+2      	; 0x708 <_Z8nextNotev+0x84>
     706:	5d c1       	rjmp	.+698    	; 0x9c2 <_Z8nextNotev+0x33e>
     708:	3c c0       	rjmp	.+120    	; 0x782 <_Z8nextNotev+0xfe>
     70a:	91 36       	cpi	r25, 0x61	; 97
     70c:	09 f0       	breq	.+2      	; 0x710 <_Z8nextNotev+0x8c>
     70e:	59 c1       	rjmp	.+690    	; 0x9c2 <_Z8nextNotev+0x33e>
     710:	6b c1       	rjmp	.+726    	; 0x9e8 <_Z8nextNotev+0x364>
     712:	94 36       	cpi	r25, 0x64	; 100
     714:	09 f4       	brne	.+2      	; 0x718 <_Z8nextNotev+0x94>
     716:	63 c0       	rjmp	.+198    	; 0x7de <_Z8nextNotev+0x15a>
     718:	95 36       	cpi	r25, 0x65	; 101
     71a:	0c f0       	brlt	.+2      	; 0x71e <_Z8nextNotev+0x9a>
     71c:	74 c0       	rjmp	.+232    	; 0x806 <_Z8nextNotev+0x182>
     71e:	4b c0       	rjmp	.+150    	; 0x7b6 <_Z8nextNotev+0x132>
     720:	9f 36       	cpi	r25, 0x6F	; 111
     722:	11 f1       	breq	.+68     	; 0x768 <_Z8nextNotev+0xe4>
     724:	90 37       	cpi	r25, 0x70	; 112
     726:	54 f4       	brge	.+20     	; 0x73c <_Z8nextNotev+0xb8>
     728:	9c 36       	cpi	r25, 0x6C	; 108
     72a:	09 f4       	brne	.+2      	; 0x72e <_Z8nextNotev+0xaa>
     72c:	a8 c0       	rjmp	.+336    	; 0x87e <_Z8nextNotev+0x1fa>
     72e:	9d 36       	cpi	r25, 0x6D	; 109
     730:	09 f4       	brne	.+2      	; 0x734 <_Z8nextNotev+0xb0>
     732:	ad c0       	rjmp	.+346    	; 0x88e <_Z8nextNotev+0x20a>
     734:	97 36       	cpi	r25, 0x67	; 103
     736:	09 f0       	breq	.+2      	; 0x73a <_Z8nextNotev+0xb6>
     738:	44 c1       	rjmp	.+648    	; 0x9c2 <_Z8nextNotev+0x33e>
     73a:	8d c0       	rjmp	.+282    	; 0x856 <_Z8nextNotev+0x1d2>
     73c:	94 37       	cpi	r25, 0x74	; 116
     73e:	69 f0       	breq	.+26     	; 0x75a <_Z8nextNotev+0xd6>
     740:	96 37       	cpi	r25, 0x76	; 118
     742:	21 f0       	breq	.+8      	; 0x74c <_Z8nextNotev+0xc8>
     744:	92 37       	cpi	r25, 0x72	; 114
     746:	09 f0       	breq	.+2      	; 0x74a <_Z8nextNotev+0xc6>
     748:	3c c1       	rjmp	.+632    	; 0x9c2 <_Z8nextNotev+0x33e>
     74a:	d4 c0       	rjmp	.+424    	; 0x8f4 <_Z8nextNotev+0x270>
     74c:	f0 93 4e 01 	sts	0x014E, r31
     750:	e0 93 4d 01 	sts	0x014D, r30
     754:	c0 e0       	ldi	r28, 0x00	; 0
     756:	d0 e0       	ldi	r29, 0x00	; 0
     758:	28 c1       	rjmp	.+592    	; 0x9aa <_Z8nextNotev+0x326>
     75a:	f0 93 4e 01 	sts	0x014E, r31
     75e:	e0 93 4d 01 	sts	0x014D, r30
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	ed c0       	rjmp	.+474    	; 0x942 <_Z8nextNotev+0x2be>
     768:	f0 93 4e 01 	sts	0x014E, r31
     76c:	e0 93 4d 01 	sts	0x014D, r30
     770:	40 e0       	ldi	r20, 0x00	; 0
     772:	50 e0       	ldi	r21, 0x00	; 0
     774:	b1 c0       	rjmp	.+354    	; 0x8d8 <_Z8nextNotev+0x254>
     776:	f0 93 4e 01 	sts	0x014E, r31
     77a:	e0 93 4d 01 	sts	0x014D, r30
	case ' ':
		// ignore spaces
		goto parse_character;
	case '>':
		// shift the octave temporarily up
		tmp_octave ++;
     77e:	e3 94       	inc	r14
     780:	a5 cf       	rjmp	.-182    	; 0x6cc <_Z8nextNotev+0x48>
		goto parse_character;
     782:	f0 93 4e 01 	sts	0x014E, r31
     786:	e0 93 4d 01 	sts	0x014D, r30
	case '<':
		// shift the octave temporarily down
		tmp_octave --;
     78a:	ea 94       	dec	r14
     78c:	9f cf       	rjmp	.-194    	; 0x6cc <_Z8nextNotev+0x48>
		goto parse_character;
     78e:	00 93 4c 01 	sts	0x014C, r16
     792:	10 93 4b 01 	sts	0x014B, r17
     796:	30 93 50 01 	sts	0x0150, r19
     79a:	20 93 4f 01 	sts	0x014F, r18
     79e:	f0 92 4a 01 	sts	0x014A, r15
     7a2:	d0 93 54 01 	sts	0x0154, r29
     7a6:	c0 93 53 01 	sts	0x0153, r28
     7aa:	f0 93 4e 01 	sts	0x014E, r31
     7ae:	e0 93 4d 01 	sts	0x014D, r30
     7b2:	2b e0       	ldi	r18, 0x0B	; 11
     7b4:	2c c1       	rjmp	.+600    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'a':
		note = A(0);
		break;
	case 'b':
		note = B(0);
		break;
     7b6:	00 93 4c 01 	sts	0x014C, r16
     7ba:	10 93 4b 01 	sts	0x014B, r17
     7be:	30 93 50 01 	sts	0x0150, r19
     7c2:	20 93 4f 01 	sts	0x014F, r18
     7c6:	f0 92 4a 01 	sts	0x014A, r15
     7ca:	d0 93 54 01 	sts	0x0154, r29
     7ce:	c0 93 53 01 	sts	0x0153, r28
     7d2:	f0 93 4e 01 	sts	0x014E, r31
     7d6:	e0 93 4d 01 	sts	0x014D, r30
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	18 c1       	rjmp	.+560    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'c':
		note = C(0);
		break;
     7de:	00 93 4c 01 	sts	0x014C, r16
     7e2:	10 93 4b 01 	sts	0x014B, r17
     7e6:	30 93 50 01 	sts	0x0150, r19
     7ea:	20 93 4f 01 	sts	0x014F, r18
     7ee:	f0 92 4a 01 	sts	0x014A, r15
     7f2:	d0 93 54 01 	sts	0x0154, r29
     7f6:	c0 93 53 01 	sts	0x0153, r28
     7fa:	f0 93 4e 01 	sts	0x014E, r31
     7fe:	e0 93 4d 01 	sts	0x014D, r30
     802:	22 e0       	ldi	r18, 0x02	; 2
     804:	04 c1       	rjmp	.+520    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'd':
		note = D(0);
		break;
     806:	00 93 4c 01 	sts	0x014C, r16
     80a:	10 93 4b 01 	sts	0x014B, r17
     80e:	30 93 50 01 	sts	0x0150, r19
     812:	20 93 4f 01 	sts	0x014F, r18
     816:	f0 92 4a 01 	sts	0x014A, r15
     81a:	d0 93 54 01 	sts	0x0154, r29
     81e:	c0 93 53 01 	sts	0x0153, r28
     822:	f0 93 4e 01 	sts	0x014E, r31
     826:	e0 93 4d 01 	sts	0x014D, r30
     82a:	24 e0       	ldi	r18, 0x04	; 4
     82c:	f0 c0       	rjmp	.+480    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'e':
		note = E(0);
		break;
     82e:	00 93 4c 01 	sts	0x014C, r16
     832:	10 93 4b 01 	sts	0x014B, r17
     836:	30 93 50 01 	sts	0x0150, r19
     83a:	20 93 4f 01 	sts	0x014F, r18
     83e:	f0 92 4a 01 	sts	0x014A, r15
     842:	d0 93 54 01 	sts	0x0154, r29
     846:	c0 93 53 01 	sts	0x0153, r28
     84a:	f0 93 4e 01 	sts	0x014E, r31
     84e:	e0 93 4d 01 	sts	0x014D, r30
     852:	25 e0       	ldi	r18, 0x05	; 5
     854:	dc c0       	rjmp	.+440    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'f':
		note = F(0);
		break;
     856:	00 93 4c 01 	sts	0x014C, r16
     85a:	10 93 4b 01 	sts	0x014B, r17
     85e:	30 93 50 01 	sts	0x0150, r19
     862:	20 93 4f 01 	sts	0x014F, r18
     866:	f0 92 4a 01 	sts	0x014A, r15
     86a:	d0 93 54 01 	sts	0x0154, r29
     86e:	c0 93 53 01 	sts	0x0153, r28
     872:	f0 93 4e 01 	sts	0x014E, r31
     876:	e0 93 4d 01 	sts	0x014D, r30
     87a:	27 e0       	ldi	r18, 0x07	; 7
     87c:	c8 c0       	rjmp	.+400    	; 0xa0e <_Z8nextNotev+0x38a>
	case 'g':
		note = G(0);
		break;
     87e:	f0 93 4e 01 	sts	0x014E, r31
     882:	e0 93 4d 01 	sts	0x014D, r30
	case 'l':
		// set the default note duration
		duration = getDuration();
     886:	0e 94 15 03 	call	0x62a	; 0x62a <_Z11getDurationv>
     88a:	9c 01       	movw	r18, r24
     88c:	1f cf       	rjmp	.-450    	; 0x6cc <_Z8nextNotev+0x48>
		goto parse_character;
     88e:	f0 93 4e 01 	sts	0x014E, r31
     892:	e0 93 4d 01 	sts	0x014D, r30
	case 'm':
		// set music staccato or legato
		if(sequence[0] == 'l' || sequence[0] == 'L')
     896:	80 81       	ld	r24, Z
     898:	8c 36       	cpi	r24, 0x6C	; 108
     89a:	29 f0       	breq	.+10     	; 0x8a6 <_Z8nextNotev+0x222>
     89c:	8c 34       	cpi	r24, 0x4C	; 76
     89e:	19 f0       	breq	.+6      	; 0x8a6 <_Z8nextNotev+0x222>
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	11 e0       	ldi	r17, 0x01	; 1
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <_Z8nextNotev+0x224>
     8a6:	10 e0       	ldi	r17, 0x00	; 0
		else
		{
			staccato = true;
			staccato_rest_duration = 0;
		}
		sequence++;
     8a8:	31 96       	adiw	r30, 0x01	; 1
     8aa:	f0 93 4e 01 	sts	0x014E, r31
     8ae:	e0 93 4d 01 	sts	0x014D, r30
     8b2:	0c cf       	rjmp	.-488    	; 0x6cc <_Z8nextNotev+0x48>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     8b4:	ca 01       	movw	r24, r20
     8b6:	a3 e0       	ldi	r26, 0x03	; 3
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	aa 95       	dec	r26
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <_Z8nextNotev+0x234>
     8c0:	44 0f       	add	r20, r20
     8c2:	55 1f       	adc	r21, r21
     8c4:	84 0f       	add	r24, r20
     8c6:	95 1f       	adc	r25, r21
		arg += *sequence-'0';
     8c8:	46 2f       	mov	r20, r22
     8ca:	55 27       	eor	r21, r21
     8cc:	47 fd       	sbrc	r20, 7
     8ce:	50 95       	com	r21
     8d0:	40 53       	subi	r20, 0x30	; 48
     8d2:	50 40       	sbci	r21, 0x00	; 0
     8d4:	48 0f       	add	r20, r24
     8d6:	59 1f       	adc	r21, r25
     8d8:	9e 2f       	mov	r25, r30
     8da:	7f 2f       	mov	r23, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     8dc:	61 91       	ld	r22, Z+
     8de:	86 2f       	mov	r24, r22
     8e0:	80 53       	subi	r24, 0x30	; 48
     8e2:	8a 30       	cpi	r24, 0x0A	; 10
     8e4:	38 f3       	brcs	.-50     	; 0x8b4 <_Z8nextNotev+0x230>
     8e6:	90 93 4d 01 	sts	0x014D, r25
     8ea:	70 93 4e 01 	sts	0x014E, r23
		}
		sequence++;
		goto parse_character;
	case 'o':
		// set the octave permanently
		octave = getNumber();
     8ee:	f4 2e       	mov	r15, r20
     8f0:	e4 2e       	mov	r14, r20
     8f2:	ec ce       	rjmp	.-552    	; 0x6cc <_Z8nextNotev+0x48>
		tmp_octave = octave;
		goto parse_character;
     8f4:	00 93 4c 01 	sts	0x014C, r16
     8f8:	10 93 4b 01 	sts	0x014B, r17
     8fc:	30 93 50 01 	sts	0x0150, r19
     900:	20 93 4f 01 	sts	0x014F, r18
     904:	f0 92 4a 01 	sts	0x014A, r15
     908:	d0 93 54 01 	sts	0x0154, r29
     90c:	c0 93 53 01 	sts	0x0153, r28
     910:	f0 93 4e 01 	sts	0x014E, r31
     914:	e0 93 4d 01 	sts	0x014D, r30
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	11 e0       	ldi	r17, 0x01	; 1
     91c:	79 c0       	rjmp	.+242    	; 0xa10 <_Z8nextNotev+0x38c>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     91e:	cb 01       	movw	r24, r22
     920:	33 e0       	ldi	r19, 0x03	; 3
     922:	88 0f       	add	r24, r24
     924:	99 1f       	adc	r25, r25
     926:	3a 95       	dec	r19
     928:	e1 f7       	brne	.-8      	; 0x922 <_Z8nextNotev+0x29e>
     92a:	66 0f       	add	r22, r22
     92c:	77 1f       	adc	r23, r23
     92e:	86 0f       	add	r24, r22
     930:	97 1f       	adc	r25, r23
		arg += *sequence-'0';
     932:	62 2f       	mov	r22, r18
     934:	77 27       	eor	r23, r23
     936:	67 fd       	sbrc	r22, 7
     938:	70 95       	com	r23
     93a:	60 53       	subi	r22, 0x30	; 48
     93c:	70 40       	sbci	r23, 0x00	; 0
     93e:	68 0f       	add	r22, r24
     940:	79 1f       	adc	r23, r25
     942:	9e 2f       	mov	r25, r30
     944:	3f 2f       	mov	r19, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     946:	21 91       	ld	r18, Z+
     948:	82 2f       	mov	r24, r18
     94a:	80 53       	subi	r24, 0x30	; 48
     94c:	8a 30       	cpi	r24, 0x0A	; 10
     94e:	38 f3       	brcs	.-50     	; 0x91e <_Z8nextNotev+0x29a>
     950:	90 93 4d 01 	sts	0x014D, r25
     954:	30 93 4e 01 	sts	0x014E, r19
		// Rest - the note value doesn't matter.
		rest = 1;
		break;
	case 't':
		// set the tempo
		whole_note_duration = 60*400/getNumber()*10;
     958:	80 ec       	ldi	r24, 0xC0	; 192
     95a:	9d e5       	ldi	r25, 0x5D	; 93
     95c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
     960:	cb 01       	movw	r24, r22
     962:	9b 01       	movw	r18, r22
     964:	a3 e0       	ldi	r26, 0x03	; 3
     966:	22 0f       	add	r18, r18
     968:	33 1f       	adc	r19, r19
     96a:	aa 95       	dec	r26
     96c:	e1 f7       	brne	.-8      	; 0x966 <_Z8nextNotev+0x2e2>
     96e:	88 0f       	add	r24, r24
     970:	99 1f       	adc	r25, r25
     972:	28 0f       	add	r18, r24
     974:	39 1f       	adc	r19, r25
     976:	30 93 52 01 	sts	0x0152, r19
     97a:	20 93 51 01 	sts	0x0151, r18
		duration = whole_note_duration/4;
     97e:	36 95       	lsr	r19
     980:	27 95       	ror	r18
     982:	36 95       	lsr	r19
     984:	27 95       	ror	r18
     986:	a2 ce       	rjmp	.-700    	; 0x6cc <_Z8nextNotev+0x48>
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
	{
		arg *= 10;
     988:	ce 01       	movw	r24, r28
     98a:	73 e0       	ldi	r23, 0x03	; 3
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	7a 95       	dec	r23
     992:	e1 f7       	brne	.-8      	; 0x98c <_Z8nextNotev+0x308>
     994:	cc 0f       	add	r28, r28
     996:	dd 1f       	adc	r29, r29
     998:	8c 0f       	add	r24, r28
     99a:	9d 1f       	adc	r25, r29
		arg += *sequence-'0';
     99c:	c4 2f       	mov	r28, r20
     99e:	dd 27       	eor	r29, r29
     9a0:	c7 fd       	sbrc	r28, 7
     9a2:	d0 95       	com	r29
     9a4:	e0 97       	sbiw	r28, 0x30	; 48
     9a6:	c8 0f       	add	r28, r24
     9a8:	d9 1f       	adc	r29, r25
     9aa:	9e 2f       	mov	r25, r30
     9ac:	5f 2f       	mov	r21, r31
unsigned int getNumber()
{
	unsigned int arg = 0;

	// read all digits, one at a time
	while(*sequence >= '0' && *sequence <= '9')
     9ae:	41 91       	ld	r20, Z+
     9b0:	84 2f       	mov	r24, r20
     9b2:	80 53       	subi	r24, 0x30	; 48
     9b4:	8a 30       	cpi	r24, 0x0A	; 10
     9b6:	40 f3       	brcs	.-48     	; 0x988 <_Z8nextNotev+0x304>
     9b8:	90 93 4d 01 	sts	0x014D, r25
     9bc:	50 93 4e 01 	sts	0x014E, r21
     9c0:	85 ce       	rjmp	.-758    	; 0x6cc <_Z8nextNotev+0x48>
		duration = whole_note_duration/4;
		goto parse_character;
	case 'v':
		// set the volume
		volume = getNumber();
		goto parse_character;
     9c2:	00 93 4c 01 	sts	0x014C, r16
     9c6:	10 93 4b 01 	sts	0x014B, r17
     9ca:	30 93 50 01 	sts	0x0150, r19
     9ce:	20 93 4f 01 	sts	0x014F, r18
     9d2:	f0 92 4a 01 	sts	0x014A, r15
     9d6:	d0 93 54 01 	sts	0x0154, r29
     9da:	c0 93 53 01 	sts	0x0153, r28
	default:
		sequence = 0;
     9de:	10 92 4e 01 	sts	0x014E, r1
     9e2:	10 92 4d 01 	sts	0x014D, r1
     9e6:	64 c0       	rjmp	.+200    	; 0xab0 <_Z8nextNotev+0x42c>
		return;
     9e8:	00 93 4c 01 	sts	0x014C, r16
     9ec:	10 93 4b 01 	sts	0x014B, r17
     9f0:	30 93 50 01 	sts	0x0150, r19
     9f4:	20 93 4f 01 	sts	0x014F, r18
     9f8:	f0 92 4a 01 	sts	0x014A, r15
     9fc:	d0 93 54 01 	sts	0x0154, r29
     a00:	c0 93 53 01 	sts	0x0153, r28
     a04:	f0 93 4e 01 	sts	0x014E, r31
     a08:	e0 93 4d 01 	sts	0x014D, r30
     a0c:	29 e0       	ldi	r18, 0x09	; 9
     a0e:	10 e0       	ldi	r17, 0x00	; 0
	}

	note += tmp_octave*12;
     a10:	8c e0       	ldi	r24, 0x0C	; 12
     a12:	e8 9e       	mul	r14, r24
     a14:	c0 01       	movw	r24, r0
     a16:	11 24       	eor	r1, r1
     a18:	02 2f       	mov	r16, r18
     a1a:	08 0f       	add	r16, r24
     a1c:	e0 91 4d 01 	lds	r30, 0x014D
     a20:	f0 91 4e 01 	lds	r31, 0x014E
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <_Z8nextNotev+0x3a6>

	// handle sharps and flats
	while(*sequence == '+' || *sequence == '#')
	{
		sequence ++;
		note ++;
     a26:	0f 5f       	subi	r16, 0xFF	; 255
     a28:	31 96       	adiw	r30, 0x01	; 1
	}

	note += tmp_octave*12;

	// handle sharps and flats
	while(*sequence == '+' || *sequence == '#')
     a2a:	80 81       	ld	r24, Z
     a2c:	8b 32       	cpi	r24, 0x2B	; 43
     a2e:	d9 f3       	breq	.-10     	; 0xa26 <_Z8nextNotev+0x3a2>
     a30:	83 32       	cpi	r24, 0x23	; 35
     a32:	c9 f3       	breq	.-14     	; 0xa26 <_Z8nextNotev+0x3a2>
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <_Z8nextNotev+0x3b4>
		note ++;
	}
	while(*sequence == '-')
	{
		sequence ++;
		note --;
     a36:	01 50       	subi	r16, 0x01	; 1
     a38:	9e 2f       	mov	r25, r30
     a3a:	2f 2f       	mov	r18, r31
	while(*sequence == '+' || *sequence == '#')
	{
		sequence ++;
		note ++;
	}
	while(*sequence == '-')
     a3c:	81 91       	ld	r24, Z+
     a3e:	8d 32       	cpi	r24, 0x2D	; 45
     a40:	d1 f3       	breq	.-12     	; 0xa36 <_Z8nextNotev+0x3b2>
     a42:	90 93 4d 01 	sts	0x014D, r25
     a46:	20 93 4e 01 	sts	0x014E, r18
		sequence ++;
		note --;
	}

	// set the duration of just this note
	tmp_duration = duration;
     a4a:	60 91 4f 01 	lds	r22, 0x014F
     a4e:	70 91 50 01 	lds	r23, 0x0150

	// If the input is 'c16', make it a 16th note, etc.
	if(*sequence > '0' && *sequence < '9')
     a52:	81 53       	subi	r24, 0x31	; 49
     a54:	88 30       	cpi	r24, 0x08	; 8
     a56:	18 f4       	brcc	.+6      	; 0xa5e <_Z8nextNotev+0x3da>
		tmp_duration = getDuration();
     a58:	0e 94 15 03 	call	0x62a	; 0x62a <_Z11getDurationv>
     a5c:	bc 01       	movw	r22, r24

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
     a5e:	9b 01       	movw	r18, r22
     a60:	36 95       	lsr	r19
     a62:	27 95       	ror	r18
     a64:	e0 91 4d 01 	lds	r30, 0x014D
     a68:	f0 91 4e 01 	lds	r31, 0x014E
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <_Z8nextNotev+0x3f2>
	while(*sequence == '.')
	{
		sequence ++;
		tmp_duration += dot_add;
     a6e:	62 0f       	add	r22, r18
     a70:	73 1f       	adc	r23, r19
		dot_add /= 2;
     a72:	36 95       	lsr	r19
     a74:	27 95       	ror	r18
     a76:	9e 2f       	mov	r25, r30
     a78:	4f 2f       	mov	r20, r31
		tmp_duration = getDuration();

	// Handle dotted notes - the first dot adds 50%, and each
	// additional dot adds 50% of the previous dot.
	dot_add = tmp_duration/2;
	while(*sequence == '.')
     a7a:	81 91       	ld	r24, Z+
     a7c:	8e 32       	cpi	r24, 0x2E	; 46
     a7e:	b9 f3       	breq	.-18     	; 0xa6e <_Z8nextNotev+0x3ea>
     a80:	90 93 4d 01 	sts	0x014D, r25
     a84:	40 93 4e 01 	sts	0x014E, r20
		sequence ++;
		tmp_duration += dot_add;
		dot_add /= 2;
	}

	if(staccato)
     a88:	80 91 4b 01 	lds	r24, 0x014B
     a8c:	88 23       	and	r24, r24
     a8e:	39 f0       	breq	.+14     	; 0xa9e <_Z8nextNotev+0x41a>
	{
		staccato_rest_duration = tmp_duration / 2;
     a90:	cb 01       	movw	r24, r22
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	80 93 4c 01 	sts	0x014C, r24
		tmp_duration -= staccato_rest_duration;
     a9a:	68 1b       	sub	r22, r24
     a9c:	71 09       	sbc	r23, r1
	}
	OrangutanBuzzer::playNote(note, tmp_duration, rest ? 0 : volume);
     a9e:	11 23       	and	r17, r17
     aa0:	11 f0       	breq	.+4      	; 0xaa6 <_Z8nextNotev+0x422>
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <_Z8nextNotev+0x426>
     aa6:	40 91 53 01 	lds	r20, 0x0153
     aaa:	80 2f       	mov	r24, r16
     aac:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN15OrangutanBuzzer8playNoteEhjh>
}
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	e6 e0       	ldi	r30, 0x06	; 6
     ab6:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__epilogue_restores__+0x18>

00000aba <_ZN15OrangutanBuzzer4playEPKc>:
// The following plays a quiet c major scale up and back down:
//   play("V8 cdefgab>cbagfedc");
//
// Here is an example from Bach:
//   play("T240 L8 a gafaeada c+adaeafa <aa<bac#ada c#adaeaf4");
void OrangutanBuzzer::play(const char *notes)
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
{
	DISABLE_TIMER1_INTERRUPT();	// prevent this from being interrupted
     abe:	0f e6       	ldi	r16, 0x6F	; 111
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	f8 01       	movw	r30, r16
     ac4:	10 82       	st	Z, r1
	octave = 4; // the current octave
     ac6:	24 e0       	ldi	r18, 0x04	; 4
     ac8:	20 93 4a 01 	sts	0x014A, r18
	whole_note_duration = 2000; // the whole note duration
     acc:	20 ed       	ldi	r18, 0xD0	; 208
     ace:	37 e0       	ldi	r19, 0x07	; 7
     ad0:	30 93 52 01 	sts	0x0152, r19
     ad4:	20 93 51 01 	sts	0x0151, r18
	duration = 500; // the duration of a note in ms
     ad8:	24 ef       	ldi	r18, 0xF4	; 244
     ada:	31 e0       	ldi	r19, 0x01	; 1
     adc:	30 93 50 01 	sts	0x0150, r19
     ae0:	20 93 4f 01 	sts	0x014F, r18
	volume = 15; // the note volume
     ae4:	2f e0       	ldi	r18, 0x0F	; 15
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	30 93 54 01 	sts	0x0154, r19
     aec:	20 93 53 01 	sts	0x0153, r18
	staccato = 0;
     af0:	10 92 4b 01 	sts	0x014B, r1
	sequence = notes;
     af4:	90 93 4e 01 	sts	0x014E, r25
     af8:	80 93 4d 01 	sts	0x014D, r24
	nextNote();
     afc:	0e 94 42 03 	call	0x684	; 0x684 <_Z8nextNotev>
	ENABLE_TIMER1_INTERRUPT();	// re-enable interrupts
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	f8 01       	movw	r30, r16
     b04:	80 83       	st	Z, r24
}
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <play>:
						  unsigned char volume)
{
	OrangutanBuzzer::playNote(note, dur, volume);
}

extern "C" void play(char *sequence)
     b0c:	0e 94 5d 05 	call	0xaba	; 0xaba <_ZN15OrangutanBuzzer4playEPKc>
{
	OrangutanBuzzer::play(sequence);
}
     b10:	08 95       	ret

00000b12 <__vector_13>:
												//  to play a note

void nextNote();

// Timer1 overflow interrupt
ISR (TIMER1_OVF_vect)
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
{
	if (buzzerTimeout-- == 0)
     b20:	80 91 55 01 	lds	r24, 0x0155
     b24:	90 91 56 01 	lds	r25, 0x0156
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	90 93 56 01 	sts	0x0156, r25
     b2e:	80 93 55 01 	sts	0x0155, r24
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	e1 f4       	brne	.+56     	; 0xb6e <__vector_13+0x5c>
	{
		TCCR1B = (TCCR1B & 0xF8) | TIMER1_CLK_1;	// select IO clock
     b36:	80 91 81 00 	lds	r24, 0x0081
     b3a:	88 7f       	andi	r24, 0xF8	; 248
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	80 93 81 00 	sts	0x0081, r24
		OCR1A = F_CPU / 1000;			// set TOP for freq = 1 kHz
     b42:	80 e2       	ldi	r24, 0x20	; 32
     b44:	9e e4       	ldi	r25, 0x4E	; 78
     b46:	90 93 89 00 	sts	0x0089, r25
     b4a:	80 93 88 00 	sts	0x0088, r24
		OCR1B = 0;						// 0% duty cycle
     b4e:	10 92 8b 00 	sts	0x008B, r1
     b52:	10 92 8a 00 	sts	0x008A, r1
		DDRB &= ~(1 << PB2);	// silence buz, pin->input
     b56:	22 98       	cbi	0x04, 2	; 4
		buzzerFinished = 1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 3a 01 	sts	0x013A, r24
		if(sequence)
     b5e:	80 91 4d 01 	lds	r24, 0x014D
     b62:	90 91 4e 01 	lds	r25, 0x014E
     b66:	89 2b       	or	r24, r25
     b68:	11 f0       	breq	.+4      	; 0xb6e <__vector_13+0x5c>
			nextNote();
     b6a:	0e 94 42 03 	call	0x684	; 0x684 <_Z8nextNotev>
	}
}
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <button_is_pressed>:
extern "C" unsigned char wait_for_button(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForButton(buttons);
}

extern "C" unsigned char button_is_pressed(unsigned char buttons)
     b7c:	28 2f       	mov	r18, r24
	{
		static unsigned char initialized = 0;

		if (!initialized)
     b7e:	80 91 57 01 	lds	r24, 0x0157
     b82:	88 23       	and	r24, r24
     b84:	61 f4       	brne	.+24     	; 0xb9e <button_is_pressed+0x22>
		{
			initialized = 1;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 57 01 	sts	0x0157, r24
#endif

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	DDRB &= ~ALL_BUTTONS;	// set the pushbutton pins to be inputs
     b8c:	84 b1       	in	r24, 0x04	; 4
     b8e:	8d 7c       	andi	r24, 0xCD	; 205
     b90:	84 b9       	out	0x04, r24	; 4
	PORTB |= ALL_BUTTONS;	// enable pullups on the pushbutton pins
     b92:	85 b1       	in	r24, 0x05	; 5
     b94:	82 63       	ori	r24, 0x32	; 50
     b96:	85 b9       	out	0x05, r24	; 5
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     b98:	86 e0       	ldi	r24, 0x06	; 6
     b9a:	8a 95       	dec	r24
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <button_is_pressed+0x1e>
// pressed.  Otherwise this method returns 0 (false).  The argument
// 'buttons' can refer to multiple buttons using the bitwise OR operator |.
unsigned char OrangutanPushbuttons::isPressed(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	return (~PINB & buttons) ? 1 : 0;
     b9e:	83 b1       	in	r24, 0x03	; 3
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	80 95       	com	r24
     ba8:	90 95       	com	r25
     baa:	28 23       	and	r18, r24
     bac:	39 23       	and	r19, r25
     bae:	23 2b       	or	r18, r19
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <button_is_pressed+0x38>
     bb2:	41 e0       	ldi	r20, 0x01	; 1
}

extern "C" unsigned char button_is_pressed(unsigned char buttons)
{
	return OrangutanPushbuttons::isPressed(buttons);
}
     bb4:	84 2f       	mov	r24, r20
     bb6:	08 95       	ret

00000bb8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>:
// execution will return from this method.  The argument 'buttons' can
// refer to multiple buttons using the bitwise OR operator |.  The
// return value is the ID of the button that was released.  Note that
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
     bb8:	68 2f       	mov	r22, r24

	static inline void init()
	{
		static unsigned char initialized = 0;

		if (!initialized)
     bba:	80 91 57 01 	lds	r24, 0x0157
     bbe:	88 23       	and	r24, r24
     bc0:	61 f4       	brne	.+24     	; 0xbda <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x22>
		{
			initialized = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 57 01 	sts	0x0157, r24
#endif

// initializes I/O pins for use as button inputs
void OrangutanPushbuttons::init2()
{
	DDRB &= ~ALL_BUTTONS;	// set the pushbutton pins to be inputs
     bc8:	84 b1       	in	r24, 0x04	; 4
     bca:	8d 7c       	andi	r24, 0xCD	; 205
     bcc:	84 b9       	out	0x04, r24	; 4
	PORTB |= ALL_BUTTONS;	// enable pullups on the pushbutton pins
     bce:	85 b1       	in	r24, 0x05	; 5
     bd0:	82 63       	ori	r24, 0x32	; 50
     bd2:	85 b9       	out	0x05, r24	; 5
     bd4:	86 e0       	ldi	r24, 0x06	; 6
     bd6:	8a 95       	dec	r24
     bd8:	f1 f7       	brne	.-4      	; 0xbd6 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x1e>
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
	{
		while (!(PINB & buttons))	// wait for a button to be released
     bda:	26 2f       	mov	r18, r22
     bdc:	30 e0       	ldi	r19, 0x00	; 0
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     bde:	40 e5       	ldi	r20, 0x50	; 80
     be0:	53 ec       	ldi	r21, 0xC3	; 195
     be2:	83 b1       	in	r24, 0x03	; 3
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	82 23       	and	r24, r18
     be8:	93 23       	and	r25, r19
     bea:	89 2b       	or	r24, r25
     bec:	d1 f3       	breq	.-12     	; 0xbe2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x2a>
     bee:	ca 01       	movw	r24, r20
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x38>
// this method takes care of button debouncing.
// Example: waitForRelease(TOP_BUTTON | BOTTOM_BUTTON);
unsigned char OrangutanPushbuttons::waitForRelease(unsigned char buttons)
{
	init();		// initialize pushbutton I/O pins if necessary
	do
     bf4:	83 b1       	in	r24, 0x03	; 3
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 23       	and	r24, r18
     bfa:	93 23       	and	r25, r19
     bfc:	89 2b       	or	r24, r25
     bfe:	89 f3       	breq	.-30     	; 0xbe2 <_ZN20OrangutanPushbuttons14waitForReleaseEh+0x2a>
		while (!(PINB & buttons))	// wait for a button to be released
			;
		_delay_ms(10);				// debounce the button release
	}
	while (!(PINB & buttons));		// if button isn't still released, loop
	return PINB & buttons;			// return the released button(s)
     c00:	83 b1       	in	r24, 0x03	; 3
}
     c02:	86 23       	and	r24, r22
     c04:	08 95       	ret

00000c06 <wait_for_button_release>:
extern "C" unsigned char wait_for_button_press(unsigned char buttons)
{
	return OrangutanPushbuttons::waitForPress(buttons);
}

extern "C" unsigned char wait_for_button_release(unsigned char buttons)
     c06:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN20OrangutanPushbuttons14waitForReleaseEh>
{
	return OrangutanPushbuttons::waitForRelease(buttons);
}
     c0a:	08 95       	ret

00000c0c <_ZN12OrangutanLCD8busyWaitEv>:
// Wait for the busy flag to clear on a 4-bit interface
// This is necessarily more complicated than the 8-bit interface
// because E must be strobed twice to get the full eight bits
// back from the LCD, even though we're only interested in one
// of them.
void OrangutanLCD::busyWait()
     c0c:	3a b1       	in	r19, 0x0a	; 10

	// Save our DDR information
	temp_ddr = DDRD;

	// Set up the data DDR for input
	DDRD &= ~(LCD_PORTD_MASK);
     c0e:	57 98       	cbi	0x0a, 7	; 10

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
     c10:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT |= (1 << LCD_RW);
     c12:	28 9a       	sbi	0x05, 0	; 5
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     c14:	26 e0       	ldi	r18, 0x06	; 6

	do
	{
		// Bring E high
		LCD_RS_E_PORT |= (1 << LCD_E);
     c16:	5c 9a       	sbi	0x0b, 4	; 11
     c18:	82 2f       	mov	r24, r18
     c1a:	8a 95       	dec	r24
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <_ZN12OrangutanLCD8busyWaitEv+0xe>

		// Wait at least 120ns (1us is excessive)
		_delay_us(1);

		// Get the data back from the LCD
		data = PIND & LCD_PORTD_MASK;
     c1e:	89 b1       	in	r24, 0x09	; 9
		// That excessive delay means our cycle time on E cannot be
		// shorter than 1000ns (500ns being the spec), so no further
		// delays are required

		// Bring E low
		LCD_RS_E_PORT &= ~(1 << LCD_E);
     c20:	5c 98       	cbi	0x0b, 4	; 11
     c22:	92 2f       	mov	r25, r18
     c24:	9a 95       	dec	r25
     c26:	f1 f7       	brne	.-4      	; 0xc24 <_ZN12OrangutanLCD8busyWaitEv+0x18>
		_delay_us(1);

		// Strobe out the 4 bits we don't care about:

		// Bring E high
		LCD_RS_E_PORT |= (1 << LCD_E);
     c28:	5c 9a       	sbi	0x0b, 4	; 11
     c2a:	92 2f       	mov	r25, r18
     c2c:	9a 95       	dec	r25
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <_ZN12OrangutanLCD8busyWaitEv+0x20>

		// Wait at least 120ns (1us is excessive)
		_delay_us(1);

		// Bring E low
		LCD_RS_E_PORT &= ~(1 << LCD_E);
     c30:	5c 98       	cbi	0x0b, 4	; 11

	// Set up RS and RW to read the state of the LCD's busy flag
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
	LCD_RW_PORT |= (1 << LCD_RW);

	do
     c32:	87 fd       	sbrc	r24, 7
     c34:	f0 cf       	rjmp	.-32     	; 0xc16 <_ZN12OrangutanLCD8busyWaitEv+0xa>
	while (data & (1 << LCD_BF));

	// To reach here our busy flag must be zero, meaning the LCD is free

	// Restore our DDR information
	DDRD = temp_ddr;
     c36:	3a b9       	out	0x0a, r19	; 10
}
     c38:	08 95       	ret

00000c3a <_ZN12OrangutanLCD10sendNibbleEh>:


// Send four bits out the 4-bit interface.  This assumes the busy flag
// is clear, that our DDRs are all set, etc.  Basically all it does is
// line up the bits and shove them out the appropriate I/O lines.
void OrangutanLCD::sendNibble(unsigned char nibble)
     c3a:	65 b1       	in	r22, 0x05	; 5
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	ac 01       	movw	r20, r24
     c40:	41 70       	andi	r20, 0x01	; 1
     c42:	50 70       	andi	r21, 0x00	; 0
     c44:	44 0f       	add	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	9c 01       	movw	r18, r24
     c4a:	26 70       	andi	r18, 0x06	; 6
     c4c:	30 70       	andi	r19, 0x00	; 0
     c4e:	53 e0       	ldi	r21, 0x03	; 3
     c50:	22 0f       	add	r18, r18
     c52:	33 1f       	adc	r19, r19
     c54:	5a 95       	dec	r21
     c56:	e1 f7       	brne	.-8      	; 0xc50 <_ZN12OrangutanLCD10sendNibbleEh+0x16>
     c58:	42 2b       	or	r20, r18
     c5a:	6d 7c       	andi	r22, 0xCD	; 205
     c5c:	46 2b       	or	r20, r22
     c5e:	45 b9       	out	0x05, r20	; 5
{
	PORTB = (PORTB & ~LCD_PORTB_MASK) | LCD_PORTB_DATA(nibble);
	PORTD = (PORTD & ~LCD_PORTD_MASK) | LCD_PORTD_DATA(nibble);
     c60:	2b b1       	in	r18, 0x0b	; 11
     c62:	88 70       	andi	r24, 0x08	; 8
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	34 e0       	ldi	r19, 0x04	; 4
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	3a 95       	dec	r19
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <_ZN12OrangutanLCD10sendNibbleEh+0x2e>
     c70:	2f 77       	andi	r18, 0x7F	; 127
     c72:	28 2b       	or	r18, r24
     c74:	2b b9       	out	0x0b, r18	; 11

	// At this point the four data lines are set, so the Enable pin 
	// is strobed to let the LCD latch them.

	// Bring E high
	LCD_RS_E_PORT |= (1 << LCD_E);
     c76:	5c 9a       	sbi	0x0b, 4	; 11
     c78:	86 e0       	ldi	r24, 0x06	; 6
     c7a:	98 2f       	mov	r25, r24
     c7c:	9a 95       	dec	r25
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <_ZN12OrangutanLCD10sendNibbleEh+0x42>
	
	// Wait => 450ns (1us is excessive)
	_delay_us(1);

	// Bring E low
	LCD_RS_E_PORT &= ~(1 << LCD_E);
     c80:	5c 98       	cbi	0x0b, 4	; 11
     c82:	8a 95       	dec	r24
     c84:	f1 f7       	brne	.-4      	; 0xc82 <_ZN12OrangutanLCD10sendNibbleEh+0x48>
	// Dropping out of the routine will take at least 10ns, the time
	// given by the datasheet for the LCD controller to read the
	// nibble on the falling edge of E

	// Our nibble has now been sent to the LCD.
}
     c86:	08 95       	ret

00000c88 <_ZN12OrangutanLCD4sendEhh>:


// Send either data or a command on a 4-bit interface
void OrangutanLCD::send(unsigned char data, unsigned char rs)
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	08 2f       	mov	r16, r24
     c96:	16 2f       	mov	r17, r22
{
	unsigned char temp_ddrb, temp_portb, temp_ddrd, temp_portd;
	
	init();  // initialize the LCD if we haven't already
     c98:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN12OrangutanLCD4initEv>

	// Wait until the busy flag clears
	busyWait();
     c9c:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN12OrangutanLCD8busyWaitEv>

	// Save our DDR and port information
	temp_ddrb = DDRB;
     ca0:	c4 b0       	in	r12, 0x04	; 4
	temp_portb = PORTB;
     ca2:	d5 b0       	in	r13, 0x05	; 5
	temp_ddrd = DDRD;
     ca4:	ea b0       	in	r14, 0x0a	; 10
	temp_portd = PORTD;
     ca6:	fb b0       	in	r15, 0x0b	; 11

	// Clear RW and RS
	LCD_RS_E_PORT &= ~(1 << LCD_RS);
     ca8:	5a 98       	cbi	0x0b, 2	; 11
	LCD_RW_PORT &= ~(1 << LCD_RW);
     caa:	28 98       	cbi	0x05, 0	; 5

	// Set RS according to what this routine was told to do
	LCD_RS_E_PORT |= (rs << LCD_RS);
     cac:	8b b1       	in	r24, 0x0b	; 11
     cae:	11 0f       	add	r17, r17
     cb0:	11 0f       	add	r17, r17
     cb2:	81 2b       	or	r24, r17
     cb4:	8b b9       	out	0x0b, r24	; 11

	// Set the data pins as outputs
	DDRB |= LCD_PORTB_MASK;
     cb6:	84 b1       	in	r24, 0x04	; 4
     cb8:	82 63       	ori	r24, 0x32	; 50
     cba:	84 b9       	out	0x04, r24	; 4
	DDRD |= LCD_PORTD_MASK;
     cbc:	57 9a       	sbi	0x0a, 7	; 10

	// Send the high 4 bits
	sendNibble(data >> 4);
     cbe:	80 2f       	mov	r24, r16
     cc0:	82 95       	swap	r24
     cc2:	8f 70       	andi	r24, 0x0F	; 15
     cc4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN12OrangutanLCD10sendNibbleEh>

	// Send the low 4 bits
	sendNibble(data & 0x0F);
     cc8:	80 2f       	mov	r24, r16
     cca:	8f 70       	andi	r24, 0x0F	; 15
     ccc:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZN12OrangutanLCD10sendNibbleEh>

	// Restore our DDR and port information
	PORTD = temp_portd;
     cd0:	fb b8       	out	0x0b, r15	; 11
	DDRD = temp_ddrd;
     cd2:	ea b8       	out	0x0a, r14	; 10
	PORTB = temp_portb;
     cd4:	d5 b8       	out	0x05, r13	; 5
	DDRB = temp_ddrb;
     cd6:	c4 b8       	out	0x04, r12	; 4
}
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	08 95       	ret

00000ce6 <_ZN12OrangutanLCD5init2Ev>:
#endif

// Initialize the LCD for a 4-bit interface
// this method is automatically called the first time any LCD member
// function is called
void OrangutanLCD::init2()
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
{
	// Set up the DDR for the LCD control lines
	LCD_RS_E_DDR |= (1 << LCD_RS) | (1 << LCD_E);
     cea:	8a b1       	in	r24, 0x0a	; 10
     cec:	84 61       	ori	r24, 0x14	; 20
     cee:	8a b9       	out	0x0a, r24	; 10
	LCD_RW_DDR |= (1 << LCD_RW);
     cf0:	20 9a       	sbi	0x04, 0	; 4
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
     cf2:	80 e5       	ldi	r24, 0x50	; 80
     cf4:	93 ec       	ldi	r25, 0xC3	; 195
     cf6:	fc 01       	movw	r30, r24
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <_ZN12OrangutanLCD5init2Ev+0x12>
	// Wait >15ms
	_delay_ms(10);
	_delay_ms(10);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     cfc:	01 97       	sbiw	r24, 0x01	; 1
     cfe:	f1 f7       	brne	.-4      	; 0xcfc <_ZN12OrangutanLCD5init2Ev+0x16>
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	80 e3       	ldi	r24, 0x30	; 48
     d04:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
     d08:	88 ea       	ldi	r24, 0xA8	; 168
     d0a:	91 e6       	ldi	r25, 0x61	; 97
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <_ZN12OrangutanLCD5init2Ev+0x26>

	// Wait >4.1ms
	_delay_ms(5);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	80 e3       	ldi	r24, 0x30	; 48
     d14:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
     d18:	08 e8       	ldi	r16, 0x88	; 136
     d1a:	13 e1       	ldi	r17, 0x13	; 19
     d1c:	c8 01       	movw	r24, r16
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <_ZN12OrangutanLCD5init2Ev+0x38>

	// Wait >120us
	_delay_ms(1);

	// Send 0x3 (last four bits ignored)
	lcd_cmd(0x30);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	80 e3       	ldi	r24, 0x30	; 48
     d26:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
     d2a:	c8 01       	movw	r24, r16
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <_ZN12OrangutanLCD5init2Ev+0x46>

	// Wait >120us
	_delay_ms(1);

	// Send 0x2 (last four bits ignored)  Sets 4-bit mode
	lcd_cmd(0x20);
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	80 e2       	ldi	r24, 0x20	; 32
     d34:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
     d38:	c8 01       	movw	r24, r16
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <_ZN12OrangutanLCD5init2Ev+0x54>

	// Wait >120us
	_delay_ms(1);

	// Send 0x28 = 4-bit, 2-line, 5x8 dots per char
	lcd_cmd(0x28);
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	88 e2       	ldi	r24, 0x28	; 40
     d42:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>

	// Busy Flag is now valid, so hard-coded delays are no longer
	// required.

	// Send 0x08 = Display off, cursor off, blinking off
	lcd_cmd(0x08);
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>

	// Send 0x01 = Clear display
	lcd_cmd(0x01);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>

	// Send 0x06 = Set entry mode: cursor shifts right, don't scroll
	lcd_cmd(0x06);
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>

	// Send 0x0C = Display on, cursor off, blinking off
	lcd_cmd(0x0C);
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	8c e0       	ldi	r24, 0x0C	; 12
     d62:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
}
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <_ZN12OrangutanLCD4initEv>:
						unsigned int delay_time);


  private:
  
	static inline void init()
     d6c:	80 91 5a 01 	lds	r24, 0x015A
     d70:	88 23       	and	r24, r24
     d72:	29 f4       	brne	.+10     	; 0xd7e <_ZN12OrangutanLCD4initEv+0x12>
	{
		static unsigned char initialized = 0;

		if (!initialized)
		{
			initialized = 1;	// this MUST be set before init2() is called
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 93 5a 01 	sts	0x015A, r24
			init2();			// or else infinite recursion ensues
     d7a:	0e 94 73 06 	call	0xce6	; 0xce6 <_ZN12OrangutanLCD5init2Ev>
     d7e:	08 95       	ret

00000d80 <_ZN12OrangutanLCD5clearEv>:
// *                 device-independent LCD functions                      *
// *************************************************************************


// clears the LCD screen and returns the cursor to position (0, 0)
void OrangutanLCD::clear()
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
{
	lcd_cmd(LCD_CLEAR);
}
     d88:	08 95       	ret

00000d8a <clear>:
extern "C" void lcd_init_printf()
{
	fdevopen(lcd_putchar, void_getchar);
}

extern "C" void clear()
     d8a:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN12OrangutanLCD5clearEv>
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f1 e0       	ldi	r31, 0x01	; 1
	unsigned char i;
	OrangutanLCD::clear();

	// clear out the LCD
	for(i=0;i<8;i++)
		row1[i] = ' ';
     d92:	80 e2       	ldi	r24, 0x20	; 32
     d94:	81 93       	st	Z+, r24
{
	unsigned char i;
	OrangutanLCD::clear();

	// clear out the LCD
	for(i=0;i<8;i++)
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	e3 34       	cpi	r30, 0x43	; 67
     d9a:	f9 07       	cpc	r31, r25
     d9c:	d9 f7       	brne	.-10     	; 0xd94 <clear+0xa>
		row1[i] = ' ';

	col = 0;
     d9e:	10 92 59 01 	sts	0x0159, r1
	row = 0;
     da2:	10 92 58 01 	sts	0x0158, r1
}
     da6:	08 95       	ret

00000da8 <_ZN12OrangutanLCD5printEc>:
	lcd_cmd(LCD_CLEAR);
}


// prints a single character at the current cursor location
void OrangutanLCD::print(char character)
     da8:	61 e0       	ldi	r22, 0x01	; 1
     daa:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
{
	lcd_data(character);
}
     dae:	08 95       	ret

00000db0 <print_character>:
extern "C" void print(const char *str)
{
	OrangutanLCD::print(str);
}

extern "C" void print_character(char c)
     db0:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN12OrangutanLCD5printEc>
{
	OrangutanLCD::print(c);
}
     db4:	08 95       	ret

00000db6 <_ZN12OrangutanLCD5printEPKc>:


// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <_ZN12OrangutanLCD5printEPKc+0x10>
{
	while (*str != 0)
		lcd_data(*str++);
     dbe:	21 96       	adiw	r28, 0x01	; 1
     dc0:	61 e0       	ldi	r22, 0x01	; 1
     dc2:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
// sends a string to the LCD.  The string is printed from 
// wherever the cursor is and will not span lines.  (This lets you 
// concatenate print statements.)
void OrangutanLCD::print(const char *str)
{
	while (*str != 0)
     dc6:	88 81       	ld	r24, Y
     dc8:	88 23       	and	r24, r24
     dca:	c9 f7       	brne	.-14     	; 0xdbe <_ZN12OrangutanLCD5printEPKc+0x8>
		lcd_data(*str++);
}
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <print>:

	col = 0;
	row = 0;
}

extern "C" void print(const char *str)
     dd2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN12OrangutanLCD5printEPKc>
{
	OrangutanLCD::print(str);
}
     dd6:	08 95       	ret

00000dd8 <_ZN12OrangutanLCD5printEm>:


// prints an unsigned long.  This prints from wherever the cursor is and will
// not span lines.  (This lets you concatenate print statements.)  This
// will only print as many characters as there are digits in the number.
void OrangutanLCD::print(unsigned long value)
     dd8:	4f 92       	push	r4
     dda:	5f 92       	push	r5
     ddc:	6f 92       	push	r6
     dde:	7f 92       	push	r7
     de0:	8f 92       	push	r8
     de2:	9f 92       	push	r9
     de4:	af 92       	push	r10
     de6:	bf 92       	push	r11
     de8:	cf 92       	push	r12
     dea:	df 92       	push	r13
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	2a 97       	sbiw	r28, 0x0a	; 10
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	f8 94       	cli
     e00:	de bf       	out	0x3e, r29	; 62
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	cd bf       	out	0x3d, r28	; 61
     e06:	4b 01       	movw	r8, r22
     e08:	5c 01       	movw	r10, r24
     e0a:	0a e0       	ldi	r16, 0x0A	; 10
	do
	{
		digit = value;
		value /= 10;
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e0c:	2e 01       	movw	r4, r28
     e0e:	08 94       	sec
     e10:	41 1c       	adc	r4, r1
     e12:	51 1c       	adc	r5, r1
	unsigned long digit;

	do
	{
		digit = value;
		value /= 10;
     e14:	c5 01       	movw	r24, r10
     e16:	b4 01       	movw	r22, r8
     e18:	2a e0       	ldi	r18, 0x0A	; 10
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
     e24:	69 01       	movw	r12, r18
     e26:	7a 01       	movw	r14, r20
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
     e28:	01 50       	subi	r16, 0x01	; 1
     e2a:	32 01       	movw	r6, r4
     e2c:	60 0e       	add	r6, r16
     e2e:	71 1c       	adc	r7, r1
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	2a e0       	ldi	r18, 0x0A	; 10
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
     e40:	86 1a       	sub	r8, r22
     e42:	97 0a       	sbc	r9, r23
     e44:	a8 0a       	sbc	r10, r24
     e46:	b9 0a       	sbc	r11, r25
     e48:	88 2d       	mov	r24, r8
     e4a:	80 5d       	subi	r24, 0xD0	; 208
     e4c:	f3 01       	movw	r30, r6
     e4e:	80 83       	st	Z, r24
{
	unsigned char str[10];
	unsigned char i = 10;
	unsigned long digit;

	do
     e50:	c1 14       	cp	r12, r1
     e52:	d1 04       	cpc	r13, r1
     e54:	e1 04       	cpc	r14, r1
     e56:	f1 04       	cpc	r15, r1
     e58:	61 f0       	breq	.+24     	; 0xe72 <_ZN12OrangutanLCD5printEm+0x9a>
     e5a:	46 01       	movw	r8, r12
     e5c:	57 01       	movw	r10, r14
     e5e:	da cf       	rjmp	.-76     	; 0xe14 <_ZN12OrangutanLCD5printEm+0x3c>
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
		lcd_data(str[i]);
     e60:	f7 01       	movw	r30, r14
     e62:	e0 0f       	add	r30, r16
     e64:	f1 1d       	adc	r31, r1
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	80 81       	ld	r24, Z
     e6a:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     e6e:	0f 5f       	subi	r16, 0xFF	; 255
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <_ZN12OrangutanLCD5printEm+0xa2>
		lcd_data(str[i]);
     e72:	7e 01       	movw	r14, r28
     e74:	08 94       	sec
     e76:	e1 1c       	adc	r14, r1
     e78:	f1 1c       	adc	r15, r1
		digit -= value * 10;
		str[--i] = '0' + (unsigned char)digit;
	}
	while (value != 0);

	for(; i < 10; i++)
     e7a:	0a 30       	cpi	r16, 0x0A	; 10
     e7c:	88 f3       	brcs	.-30     	; 0xe60 <_ZN12OrangutanLCD5printEm+0x88>
		lcd_data(str[i]);
}
     e7e:	2a 96       	adiw	r28, 0x0a	; 10
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	9f 90       	pop	r9
     e9e:	8f 90       	pop	r8
     ea0:	7f 90       	pop	r7
     ea2:	6f 90       	pop	r6
     ea4:	5f 90       	pop	r5
     ea6:	4f 90       	pop	r4
     ea8:	08 95       	ret

00000eaa <_ZN12OrangutanLCD5printEl>:

// prints a signed long.  This prints from wherever the cursor is and will not
// span lines.  (This lets you concatenate print statements.)  This function
// will only print as many characters as there are digits in the number (plus
// a minus sign if the number is negative).
void OrangutanLCD::print(long value)
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	7b 01       	movw	r14, r22
     eb4:	8c 01       	movw	r16, r24
{
	if (value < 0)
     eb6:	97 ff       	sbrs	r25, 7
     eb8:	0c c0       	rjmp	.+24     	; 0xed2 <_ZN12OrangutanLCD5printEl+0x28>
	{
		value = -value;
     eba:	10 95       	com	r17
     ebc:	00 95       	com	r16
     ebe:	f0 94       	com	r15
     ec0:	e0 94       	com	r14
     ec2:	e1 1c       	adc	r14, r1
     ec4:	f1 1c       	adc	r15, r1
     ec6:	01 1d       	adc	r16, r1
     ec8:	11 1d       	adc	r17, r1
		lcd_data('-');		// print the minus sign
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	8d e2       	ldi	r24, 0x2D	; 45
     ece:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
	}
	print((unsigned long)value);
     ed2:	c8 01       	movw	r24, r16
     ed4:	b7 01       	movw	r22, r14
     ed6:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN12OrangutanLCD5printEm>
}
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <print_long>:
extern "C" void print_character(char c)
{
	OrangutanLCD::print(c);
}

extern "C" void print_long(long value)
     ee4:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN12OrangutanLCD5printEl>
{
	OrangutanLCD::print(value);
}
     ee8:	08 95       	ret

00000eea <_ZN12OrangutanLCD6gotoXYEhh>:


// moves the cursor to the specified (x, y) position
// x is a zero-based column indicator (0 <= x <= 7)
// y is a zero-based row indicator (0 <= y <= 1)
void OrangutanLCD::gotoXY(unsigned char x, unsigned char y)
     eea:	a2 e0       	ldi	r26, 0x02	; 2
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	eb e7       	ldi	r30, 0x7B	; 123
     ef0:	f7 e0       	ldi	r31, 0x07	; 7
     ef2:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__prologue_saves__+0x20>
     ef6:	28 2f       	mov	r18, r24
	// The actual memory locations are 0x00, and 0x40, but since
	// D7 needs to be high in order to set a new memory location, we can go
	// ahead and make the seventh bit of our memory location bytes to 1,
	// which makes the numbers 0x80 and 0xC0:

	unsigned char line_mem[] = {0x80, 0xC0};
     ef8:	80 e8       	ldi	r24, 0x80	; 128
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	80 ec       	ldi	r24, 0xC0	; 192
     efe:	8a 83       	std	Y+2, r24	; 0x02
	x = (x < LCD_MAX_X ? x : LCD_MAX_X);
	y = (y < LCD_MAX_Y ? y : LCD_MAX_Y);

	// Grab the location in the LCD's memory of the start of line y,
	// and add X to it to get the right character location.
	lcd_cmd(line_mem[y] + x);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	66 23       	and	r22, r22
     f06:	11 f0       	breq	.+4      	; 0xf0c <_ZN12OrangutanLCD6gotoXYEhh+0x22>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	fe 01       	movw	r30, r28
     f0e:	31 96       	adiw	r30, 0x01	; 1
     f10:	e8 0f       	add	r30, r24
     f12:	f9 1f       	adc	r31, r25
     f14:	92 2f       	mov	r25, r18
     f16:	28 30       	cpi	r18, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <_ZN12OrangutanLCD6gotoXYEhh+0x32>
     f1a:	97 e0       	ldi	r25, 0x07	; 7
     f1c:	80 81       	ld	r24, Z
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	89 0f       	add	r24, r25
     f22:	0e 94 44 06 	call	0xc88	; 0xc88 <_ZN12OrangutanLCD4sendEhh>
}
     f26:	22 96       	adiw	r28, 0x02	; 2
     f28:	e2 e0       	ldi	r30, 0x02	; 2
     f2a:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__epilogue_restores__+0x20>

00000f2e <lcd_goto_xy>:

extern "C" int void_getchar(FILE *f) {
	return 0;
}

extern "C" void lcd_goto_xy(int col, int row)
     f2e:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN12OrangutanLCD6gotoXYEhh>
{
	OrangutanLCD::gotoXY(col,row);
}
     f32:	08 95       	ret

00000f34 <_GLOBAL__I_pololu_3pi_init>:
}

unsigned int Pololu3pi::batteryMillivolts()
{
	return OrangutanAnalog::readAverage(6,10)*5000L*3/2/1023;
}
     f34:	8b e5       	ldi	r24, 0x5B	; 91
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 56 08 	call	0x10ac	; 0x10ac <_ZN11PololuQTRRCC1Ev>
     f3c:	08 95       	ret

00000f3e <_ZN9Pololu3pi17batteryMillivoltsEv>:
unsigned int Pololu3pi::readLine(unsigned int *sensor_values, unsigned char white_line)
{
	return qtr3pi.readLine(sensor_values, white_line);
}

unsigned int Pololu3pi::batteryMillivolts()
     f3e:	6a e0       	ldi	r22, 0x0A	; 10
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZN15OrangutanAnalog11readAverageEhj>
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	2c e4       	ldi	r18, 0x4C	; 76
     f52:	3d e1       	ldi	r19, 0x1D	; 29
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	33 e0       	ldi	r19, 0x03	; 3
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divmodsi4>
     f68:	c9 01       	movw	r24, r18
{
	return OrangutanAnalog::readAverage(6,10)*5000L*3/2/1023;
}
     f6a:	08 95       	ret

00000f6c <battery_millivolts>:
extern "C" void pololu_3pi_init(unsigned int line_sensor_timeout_us)
{
	Pololu3pi::init(line_sensor_timeout_us);
}

extern "C" unsigned int battery_millivolts()
     f6c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <_ZN9Pololu3pi17batteryMillivoltsEv>
{
	return Pololu3pi::batteryMillivolts();
}
     f70:	08 95       	ret

00000f72 <read_line>:
extern "C" void read_line_sensors_calibrated(unsigned int *sensor_values)
{
	qtr3pi.readCalibrated(sensor_values);
}

extern "C" unsigned int read_line(unsigned int *sensor_values)
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	8b e5       	ldi	r24, 0x5B	; 91
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 08 0b 	call	0x1610	; 0x1610 <_ZN11PololuQTRRC8readLineEPjh>
{
	return qtr3pi.readLine(sensor_values);
}
     f7e:	08 95       	ret

00000f80 <calibrate_line_sensors>:
extern "C" void emitters_off()
{
	qtr3pi.emittersOff();
}

extern "C" void calibrate_line_sensors()
     f80:	8b e5       	ldi	r24, 0x5B	; 91
     f82:	91 e0       	ldi	r25, 0x01	; 1
     f84:	0e 94 82 0a 	call	0x1504	; 0x1504 <_ZN11PololuQTRRC9calibrateEv>
{
	qtr3pi.calibrate();
}
     f88:	08 95       	ret

00000f8a <_ZN9Pololu3pi4initEj>:
	return qtr3pi.readLine(sensor_values, 1);
}

#endif

void Pololu3pi::init(unsigned int line_sensor_timeout_us)
     f8a:	0f 93       	push	r16
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	00 d0       	rcall	.+0      	; 0xf92 <_ZN9Pololu3pi4initEj+0x8>
     f92:	00 d0       	rcall	.+0      	; 0xf94 <_ZN9Pololu3pi4initEj+0xa>
     f94:	0f 92       	push	r0
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	9c 01       	movw	r18, r24
{
	// Set up the line sensor and turn off the emitters.
	// The sensors are on PC0..4, and the emitter is on PC5.
	unsigned char pins[5] = {14,15,16,17,18};
     f9c:	de 01       	movw	r26, r28
     f9e:	11 96       	adiw	r26, 0x01	; 1
     fa0:	e3 e4       	ldi	r30, 0x43	; 67
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	45 e0       	ldi	r20, 0x05	; 5
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	41 50       	subi	r20, 0x01	; 1
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <_ZN9Pololu3pi4initEj+0x1c>
	qtr3pi.init(pins,5,line_sensor_timeout_us,19);
     fae:	03 e1       	ldi	r16, 0x13	; 19
     fb0:	45 e0       	ldi	r20, 0x05	; 5
     fb2:	be 01       	movw	r22, r28
     fb4:	6f 5f       	subi	r22, 0xFF	; 255
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8b e5       	ldi	r24, 0x5B	; 91
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 57 08 	call	0x10ae	; 0x10ae <_ZN11PololuQTRRC4initEPhhjh>
	qtr3pi.emittersOff();
     fc0:	8b e5       	ldi	r24, 0x5B	; 91
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN11PololuQTRRC11emittersOffEv>
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	0f 91       	pop	r16
     fd8:	08 95       	ret

00000fda <pololu_3pi_init>:
// a global qtr sensors
static PololuQTRRC qtr3pi;

#ifdef LIB_POLOLU

extern "C" void pololu_3pi_init(unsigned int line_sensor_timeout_us)
     fda:	0e 94 c5 07 	call	0xf8a	; 0xf8a <_ZN9Pololu3pi4initEj>
{
	Pololu3pi::init(line_sensor_timeout_us);
}
     fde:	08 95       	ret

00000fe0 <delay_ms>:

#define F_CPU 20000000UL
#include <util/delay.h>	// F_CPU is defined in "device.h" above

// delay for time_ms milliseconds by looping
extern "C" void delay_ms( unsigned int time_ms )
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	48 e8       	ldi	r20, 0x88	; 136
     fe6:	53 e1       	ldi	r21, 0x13	; 19
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <delay_ms+0x14>
     fea:	fa 01       	movw	r30, r20
     fec:	31 97       	sbiw	r30, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <delay_ms+0xc>
{
  unsigned int i;

  for ( i = 0; i < time_ms; i++ )
     ff0:	2f 5f       	subi	r18, 0xFF	; 255
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	28 17       	cp	r18, r24
     ff6:	39 07       	cpc	r19, r25
     ff8:	c0 f3       	brcs	.-16     	; 0xfea <delay_ms+0xa>
    _delay_ms( 1 );		// _delay_ms() comes from <util/delay.h>
  //  and can only delay for a max of around 13 ms
  //  when the IO clock is 20 MHz.
}
     ffa:	08 95       	ret

00000ffc <_ZN15OrangutanAnalog11readAverageEhj>:
}


// take 'sample' readings of the specified channel and return the average
unsigned int OrangutanAnalog::readAverage(unsigned char channel, 
											unsigned int samples)
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
// conversion on a channel with startConversion(channel), and then
// poll isConverting in your main loop.  Once isConverting() returns
// a zero, the result can be obtained through a call to conversionResult().
void OrangutanAnalog::startConversion(unsigned char channel)
{
	ADCSRA = 0x87;		// bit 7 set: ADC enabled
    1004:	97 e8       	ldi	r25, 0x87	; 135
    1006:	90 93 7a 00 	sts	0x007A, r25
						// bit 6 clear: don't start conversion
						// bit 5 clear: disable autotrigger
						// bit 4: ADC interrupt flag
						// bit 3 clear: disable ADC interrupt
						// bits 0-2 set: ADC clock prescaler is 128
	ADMUX &= 0xF0;				// set the conversion channel
    100a:	90 91 7c 00 	lds	r25, 0x007C
    100e:	90 7f       	andi	r25, 0xF0	; 240
    1010:	90 93 7c 00 	sts	0x007C, r25
	ADMUX |= channel & 0x0F;
    1014:	90 91 7c 00 	lds	r25, 0x007C
    1018:	8f 70       	andi	r24, 0x0F	; 15
    101a:	89 2b       	or	r24, r25
    101c:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= 1 << ADSC;		// start the conversion
    1020:	80 91 7a 00 	lds	r24, 0x007A
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	80 93 7a 00 	sts	0x007A, r24
    102a:	fb 01       	movw	r30, r22
    102c:	ee 24       	eor	r14, r14
    102e:	ff 24       	eor	r15, r15
    1030:	87 01       	movw	r16, r14
	unsigned long sum = 0;
	
	startConversion(channel);	// call this first to set the channel
	do
	{
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
    1032:	80 91 7a 00 	lds	r24, 0x007A
    1036:	80 64       	ori	r24, 0x40	; 64
    1038:	80 93 7a 00 	sts	0x007A, r24

	// returns 1 if the ADC is in the middle of an conversion, otherwise
	// returns 0
	static inline unsigned char isConverting()
	{
		return ADCSRA & (1 << ADSC);
    103c:	80 91 7a 00 	lds	r24, 0x007A
		while (isConverting());	// wait while converting
    1040:	86 fd       	sbrc	r24, 6
    1042:	fc cf       	rjmp	.-8      	; 0x103c <_ZN15OrangutanAnalog11readAverageEhj+0x40>
	// value of this method can be directly compared against the macros
	// MODE_8_BIT and MODE_10_BIT:
	// For example: if (getMode() == MODE_8_BIT) ...
	static inline unsigned char getMode()
	{
		return ADMUX & (1 << ADLAR) ? 1 : 0;
    1044:	80 91 7c 00 	lds	r24, 0x007C
    1048:	85 ff       	sbrs	r24, 5
    104a:	2b c0       	rjmp	.+86     	; 0x10a2 <_ZN15OrangutanAnalog11readAverageEhj+0xa6>
	
	// returns the result of the previous ADC conversion.
	static inline unsigned int conversionResult()
	{
		if (getMode())				// if left-adjusted (i.e. 8-bit mode)
			return ADCH;			// 8-bit result
    104c:	80 91 79 00 	lds	r24, 0x0079
    1050:	90 e0       	ldi	r25, 0x00	; 0
		sum += conversionResult();	// sum the results
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e8 0e       	add	r14, r24
    1058:	f9 1e       	adc	r15, r25
    105a:	0a 1f       	adc	r16, r26
    105c:	1b 1f       	adc	r17, r27
{
	unsigned int i = samples;
	unsigned long sum = 0;
	
	startConversion(channel);	// call this first to set the channel
	do
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	41 f7       	brne	.-48     	; 0x1032 <_ZN15OrangutanAnalog11readAverageEhj+0x36>
    1062:	cb 01       	movw	r24, r22
    1064:	96 95       	lsr	r25
    1066:	87 95       	ror	r24
		ADCSRA |= 1 << ADSC;	// start the next conversion on current channel
		while (isConverting());	// wait while converting
		sum += conversionResult();	// sum the results
	} while (--i);
	
	if (samples < 64)			// can do the division much faster
    1068:	60 34       	cpi	r22, 0x40	; 64
    106a:	71 05       	cpc	r23, r1
    106c:	38 f4       	brcc	.+14     	; 0x107c <_ZN15OrangutanAnalog11readAverageEhj+0x80>
		return ((unsigned int)sum + (samples >> 1)) / (unsigned char)samples;
    106e:	8e 0d       	add	r24, r14
    1070:	9f 1d       	adc	r25, r15
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__udivmodhi4>
    1078:	9b 01       	movw	r18, r22
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <_ZN15OrangutanAnalog11readAverageEhj+0x9a>
	return (sum + (samples >> 1)) / samples;	// compute the rounded avg
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e8 0e       	add	r14, r24
    1082:	f9 1e       	adc	r15, r25
    1084:	0a 1f       	adc	r16, r26
    1086:	1b 1f       	adc	r17, r27
    1088:	9b 01       	movw	r18, r22
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	50 e0       	ldi	r21, 0x00	; 0
    108e:	c8 01       	movw	r24, r16
    1090:	b7 01       	movw	r22, r14
    1092:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
}
    1096:	c9 01       	movw	r24, r18
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret
		return ADC;				// 10-bit result
    10a2:	80 91 78 00 	lds	r24, 0x0078
    10a6:	90 91 79 00 	lds	r25, 0x0079
    10aa:	d3 cf       	rjmp	.-90     	; 0x1052 <_ZN15OrangutanAnalog11readAverageEhj+0x56>

000010ac <_ZN11PololuQTRRCC1Ev>:
}

#endif

// Constructors
PololuQTRRC::PololuQTRRC()
    10ac:	08 95       	ret

000010ae <_ZN11PololuQTRRC4initEPhhjh>:

// 'emitterPin' is the Arduino pin that controls the IR LEDs on the 8RC
// modules.  If you are using a 1RC (i.e. if there is no emitter pin),
// use an invalid Arduino pin value (20 or greater).
void PololuQTRRC::init(unsigned char* pins, unsigned char numSensors, 
						 unsigned int timeout_us, unsigned char emitterPin)
    10ae:	2f 92       	push	r2
    10b0:	3f 92       	push	r3
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
    10d2:	5b 01       	movw	r10, r22
{
	unsigned char i;
	_portBMask = 0;
    10d4:	c0 5c       	subi	r28, 0xC0	; 192
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	19 92       	st	Y+, r1
	_portCMask = 0;
    10da:	19 92       	st	Y+, r1
	_portDMask = 0;
    10dc:	18 82       	st	Y, r1
    10de:	c2 54       	subi	r28, 0x42	; 66
    10e0:	d0 40       	sbci	r29, 0x00	; 0
	
	_timeout_us = timeout_us;
    10e2:	3a af       	std	Y+58, r19	; 0x3a
    10e4:	29 af       	std	Y+57, r18	; 0x39
	if (numSensors > 8)
    10e6:	49 30       	cpi	r20, 0x09	; 9
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <_ZN11PololuQTRRC4initEPhhjh+0x42>
		_numSensors = 8;
    10ea:	88 e0       	ldi	r24, 0x08	; 8
    10ec:	88 af       	std	Y+56, r24	; 0x38
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <_ZN11PololuQTRRC4initEPhhjh+0x44>
	else
		_numSensors = numSensors;
    10f0:	48 af       	std	Y+56, r20	; 0x38
    10f2:	30 e0       	ldi	r19, 0x00	; 0
	for (i = 0; i < _numSensors; i++)
	{
		// Initialize the max and min calibrated values to values that
		// will cause the first reading to update them.
		calibratedMinimum[i] = 1000;
    10f4:	a8 ee       	ldi	r26, 0xE8	; 232
    10f6:	2a 2e       	mov	r2, r26
    10f8:	a3 e0       	ldi	r26, 0x03	; 3
    10fa:	3a 2e       	mov	r3, r26
			_portBMask |= _bitmask[i];
			_register[i] = &PINB;
		}
		else if (pins[i] < 20)		// port C
		{
			_bitmask[i] = 1 << (pins[i] - 14);
    10fc:	41 e0       	ldi	r20, 0x01	; 1
    10fe:	50 e0       	ldi	r21, 0x00	; 0
			_portCMask |= _bitmask[i];
    1100:	f1 e4       	ldi	r31, 0x41	; 65
    1102:	cf 2e       	mov	r12, r31
    1104:	d1 2c       	mov	r13, r1
    1106:	cc 0e       	add	r12, r28
    1108:	dd 1e       	adc	r13, r29
			_register[i] = &PINC;
    110a:	e6 e2       	ldi	r30, 0x26	; 38
    110c:	4e 2e       	mov	r4, r30
    110e:	51 2c       	mov	r5, r1
			_register[i] = &PIND;
		}
		else if (pins[i] < 14)		// port B
		{
			_bitmask[i] = 1 << (pins[i] - 8);
			_portBMask |= _bitmask[i];
    1110:	70 e4       	ldi	r23, 0x40	; 64
    1112:	e7 2e       	mov	r14, r23
    1114:	f1 2c       	mov	r15, r1
    1116:	ec 0e       	add	r14, r28
    1118:	fd 1e       	adc	r15, r29
			_register[i] = &PINB;
    111a:	63 e2       	ldi	r22, 0x23	; 35
    111c:	66 2e       	mov	r6, r22
    111e:	71 2c       	mov	r7, r1
		calibratedMaximum[i] = 0;

		if (pins[i] < 8)			// port D
		{
			_bitmask[i] = 1 << pins[i];
			_portDMask |= _bitmask[i];
    1120:	be 01       	movw	r22, r28
    1122:	6e 5b       	subi	r22, 0xBE	; 190
    1124:	7f 4f       	sbci	r23, 0xFF	; 255
			_register[i] = &PIND;
    1126:	29 e2       	ldi	r18, 0x29	; 41
    1128:	82 2e       	mov	r8, r18
    112a:	91 2c       	mov	r9, r1
    112c:	64 c0       	rjmp	.+200    	; 0x11f6 <_ZN11PololuQTRRC4initEPhhjh+0x148>
		_numSensors = numSensors;
	for (i = 0; i < _numSensors; i++)
	{
		// Initialize the max and min calibrated values to values that
		// will cause the first reading to update them.
		calibratedMinimum[i] = 1000;
    112e:	a3 2f       	mov	r26, r19
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	fd 01       	movw	r30, r26
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ec 0f       	add	r30, r28
    113a:	fd 1f       	adc	r31, r29
    113c:	31 82       	std	Z+1, r3	; 0x01
    113e:	20 82       	st	Z, r2
		calibratedMaximum[i] = 0;
    1140:	fd 01       	movw	r30, r26
    1142:	38 96       	adiw	r30, 0x08	; 8
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	ec 0f       	add	r30, r28
    114a:	fd 1f       	adc	r31, r29
    114c:	11 82       	std	Z+1, r1	; 0x01
    114e:	10 82       	st	Z, r1

		if (pins[i] < 8)			// port D
    1150:	f5 01       	movw	r30, r10
    1152:	ea 0f       	add	r30, r26
    1154:	fb 1f       	adc	r31, r27
    1156:	80 81       	ld	r24, Z
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	b8 f4       	brcc	.+46     	; 0x118a <_ZN11PololuQTRRC4initEPhhjh+0xdc>
		{
			_bitmask[i] = 1 << pins[i];
    115c:	fa 01       	movw	r30, r20
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <_ZN11PololuQTRRC4initEPhhjh+0xb6>
    1160:	ee 0f       	add	r30, r30
    1162:	ff 1f       	adc	r31, r31
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <_ZN11PololuQTRRC4initEPhhjh+0xb2>
    1168:	cf 01       	movw	r24, r30
    116a:	fe 01       	movw	r30, r28
    116c:	ea 0f       	add	r30, r26
    116e:	fb 1f       	adc	r31, r27
    1170:	80 a3       	std	Z+32, r24	; 0x20
			_portDMask |= _bitmask[i];
    1172:	fb 01       	movw	r30, r22
    1174:	20 81       	ld	r18, Z
    1176:	28 2b       	or	r18, r24
    1178:	20 83       	st	Z, r18
			_register[i] = &PIND;
    117a:	54 96       	adiw	r26, 0x14	; 20
    117c:	aa 0f       	add	r26, r26
    117e:	bb 1f       	adc	r27, r27
    1180:	ac 0f       	add	r26, r28
    1182:	bd 1f       	adc	r27, r29
    1184:	8d 92       	st	X+, r8
    1186:	9c 92       	st	X, r9
    1188:	35 c0       	rjmp	.+106    	; 0x11f4 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		}
		else if (pins[i] < 14)		// port B
    118a:	8e 30       	cpi	r24, 0x0E	; 14
    118c:	c8 f4       	brcc	.+50     	; 0x11c0 <_ZN11PololuQTRRC4initEPhhjh+0x112>
		{
			_bitmask[i] = 1 << (pins[i] - 8);
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	08 97       	sbiw	r24, 0x08	; 8
    1192:	fa 01       	movw	r30, r20
    1194:	02 c0       	rjmp	.+4      	; 0x119a <_ZN11PololuQTRRC4initEPhhjh+0xec>
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	8a 95       	dec	r24
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <_ZN11PololuQTRRC4initEPhhjh+0xe8>
    119e:	cf 01       	movw	r24, r30
    11a0:	fe 01       	movw	r30, r28
    11a2:	ea 0f       	add	r30, r26
    11a4:	fb 1f       	adc	r31, r27
    11a6:	80 a3       	std	Z+32, r24	; 0x20
			_portBMask |= _bitmask[i];
    11a8:	f7 01       	movw	r30, r14
    11aa:	20 81       	ld	r18, Z
    11ac:	28 2b       	or	r18, r24
    11ae:	20 83       	st	Z, r18
			_register[i] = &PINB;
    11b0:	54 96       	adiw	r26, 0x14	; 20
    11b2:	aa 0f       	add	r26, r26
    11b4:	bb 1f       	adc	r27, r27
    11b6:	ac 0f       	add	r26, r28
    11b8:	bd 1f       	adc	r27, r29
    11ba:	6d 92       	st	X+, r6
    11bc:	7c 92       	st	X, r7
    11be:	1a c0       	rjmp	.+52     	; 0x11f4 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		}
		else if (pins[i] < 20)		// port C
    11c0:	84 31       	cpi	r24, 0x14	; 20
    11c2:	c0 f4       	brcc	.+48     	; 0x11f4 <_ZN11PololuQTRRC4initEPhhjh+0x146>
		{
			_bitmask[i] = 1 << (pins[i] - 14);
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 97       	sbiw	r24, 0x0e	; 14
    11c8:	fa 01       	movw	r30, r20
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <_ZN11PololuQTRRC4initEPhhjh+0x122>
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <_ZN11PololuQTRRC4initEPhhjh+0x11e>
    11d4:	cf 01       	movw	r24, r30
    11d6:	fe 01       	movw	r30, r28
    11d8:	ea 0f       	add	r30, r26
    11da:	fb 1f       	adc	r31, r27
    11dc:	80 a3       	std	Z+32, r24	; 0x20
			_portCMask |= _bitmask[i];
    11de:	f6 01       	movw	r30, r12
    11e0:	20 81       	ld	r18, Z
    11e2:	28 2b       	or	r18, r24
    11e4:	20 83       	st	Z, r18
			_register[i] = &PINC;
    11e6:	54 96       	adiw	r26, 0x14	; 20
    11e8:	aa 0f       	add	r26, r26
    11ea:	bb 1f       	adc	r27, r27
    11ec:	ac 0f       	add	r26, r28
    11ee:	bd 1f       	adc	r27, r29
    11f0:	4d 92       	st	X+, r4
    11f2:	5c 92       	st	X, r5
	_timeout_us = timeout_us;
	if (numSensors > 8)
		_numSensors = 8;
	else
		_numSensors = numSensors;
	for (i = 0; i < _numSensors; i++)
    11f4:	3f 5f       	subi	r19, 0xFF	; 255
    11f6:	88 ad       	ldd	r24, Y+56	; 0x38
    11f8:	38 17       	cp	r19, r24
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <_ZN11PololuQTRRC4initEPhhjh+0x150>
    11fc:	98 cf       	rjmp	.-208    	; 0x112e <_ZN11PololuQTRRC4initEPhhjh+0x80>
			_portCMask |= _bitmask[i];
			_register[i] = &PINC;
		}
	}
	
	if (emitterPin < 8)				// port D
    11fe:	08 30       	cpi	r16, 0x08	; 8
    1200:	78 f4       	brcc	.+30     	; 0x1220 <_ZN11PololuQTRRC4initEPhhjh+0x172>
	{
		_emitterBitmask = 1 << emitterPin;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <_ZN11PololuQTRRC4initEPhhjh+0x15e>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 95       	dec	r16
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <_ZN11PololuQTRRC4initEPhhjh+0x15a>
    1210:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTD;
    1212:	8b e2       	ldi	r24, 0x2B	; 43
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9d af       	std	Y+61, r25	; 0x3d
    1218:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRD;
    121a:	8a e2       	ldi	r24, 0x2A	; 42
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	29 c0       	rjmp	.+82     	; 0x1272 <_ZN11PololuQTRRC4initEPhhjh+0x1c4>
	}
	else if (emitterPin < 14)		// port B
    1220:	0e 30       	cpi	r16, 0x0E	; 14
    1222:	98 f4       	brcc	.+38     	; 0x124a <_ZN11PololuQTRRC4initEPhhjh+0x19c>
	{
		_emitterBitmask = 1 << (emitterPin - 8);
    1224:	20 2f       	mov	r18, r16
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	28 50       	subi	r18, 0x08	; 8
    122a:	30 40       	sbci	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <_ZN11PololuQTRRC4initEPhhjh+0x188>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	2a 95       	dec	r18
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <_ZN11PololuQTRRC4initEPhhjh+0x184>
    123a:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTB;
    123c:	85 e2       	ldi	r24, 0x25	; 37
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	9d af       	std	Y+61, r25	; 0x3d
    1242:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRB;
    1244:	84 e2       	ldi	r24, 0x24	; 36
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <_ZN11PololuQTRRC4initEPhhjh+0x1c4>
	}
	else if (emitterPin < 20)		// port C
    124a:	04 31       	cpi	r16, 0x14	; 20
    124c:	a8 f4       	brcc	.+42     	; 0x1278 <_ZN11PololuQTRRC4initEPhhjh+0x1ca>
	{
		_emitterBitmask = 1 << (emitterPin - 14);
    124e:	20 2f       	mov	r18, r16
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	2e 50       	subi	r18, 0x0E	; 14
    1254:	30 40       	sbci	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <_ZN11PololuQTRRC4initEPhhjh+0x1b2>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	2a 95       	dec	r18
    1262:	e2 f7       	brpl	.-8      	; 0x125c <_ZN11PololuQTRRC4initEPhhjh+0x1ae>
    1264:	8b af       	std	Y+59, r24	; 0x3b
		_emitterPORT = &PORTC;
    1266:	88 e2       	ldi	r24, 0x28	; 40
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9d af       	std	Y+61, r25	; 0x3d
    126c:	8c af       	std	Y+60, r24	; 0x3c
		_emitterDDR = &DDRC;
    126e:	87 e2       	ldi	r24, 0x27	; 39
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9f af       	std	Y+63, r25	; 0x3f
    1274:	8e af       	std	Y+62, r24	; 0x3e
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <_ZN11PololuQTRRC4initEPhhjh+0x1d2>
	}
	else
	{
		_emitterDDR = 0;
    1278:	1f ae       	std	Y+63, r1	; 0x3f
    127a:	1e ae       	std	Y+62, r1	; 0x3e
		_emitterPORT = 0;
    127c:	1d ae       	std	Y+61, r1	; 0x3d
    127e:	1c ae       	std	Y+60, r1	; 0x3c
	}
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	5f 90       	pop	r5
    129c:	4f 90       	pop	r4
    129e:	3f 90       	pop	r3
    12a0:	2f 90       	pop	r2
    12a2:	08 95       	ret

000012a4 <_ZN11PololuQTRRC4readEPj>:
// unsigned int sensor_values[8];
// sensors.read(sensor_values);
// ...
// The values returned are in microseconds and range from 0 to
// timeout_us (as specified in the constructor).
void PololuQTRRC::read(unsigned int *sensor_values)
    12a4:	a0 e0       	ldi	r26, 0x00	; 0
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e8 e5       	ldi	r30, 0x58	; 88
    12aa:	f9 e0       	ldi	r31, 0x09	; 9
    12ac:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__prologue_saves__+0xc>
    12b0:	8c 01       	movw	r16, r24
    12b2:	5b 01       	movw	r10, r22
	unsigned char i;
	unsigned char start_time;
	unsigned char delta_time;
	unsigned int time = 0;
	unsigned int timeout =
		(unsigned int)(_timeout_us * (unsigned long)(F_CPU / 800000UL) / 10);
    12b4:	dc 01       	movw	r26, r24
    12b6:	d9 96       	adiw	r26, 0x39	; 57
    12b8:	6d 91       	ld	r22, X+
    12ba:	7c 91       	ld	r23, X
    12bc:	da 97       	sbiw	r26, 0x3a	; 58
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	29 e1       	ldi	r18, 0x19	; 25
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e0       	ldi	r20, 0x00	; 0
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
    12ce:	2a e0       	ldi	r18, 0x0A	; 10
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	50 e0       	ldi	r21, 0x00	; 0
    12d6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
    12da:	49 01       	movw	r8, r18

	unsigned char last_b = _portBMask;
    12dc:	00 5c       	subi	r16, 0xC0	; 192
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	e8 01       	movw	r28, r16
    12e2:	a9 91       	ld	r26, Y+
	unsigned char last_c = _portCMask;
    12e4:	fe 01       	movw	r30, r28
    12e6:	b1 91       	ld	r27, Z+
    12e8:	8f 01       	movw	r16, r30
	unsigned char last_d = _portDMask;
    12ea:	c0 80       	ld	r12, Z
    12ec:	02 54       	subi	r16, 0x42	; 66
    12ee:	10 40       	sbci	r17, 0x00	; 0
	
	TCCR2A |= 0x03;
    12f0:	80 91 b0 00 	lds	r24, 0x00B0
    12f4:	83 60       	ori	r24, 0x03	; 3
    12f6:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = 0x02;		// run timer2 in normal mode at 2.5 MHz
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	80 93 b1 00 	sts	0x00B1, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	09 c0       	rjmp	.+18     	; 0x1316 <_ZN11PololuQTRRC4readEPj+0x72>
						// this is compatible with OrangutanMotors
	
	// reset the values
	for(i = 0; i < _numSensors; i++)
		sensor_values[i] = 0;
    1304:	e9 2f       	mov	r30, r25
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	ee 0f       	add	r30, r30
    130a:	ff 1f       	adc	r31, r31
    130c:	ea 0d       	add	r30, r10
    130e:	fb 1d       	adc	r31, r11
    1310:	11 82       	std	Z+1, r1	; 0x01
    1312:	10 82       	st	Z, r1
	TCCR2A |= 0x03;
	TCCR2B = 0x02;		// run timer2 in normal mode at 2.5 MHz
						// this is compatible with OrangutanMotors
	
	// reset the values
	for(i = 0; i < _numSensors; i++)
    1314:	9f 5f       	subi	r25, 0xFF	; 255
    1316:	e8 01       	movw	r28, r16
    1318:	88 ad       	ldd	r24, Y+56	; 0x38
    131a:	98 17       	cp	r25, r24
    131c:	98 f3       	brcs	.-26     	; 0x1304 <_ZN11PololuQTRRC4readEPj+0x60>
		sensor_values[i] = 0;
	
	// set all sensor pins to outputs
	DDRB |= _portBMask;
    131e:	84 b1       	in	r24, 0x04	; 4
    1320:	00 5c       	subi	r16, 0xC0	; 192
    1322:	1f 4f       	sbci	r17, 0xFF	; 255
    1324:	f8 01       	movw	r30, r16
    1326:	31 91       	ld	r19, Z+
    1328:	83 2b       	or	r24, r19
    132a:	84 b9       	out	0x04, r24	; 4
	DDRC |= _portCMask;
    132c:	87 b1       	in	r24, 0x07	; 7
    132e:	ef 01       	movw	r28, r30
    1330:	29 91       	ld	r18, Y+
    1332:	8e 01       	movw	r16, r28
    1334:	82 2b       	or	r24, r18
    1336:	87 b9       	out	0x07, r24	; 7
	DDRD |= _portDMask;
    1338:	8a b1       	in	r24, 0x0a	; 10
    133a:	98 81       	ld	r25, Y
    133c:	02 54       	subi	r16, 0x42	; 66
    133e:	10 40       	sbci	r17, 0x00	; 0
    1340:	89 2b       	or	r24, r25
    1342:	8a b9       	out	0x0a, r24	; 10
	
	// drive high for 10 us
	PORTB |= _portBMask;
    1344:	85 b1       	in	r24, 0x05	; 5
    1346:	83 2b       	or	r24, r19
    1348:	85 b9       	out	0x05, r24	; 5
	PORTC |= _portCMask;
    134a:	88 b1       	in	r24, 0x08	; 8
    134c:	82 2b       	or	r24, r18
    134e:	88 b9       	out	0x08, r24	; 8
	PORTD |= _portDMask;
    1350:	8b b1       	in	r24, 0x0b	; 11
    1352:	89 2b       	or	r24, r25
    1354:	8b b9       	out	0x0b, r24	; 11
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
    1356:	82 e4       	ldi	r24, 0x42	; 66
    1358:	8a 95       	dec	r24
    135a:	f1 f7       	brne	.-4      	; 0x1358 <_ZN11PololuQTRRC4readEPj+0xb4>
}


void PololuQTRRC::emittersOn()
{
  if (_emitterDDR == 0)
    135c:	e8 01       	movw	r28, r16
    135e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1360:	ff ad       	ldd	r31, Y+63	; 0x3f
    1362:	30 97       	sbiw	r30, 0x00	; 0
    1364:	51 f0       	breq	.+20     	; 0x137a <_ZN11PololuQTRRC4readEPj+0xd6>
		return;
	*_emitterDDR |= _emitterBitmask;
    1366:	80 81       	ld	r24, Z
    1368:	9b ad       	ldd	r25, Y+59	; 0x3b
    136a:	89 2b       	or	r24, r25
    136c:	80 83       	st	Z, r24
	*_emitterPORT |= _emitterBitmask;
    136e:	ec ad       	ldd	r30, Y+60	; 0x3c
    1370:	fd ad       	ldd	r31, Y+61	; 0x3d
    1372:	80 81       	ld	r24, Z
    1374:	9b ad       	ldd	r25, Y+59	; 0x3b
    1376:	89 2b       	or	r24, r25
    1378:	80 83       	st	Z, r24
	_delay_us(10);
	
	PololuQTRRC::emittersOn();
	
	// set all ports to inputs
	DDRB &= ~_portBMask;
    137a:	84 b1       	in	r24, 0x04	; 4
    137c:	00 5c       	subi	r16, 0xC0	; 192
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	f8 01       	movw	r30, r16
    1382:	31 91       	ld	r19, Z+
    1384:	30 95       	com	r19
    1386:	83 23       	and	r24, r19
    1388:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~_portCMask;
    138a:	87 b1       	in	r24, 0x07	; 7
    138c:	ef 01       	movw	r28, r30
    138e:	29 91       	ld	r18, Y+
    1390:	8e 01       	movw	r16, r28
    1392:	20 95       	com	r18
    1394:	82 23       	and	r24, r18
    1396:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~_portDMask;
    1398:	8a b1       	in	r24, 0x0a	; 10
    139a:	98 81       	ld	r25, Y
    139c:	02 54       	subi	r16, 0x42	; 66
    139e:	10 40       	sbci	r17, 0x00	; 0
    13a0:	90 95       	com	r25
    13a2:	89 23       	and	r24, r25
    13a4:	8a b9       	out	0x0a, r24	; 10
	
	// turn off pull ups
	PORTB &= ~_portBMask;
    13a6:	85 b1       	in	r24, 0x05	; 5
    13a8:	38 23       	and	r19, r24
    13aa:	35 b9       	out	0x05, r19	; 5
	PORTC &= ~_portCMask;
    13ac:	88 b1       	in	r24, 0x08	; 8
    13ae:	28 23       	and	r18, r24
    13b0:	28 b9       	out	0x08, r18	; 8
	PORTD &= ~_portDMask;
    13b2:	8b b1       	in	r24, 0x0b	; 11
    13b4:	98 23       	and	r25, r24
    13b6:	9b b9       	out	0x0b, r25	; 11

	start_time = TCNT2;
    13b8:	d0 90 b2 00 	lds	r13, 0x00B2
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	3b c0       	rjmp	.+118    	; 0x1438 <_ZN11PololuQTRRC4readEPj+0x194>
	while (time < timeout)
	{
		// Keep track of the total time.
		// This explicitly casts the difference to unsigned char, so
		// we don't add negative values.
		delta_time = TCNT2 - start_time;
    13c2:	f0 90 b2 00 	lds	r15, 0x00B2
    13c6:	fd 18       	sub	r15, r13
		time += delta_time;
    13c8:	6f 0d       	add	r22, r15
    13ca:	71 1d       	adc	r23, r1
		start_time += delta_time;

		// continue immediately if there is no change
		if (PINB == last_b && PINC == last_c && PIND == last_d)
    13cc:	e3 b0       	in	r14, 0x03	; 3
    13ce:	ea 16       	cp	r14, r26
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <_ZN11PololuQTRRC4readEPj+0x130>
    13d2:	76 c0       	rjmp	.+236    	; 0x14c0 <_ZN11PololuQTRRC4readEPj+0x21c>
    13d4:	56 b1       	in	r21, 0x06	; 6
    13d6:	5b 17       	cp	r21, r27
    13d8:	09 f0       	breq	.+2      	; 0x13dc <_ZN11PololuQTRRC4readEPj+0x138>
    13da:	72 c0       	rjmp	.+228    	; 0x14c0 <_ZN11PololuQTRRC4readEPj+0x21c>
    13dc:	89 b1       	in	r24, 0x09	; 9
    13de:	8c 15       	cp	r24, r12
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <_ZN11PololuQTRRC4readEPj+0x140>
    13e2:	6e c0       	rjmp	.+220    	; 0x14c0 <_ZN11PololuQTRRC4readEPj+0x21c>
    13e4:	26 c0       	rjmp	.+76     	; 0x1432 <_ZN11PololuQTRRC4readEPj+0x18e>
		last_d = PIND;

		// figure out which pins changed
		for (i = 0; i < _numSensors; i++)
		{
			if (sensor_values[i] == 0 && !(*_register[i] & _bitmask[i]))
    13e6:	a4 2f       	mov	r26, r20
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	ed 01       	movw	r28, r26
    13ec:	cc 0f       	add	r28, r28
    13ee:	dd 1f       	adc	r29, r29
    13f0:	ca 0d       	add	r28, r10
    13f2:	db 1d       	adc	r29, r11
    13f4:	88 81       	ld	r24, Y
    13f6:	99 81       	ldd	r25, Y+1	; 0x01
    13f8:	89 2b       	or	r24, r25
    13fa:	b1 f4       	brne	.+44     	; 0x1428 <_ZN11PololuQTRRC4readEPj+0x184>
    13fc:	fd 01       	movw	r30, r26
    13fe:	74 96       	adiw	r30, 0x14	; 20
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	e0 0f       	add	r30, r16
    1406:	f1 1f       	adc	r31, r17
    1408:	01 90       	ld	r0, Z+
    140a:	f0 81       	ld	r31, Z
    140c:	e0 2d       	mov	r30, r0
    140e:	20 81       	ld	r18, Z
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	a0 0f       	add	r26, r16
    1414:	b1 1f       	adc	r27, r17
    1416:	90 96       	adiw	r26, 0x20	; 32
    1418:	8c 91       	ld	r24, X
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	28 23       	and	r18, r24
    141e:	39 23       	and	r19, r25
    1420:	23 2b       	or	r18, r19
    1422:	11 f4       	brne	.+4      	; 0x1428 <_ZN11PololuQTRRC4readEPj+0x184>
				sensor_values[i] = time;
    1424:	79 83       	std	Y+1, r23	; 0x01
    1426:	68 83       	st	Y, r22
		last_b = PINB;
		last_c = PINC;
		last_d = PIND;

		// figure out which pins changed
		for (i = 0; i < _numSensors; i++)
    1428:	4f 5f       	subi	r20, 0xFF	; 255
    142a:	f8 01       	movw	r30, r16
    142c:	80 ad       	ldd	r24, Z+56	; 0x38
    142e:	48 17       	cp	r20, r24
    1430:	d0 f2       	brcs	.-76     	; 0x13e6 <_ZN11PololuQTRRC4readEPj+0x142>
		// Keep track of the total time.
		// This explicitly casts the difference to unsigned char, so
		// we don't add negative values.
		delta_time = TCNT2 - start_time;
		time += delta_time;
		start_time += delta_time;
    1432:	df 0c       	add	r13, r15
    1434:	ae 2d       	mov	r26, r14
    1436:	b5 2f       	mov	r27, r21
	PORTB &= ~_portBMask;
	PORTC &= ~_portCMask;
	PORTD &= ~_portDMask;

	start_time = TCNT2;
	while (time < timeout)
    1438:	68 15       	cp	r22, r8
    143a:	79 05       	cpc	r23, r9
    143c:	10 f2       	brcs	.-124    	; 0x13c2 <_ZN11PololuQTRRC4readEPj+0x11e>
// readLineSensors method, and calling these functions before or
// after the reading the sensors will have no effect on the
// readings, but you may wish to use these for testing purposes.
void PololuQTRRC::emittersOff()
{
	if (_emitterDDR == 0)
    143e:	d8 01       	movw	r26, r16
    1440:	de 96       	adiw	r26, 0x3e	; 62
    1442:	ed 91       	ld	r30, X+
    1444:	fc 91       	ld	r31, X
    1446:	df 97       	sbiw	r26, 0x3f	; 63
    1448:	30 97       	sbiw	r30, 0x00	; 0
    144a:	81 f0       	breq	.+32     	; 0x146c <_ZN11PololuQTRRC4readEPj+0x1c8>
		return;
	*_emitterDDR |= _emitterBitmask;
    144c:	80 81       	ld	r24, Z
    144e:	db 96       	adiw	r26, 0x3b	; 59
    1450:	9c 91       	ld	r25, X
    1452:	db 97       	sbiw	r26, 0x3b	; 59
    1454:	89 2b       	or	r24, r25
    1456:	80 83       	st	Z, r24
	*_emitterPORT &= ~_emitterBitmask;
    1458:	dc 96       	adiw	r26, 0x3c	; 60
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	dd 97       	sbiw	r26, 0x3d	; 61
    1460:	90 81       	ld	r25, Z
    1462:	db 96       	adiw	r26, 0x3b	; 59
    1464:	8c 91       	ld	r24, X
    1466:	80 95       	com	r24
    1468:	89 23       	and	r24, r25
    146a:	80 83       	st	Z, r24
    146c:	ff 24       	eor	r15, r15
    146e:	22 c0       	rjmp	.+68     	; 0x14b4 <_ZN11PololuQTRRC4readEPj+0x210>
	}

	PololuQTRRC::emittersOff();
	
	for(i = 0; i < _numSensors; i++)
		if (!sensor_values[i])
    1470:	cf 2d       	mov	r28, r15
    1472:	d0 e0       	ldi	r29, 0x00	; 0
    1474:	cc 0f       	add	r28, r28
    1476:	dd 1f       	adc	r29, r29
    1478:	ca 0d       	add	r28, r10
    147a:	db 1d       	adc	r29, r11
    147c:	68 81       	ld	r22, Y
    147e:	79 81       	ldd	r23, Y+1	; 0x01
    1480:	61 15       	cp	r22, r1
    1482:	71 05       	cpc	r23, r1
    1484:	31 f4       	brne	.+12     	; 0x1492 <_ZN11PololuQTRRC4readEPj+0x1ee>
			sensor_values[i] = _timeout_us;
    1486:	f8 01       	movw	r30, r16
    1488:	81 ad       	ldd	r24, Z+57	; 0x39
    148a:	92 ad       	ldd	r25, Z+58	; 0x3a
    148c:	99 83       	std	Y+1, r25	; 0x01
    148e:	88 83       	st	Y, r24
    1490:	10 c0       	rjmp	.+32     	; 0x14b2 <_ZN11PololuQTRRC4readEPj+0x20e>
		else
			sensor_values[i] = 
				(unsigned int)(sensor_values[i] * 10UL / 
					(unsigned char)(F_CPU / 800000UL));
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	2a e0       	ldi	r18, 0x0A	; 10
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
    14a2:	29 e1       	ldi	r18, 0x19	; 25
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e0       	ldi	r20, 0x00	; 0
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
    14ae:	39 83       	std	Y+1, r19	; 0x01
    14b0:	28 83       	st	Y, r18
		}
	}

	PololuQTRRC::emittersOff();
	
	for(i = 0; i < _numSensors; i++)
    14b2:	f3 94       	inc	r15
    14b4:	d8 01       	movw	r26, r16
    14b6:	d8 96       	adiw	r26, 0x38	; 56
    14b8:	8c 91       	ld	r24, X
    14ba:	f8 16       	cp	r15, r24
    14bc:	c8 f2       	brcs	.-78     	; 0x1470 <_ZN11PololuQTRRC4readEPj+0x1cc>
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <_ZN11PololuQTRRC4readEPj+0x226>
		// continue immediately if there is no change
		if (PINB == last_b && PINC == last_c && PIND == last_d)
			continue;

		// save the last observed values
		last_b = PINB;
    14c0:	e3 b0       	in	r14, 0x03	; 3
		last_c = PINC;
    14c2:	56 b1       	in	r21, 0x06	; 6
		last_d = PIND;
    14c4:	c9 b0       	in	r12, 0x09	; 9
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	b0 cf       	rjmp	.-160    	; 0x142a <_ZN11PololuQTRRC4readEPj+0x186>
		else
			sensor_values[i] = 
				(unsigned int)(sensor_values[i] * 10UL / 
					(unsigned char)(F_CPU / 800000UL));

}
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	ec e0       	ldi	r30, 0x0C	; 12
    14d0:	0c 94 3d 0c 	jmp	0x187a	; 0x187a <__epilogue_restores__+0xc>

000014d4 <_ZN11PololuQTRRC11emittersOffEv>:

// Turn the IR LEDs off and on.  This is mainly for use by the
// readLineSensors method, and calling these functions before or
// after the reading the sensors will have no effect on the
// readings, but you may wish to use these for testing purposes.
void PololuQTRRC::emittersOff()
    14d4:	dc 01       	movw	r26, r24
{
	if (_emitterDDR == 0)
    14d6:	de 96       	adiw	r26, 0x3e	; 62
    14d8:	ed 91       	ld	r30, X+
    14da:	fc 91       	ld	r31, X
    14dc:	df 97       	sbiw	r26, 0x3f	; 63
    14de:	30 97       	sbiw	r30, 0x00	; 0
    14e0:	81 f0       	breq	.+32     	; 0x1502 <_ZN11PololuQTRRC11emittersOffEv+0x2e>
		return;
	*_emitterDDR |= _emitterBitmask;
    14e2:	80 81       	ld	r24, Z
    14e4:	db 96       	adiw	r26, 0x3b	; 59
    14e6:	9c 91       	ld	r25, X
    14e8:	db 97       	sbiw	r26, 0x3b	; 59
    14ea:	89 2b       	or	r24, r25
    14ec:	80 83       	st	Z, r24
	*_emitterPORT &= ~_emitterBitmask;
    14ee:	dc 96       	adiw	r26, 0x3c	; 60
    14f0:	ed 91       	ld	r30, X+
    14f2:	fc 91       	ld	r31, X
    14f4:	dd 97       	sbiw	r26, 0x3d	; 61
    14f6:	90 81       	ld	r25, Z
    14f8:	db 96       	adiw	r26, 0x3b	; 59
    14fa:	8c 91       	ld	r24, X
    14fc:	80 95       	com	r24
    14fe:	89 23       	and	r24, r25
    1500:	80 83       	st	Z, r24
    1502:	08 95       	ret

00001504 <_ZN11PololuQTRRC9calibrateEv>:
		return;
	*_emitterDDR |= _emitterBitmask;
	*_emitterPORT |= _emitterBitmask;
}

void PololuQTRRC::calibrate()
    1504:	a0 e1       	ldi	r26, 0x10	; 16
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e8       	ldi	r30, 0x88	; 136
    150a:	fa e0       	ldi	r31, 0x0A	; 10
    150c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__prologue_saves__+0x18>
    1510:	7c 01       	movw	r14, r24
{
	unsigned int sensor_values[8];
	int i;
	read(sensor_values);
    1512:	8e 01       	movw	r16, r28
    1514:	0f 5f       	subi	r16, 0xFF	; 255
    1516:	1f 4f       	sbci	r17, 0xFF	; 255
    1518:	b8 01       	movw	r22, r16
    151a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN11PololuQTRRC4readEPj>
    151e:	b8 01       	movw	r22, r16
    1520:	f7 01       	movw	r30, r14
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	19 c0       	rjmp	.+50     	; 0x155a <_ZN11PololuQTRRC9calibrateEv+0x56>
	
	for(i=0;i<_numSensors;i++)
	{
		if(sensor_values[i] > calibratedMaximum[i])
    1528:	db 01       	movw	r26, r22
    152a:	2d 91       	ld	r18, X+
    152c:	3c 91       	ld	r19, X
    152e:	80 89       	ldd	r24, Z+16	; 0x10
    1530:	91 89       	ldd	r25, Z+17	; 0x11
    1532:	82 17       	cp	r24, r18
    1534:	93 07       	cpc	r25, r19
    1536:	10 f4       	brcc	.+4      	; 0x153c <_ZN11PololuQTRRC9calibrateEv+0x38>
			calibratedMaximum[i] = sensor_values[i];
    1538:	31 8b       	std	Z+17, r19	; 0x11
    153a:	20 8b       	std	Z+16, r18	; 0x10
		if(sensor_values[i] < calibratedMinimum[i])
    153c:	db 01       	movw	r26, r22
    153e:	2d 91       	ld	r18, X+
    1540:	3c 91       	ld	r19, X
    1542:	80 81       	ld	r24, Z
    1544:	91 81       	ldd	r25, Z+1	; 0x01
    1546:	28 17       	cp	r18, r24
    1548:	39 07       	cpc	r19, r25
    154a:	10 f4       	brcc	.+4      	; 0x1550 <_ZN11PololuQTRRC9calibrateEv+0x4c>
			calibratedMinimum[i] = sensor_values[i];
    154c:	31 83       	std	Z+1, r19	; 0x01
    154e:	20 83       	st	Z, r18
{
	unsigned int sensor_values[8];
	int i;
	read(sensor_values);
	
	for(i=0;i<_numSensors;i++)
    1550:	4f 5f       	subi	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	6e 5f       	subi	r22, 0xFE	; 254
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	32 96       	adiw	r30, 0x02	; 2
    155a:	d7 01       	movw	r26, r14
    155c:	d8 96       	adiw	r26, 0x38	; 56
    155e:	8c 91       	ld	r24, X
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	48 17       	cp	r20, r24
    1564:	59 07       	cpc	r21, r25
    1566:	04 f3       	brlt	.-64     	; 0x1528 <_ZN11PololuQTRRC9calibrateEv+0x24>
		if(sensor_values[i] > calibratedMaximum[i])
			calibratedMaximum[i] = sensor_values[i];
		if(sensor_values[i] < calibratedMinimum[i])
			calibratedMinimum[i] = sensor_values[i];
	}
}
    1568:	60 96       	adiw	r28, 0x10	; 16
    156a:	e6 e0       	ldi	r30, 0x06	; 6
    156c:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__epilogue_restores__+0x18>

00001570 <_ZN11PololuQTRRC14readCalibratedEPj>:

void PololuQTRRC::readCalibrated(unsigned int *sensor_values)
    1570:	a0 e0       	ldi	r26, 0x00	; 0
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	ee eb       	ldi	r30, 0xBE	; 190
    1576:	fa e0       	ldi	r31, 0x0A	; 10
    1578:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <__prologue_saves__+0x10>
    157c:	5c 01       	movw	r10, r24
    157e:	16 2f       	mov	r17, r22
    1580:	07 2f       	mov	r16, r23
{
	int i;

	read(sensor_values);
    1582:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN11PololuQTRRC4readEPj>
    1586:	21 2f       	mov	r18, r17
    1588:	30 2f       	mov	r19, r16
    158a:	c9 01       	movw	r24, r18
    158c:	6c 01       	movw	r12, r24
    158e:	e5 01       	movw	r28, r10
    1590:	ee 24       	eor	r14, r14
    1592:	ff 24       	eor	r15, r15
    1594:	32 c0       	rjmp	.+100    	; 0x15fa <_ZN11PololuQTRRC14readCalibratedEPj+0x8a>

	for(i=0;i<_numSensors;i++)
	{
		int denominator = calibratedMaximum[i] - calibratedMinimum[i];
    1596:	28 81       	ld	r18, Y
    1598:	39 81       	ldd	r19, Y+1	; 0x01
    159a:	08 89       	ldd	r16, Y+16	; 0x10
    159c:	19 89       	ldd	r17, Y+17	; 0x11
    159e:	02 1b       	sub	r16, r18
    15a0:	13 0b       	sbc	r17, r19
		signed int x = 0;
		if(denominator != 0)
    15a2:	09 f1       	breq	.+66     	; 0x15e6 <_ZN11PololuQTRRC14readCalibratedEPj+0x76>
			x = (((signed long)sensor_values[i]) - calibratedMinimum[i])
				* 1000 / denominator;
    15a4:	f6 01       	movw	r30, r12
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	40 e0       	ldi	r20, 0x00	; 0
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	95 0b       	sbc	r25, r21
    15ba:	28 ee       	ldi	r18, 0xE8	; 232
    15bc:	33 e0       	ldi	r19, 0x03	; 3
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
    15c6:	98 01       	movw	r18, r16
    15c8:	44 27       	eor	r20, r20
    15ca:	37 fd       	sbrc	r19, 7
    15cc:	40 95       	com	r20
    15ce:	54 2f       	mov	r21, r20
    15d0:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divmodsi4>
    15d4:	c9 01       	movw	r24, r18
    15d6:	f3 e0       	ldi	r31, 0x03	; 3
    15d8:	29 3e       	cpi	r18, 0xE9	; 233
    15da:	3f 07       	cpc	r19, r31
    15dc:	14 f0       	brlt	.+4      	; 0x15e2 <_ZN11PololuQTRRC14readCalibratedEPj+0x72>
    15de:	88 ee       	ldi	r24, 0xE8	; 232
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	97 ff       	sbrs	r25, 7
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <_ZN11PololuQTRRC14readCalibratedEPj+0x7a>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
		if(x < 0)
			x = 0;
		else if(x > 1000)
			x = 1000;
		sensor_values[i] = x;
    15ea:	f6 01       	movw	r30, r12
    15ec:	81 93       	st	Z+, r24
    15ee:	91 93       	st	Z+, r25
    15f0:	6f 01       	movw	r12, r30
{
	int i;

	read(sensor_values);

	for(i=0;i<_numSensors;i++)
    15f2:	08 94       	sec
    15f4:	e1 1c       	adc	r14, r1
    15f6:	f1 1c       	adc	r15, r1
    15f8:	22 96       	adiw	r28, 0x02	; 2
    15fa:	f5 01       	movw	r30, r10
    15fc:	80 ad       	ldd	r24, Z+56	; 0x38
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	e8 16       	cp	r14, r24
    1602:	f9 06       	cpc	r15, r25
    1604:	44 f2       	brlt	.-112    	; 0x1596 <_ZN11PololuQTRRC14readCalibratedEPj+0x26>
			x = 0;
		else if(x > 1000)
			x = 1000;
		sensor_values[i] = x;
	}
}
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	ea e0       	ldi	r30, 0x0A	; 10
    160c:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__epilogue_restores__+0x10>

00001610 <_ZN11PololuQTRRC8readLineEPjh>:

unsigned int PololuQTRRC::readLine(unsigned int *sensor_values, unsigned char white_line)
    1610:	a5 e0       	ldi	r26, 0x05	; 5
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e0       	ldi	r30, 0x0E	; 14
    1616:	fb e0       	ldi	r31, 0x0B	; 11
    1618:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__prologue_saves__>
    161c:	8c 01       	movw	r16, r24
    161e:	f6 2e       	mov	r15, r22
    1620:	e7 2e       	mov	r14, r23
    1622:	4b 83       	std	Y+3, r20	; 0x03
	unsigned long avg; // this is for the weighted total, which is long
	                   // before division
	unsigned int sum; // this is for the denominator which is <= 64000
	static int16_t last_value=0; // assume initially that the line is left.

	readCalibrated(sensor_values);
    1624:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN11PololuQTRRC14readCalibratedEPj>

	avg = 0;
	sum = 0;
  
	for(i=0;i<_numSensors;i++) {
    1628:	d8 01       	movw	r26, r16
    162a:	d8 96       	adiw	r26, 0x38	; 56
    162c:	bc 91       	ld	r27, X
    162e:	ba 83       	std	Y+2, r27	; 0x02
    1630:	2f 2d       	mov	r18, r15
    1632:	3e 2d       	mov	r19, r14
    1634:	c9 01       	movw	r24, r18
    1636:	9d 83       	std	Y+5, r25	; 0x05
    1638:	8c 83       	std	Y+4, r24	; 0x04
    163a:	19 82       	std	Y+1, r1	; 0x01
    163c:	66 24       	eor	r6, r6
    163e:	77 24       	eor	r7, r7
    1640:	43 01       	movw	r8, r6
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
    1646:	aa 24       	eor	r10, r10
    1648:	bb 24       	eor	r11, r11
    164a:	65 01       	movw	r12, r10
    164c:	2b 2e       	mov	r2, r27
    164e:	33 24       	eor	r3, r3
    1650:	44 24       	eor	r4, r4
    1652:	55 24       	eor	r5, r5
    1654:	2e c0       	rjmp	.+92     	; 0x16b2 <_ZN11PololuQTRRC8readLineEPjh+0xa2>
		int value = sensor_values[i];
    1656:	ec 81       	ldd	r30, Y+4	; 0x04
    1658:	fd 81       	ldd	r31, Y+5	; 0x05
    165a:	e0 80       	ld	r14, Z
    165c:	f1 80       	ldd	r15, Z+1	; 0x01
		if(white_line)
    165e:	fb 81       	ldd	r31, Y+3	; 0x03
    1660:	ff 23       	and	r31, r31
    1662:	29 f0       	breq	.+10     	; 0x166e <_ZN11PololuQTRRC8readLineEPjh+0x5e>
			value = 1000-value;
    1664:	28 ee       	ldi	r18, 0xE8	; 232
    1666:	33 e0       	ldi	r19, 0x03	; 3
    1668:	2e 19       	sub	r18, r14
    166a:	3f 09       	sbc	r19, r15
    166c:	79 01       	movw	r14, r18

		// keep track of whether we see the line at all
		if(value > 200) {
    166e:	39 ec       	ldi	r19, 0xC9	; 201
    1670:	e3 16       	cp	r14, r19
    1672:	f1 04       	cpc	r15, r1
    1674:	14 f0       	brlt	.+4      	; 0x167a <_ZN11PololuQTRRC8readLineEPjh+0x6a>
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	89 83       	std	Y+1, r24	; 0x01
			on_line = 1;
		}

		avg += (long)(value) * (i * 1000);
    167a:	b7 01       	movw	r22, r14
    167c:	88 27       	eor	r24, r24
    167e:	77 fd       	sbrc	r23, 7
    1680:	80 95       	com	r24
    1682:	98 2f       	mov	r25, r24
    1684:	a6 01       	movw	r20, r12
    1686:	95 01       	movw	r18, r10
    1688:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
    168c:	66 0e       	add	r6, r22
    168e:	77 1e       	adc	r7, r23
    1690:	88 1e       	adc	r8, r24
    1692:	99 1e       	adc	r9, r25
		sum += value;
    1694:	0e 0d       	add	r16, r14
    1696:	1f 1d       	adc	r17, r15
    1698:	88 ee       	ldi	r24, 0xE8	; 232
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	a8 0e       	add	r10, r24
    16a2:	b9 1e       	adc	r11, r25
    16a4:	ca 1e       	adc	r12, r26
    16a6:	db 1e       	adc	r13, r27
    16a8:	ac 81       	ldd	r26, Y+4	; 0x04
    16aa:	bd 81       	ldd	r27, Y+5	; 0x05
    16ac:	12 96       	adiw	r26, 0x02	; 2
    16ae:	bd 83       	std	Y+5, r27	; 0x05
    16b0:	ac 83       	std	Y+4, r26	; 0x04
	readCalibrated(sensor_values);

	avg = 0;
	sum = 0;
  
	for(i=0;i<_numSensors;i++) {
    16b2:	c2 01       	movw	r24, r4
    16b4:	b1 01       	movw	r22, r2
    16b6:	28 ee       	ldi	r18, 0xE8	; 232
    16b8:	33 e0       	ldi	r19, 0x03	; 3
    16ba:	40 e0       	ldi	r20, 0x00	; 0
    16bc:	50 e0       	ldi	r21, 0x00	; 0
    16be:	0e 94 9f 0b 	call	0x173e	; 0x173e <__mulsi3>
    16c2:	a6 16       	cp	r10, r22
    16c4:	b7 06       	cpc	r11, r23
    16c6:	c8 06       	cpc	r12, r24
    16c8:	d9 06       	cpc	r13, r25
    16ca:	29 f6       	brne	.-118    	; 0x1656 <_ZN11PololuQTRRC8readLineEPjh+0x46>

		avg += (long)(value) * (i * 1000);
		sum += value;
	}

	if(!on_line)
    16cc:	b9 81       	ldd	r27, Y+1	; 0x01
    16ce:	bb 23       	and	r27, r27
    16d0:	29 f5       	brne	.+74     	; 0x171c <_ZN11PololuQTRRC8readLineEPjh+0x10c>
	{
		// If it last read to the left of center, return 0.
		if(last_value < (_numSensors-1)*1000/2)
    16d2:	ea 81       	ldd	r30, Y+2	; 0x02
    16d4:	4e 2f       	mov	r20, r30
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	84 ef       	ldi	r24, 0xF4	; 244
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	9c 01       	movw	r18, r24
    16de:	42 9f       	mul	r20, r18
    16e0:	c0 01       	movw	r24, r0
    16e2:	43 9f       	mul	r20, r19
    16e4:	90 0d       	add	r25, r0
    16e6:	52 9f       	mul	r21, r18
    16e8:	90 0d       	add	r25, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	84 5f       	subi	r24, 0xF4	; 244
    16ee:	91 40       	sbci	r25, 0x01	; 1
    16f0:	20 91 e1 01 	lds	r18, 0x01E1
    16f4:	30 91 e2 01 	lds	r19, 0x01E2
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	1c f4       	brge	.+6      	; 0x1704 <_ZN11PololuQTRRC8readLineEPjh+0xf4>
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	17 c0       	rjmp	.+46     	; 0x1732 <_ZN11PololuQTRRC8readLineEPjh+0x122>
			return 0;
		
		// If it last read to the right of center, return the max.
		else
			return (_numSensors-1)*1000;
    1704:	88 ee       	ldi	r24, 0xE8	; 232
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	48 9f       	mul	r20, r24
    170a:	90 01       	movw	r18, r0
    170c:	49 9f       	mul	r20, r25
    170e:	30 0d       	add	r19, r0
    1710:	58 9f       	mul	r21, r24
    1712:	30 0d       	add	r19, r0
    1714:	11 24       	eor	r1, r1
    1716:	28 5e       	subi	r18, 0xE8	; 232
    1718:	33 40       	sbci	r19, 0x03	; 3
    171a:	0b c0       	rjmp	.+22     	; 0x1732 <_ZN11PololuQTRRC8readLineEPjh+0x122>

	}

	last_value = avg/sum;
    171c:	98 01       	movw	r18, r16
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	c4 01       	movw	r24, r8
    1724:	b3 01       	movw	r22, r6
    1726:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__udivmodsi4>
    172a:	20 93 e1 01 	sts	0x01E1, r18
    172e:	30 93 e2 01 	sts	0x01E2, r19

	return last_value;
}
    1732:	c9 01       	movw	r24, r18
    1734:	25 96       	adiw	r28, 0x05	; 5
    1736:	e2 e1       	ldi	r30, 0x12	; 18
    1738:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__epilogue_restores__>

0000173c <_GLOBAL__I_qtr_emitters_on>:
    173c:	08 95       	ret

0000173e <__mulsi3>:
    173e:	62 9f       	mul	r22, r18
    1740:	d0 01       	movw	r26, r0
    1742:	73 9f       	mul	r23, r19
    1744:	f0 01       	movw	r30, r0
    1746:	82 9f       	mul	r24, r18
    1748:	e0 0d       	add	r30, r0
    174a:	f1 1d       	adc	r31, r1
    174c:	64 9f       	mul	r22, r20
    174e:	e0 0d       	add	r30, r0
    1750:	f1 1d       	adc	r31, r1
    1752:	92 9f       	mul	r25, r18
    1754:	f0 0d       	add	r31, r0
    1756:	83 9f       	mul	r24, r19
    1758:	f0 0d       	add	r31, r0
    175a:	74 9f       	mul	r23, r20
    175c:	f0 0d       	add	r31, r0
    175e:	65 9f       	mul	r22, r21
    1760:	f0 0d       	add	r31, r0
    1762:	99 27       	eor	r25, r25
    1764:	72 9f       	mul	r23, r18
    1766:	b0 0d       	add	r27, r0
    1768:	e1 1d       	adc	r30, r1
    176a:	f9 1f       	adc	r31, r25
    176c:	63 9f       	mul	r22, r19
    176e:	b0 0d       	add	r27, r0
    1770:	e1 1d       	adc	r30, r1
    1772:	f9 1f       	adc	r31, r25
    1774:	bd 01       	movw	r22, r26
    1776:	cf 01       	movw	r24, r30
    1778:	11 24       	eor	r1, r1
    177a:	08 95       	ret

0000177c <__udivmodqi4>:
    177c:	99 1b       	sub	r25, r25
    177e:	79 e0       	ldi	r23, 0x09	; 9
    1780:	04 c0       	rjmp	.+8      	; 0x178a <__udivmodqi4_ep>

00001782 <__udivmodqi4_loop>:
    1782:	99 1f       	adc	r25, r25
    1784:	96 17       	cp	r25, r22
    1786:	08 f0       	brcs	.+2      	; 0x178a <__udivmodqi4_ep>
    1788:	96 1b       	sub	r25, r22

0000178a <__udivmodqi4_ep>:
    178a:	88 1f       	adc	r24, r24
    178c:	7a 95       	dec	r23
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__udivmodqi4_loop>
    1790:	80 95       	com	r24
    1792:	08 95       	ret

00001794 <__udivmodhi4>:
    1794:	aa 1b       	sub	r26, r26
    1796:	bb 1b       	sub	r27, r27
    1798:	51 e1       	ldi	r21, 0x11	; 17
    179a:	07 c0       	rjmp	.+14     	; 0x17aa <__udivmodhi4_ep>

0000179c <__udivmodhi4_loop>:
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	a6 17       	cp	r26, r22
    17a2:	b7 07       	cpc	r27, r23
    17a4:	10 f0       	brcs	.+4      	; 0x17aa <__udivmodhi4_ep>
    17a6:	a6 1b       	sub	r26, r22
    17a8:	b7 0b       	sbc	r27, r23

000017aa <__udivmodhi4_ep>:
    17aa:	88 1f       	adc	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	5a 95       	dec	r21
    17b0:	a9 f7       	brne	.-22     	; 0x179c <__udivmodhi4_loop>
    17b2:	80 95       	com	r24
    17b4:	90 95       	com	r25
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	08 95       	ret

000017bc <__udivmodsi4>:
    17bc:	a1 e2       	ldi	r26, 0x21	; 33
    17be:	1a 2e       	mov	r1, r26
    17c0:	aa 1b       	sub	r26, r26
    17c2:	bb 1b       	sub	r27, r27
    17c4:	fd 01       	movw	r30, r26
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <__udivmodsi4_ep>

000017c8 <__udivmodsi4_loop>:
    17c8:	aa 1f       	adc	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	ee 1f       	adc	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	a2 17       	cp	r26, r18
    17d2:	b3 07       	cpc	r27, r19
    17d4:	e4 07       	cpc	r30, r20
    17d6:	f5 07       	cpc	r31, r21
    17d8:	20 f0       	brcs	.+8      	; 0x17e2 <__udivmodsi4_ep>
    17da:	a2 1b       	sub	r26, r18
    17dc:	b3 0b       	sbc	r27, r19
    17de:	e4 0b       	sbc	r30, r20
    17e0:	f5 0b       	sbc	r31, r21

000017e2 <__udivmodsi4_ep>:
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	1a 94       	dec	r1
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <__udivmodsi4_loop>
    17ee:	60 95       	com	r22
    17f0:	70 95       	com	r23
    17f2:	80 95       	com	r24
    17f4:	90 95       	com	r25
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	bd 01       	movw	r22, r26
    17fc:	cf 01       	movw	r24, r30
    17fe:	08 95       	ret

00001800 <__divmodsi4>:
    1800:	97 fb       	bst	r25, 7
    1802:	09 2e       	mov	r0, r25
    1804:	05 26       	eor	r0, r21
    1806:	0e d0       	rcall	.+28     	; 0x1824 <__divmodsi4_neg1>
    1808:	57 fd       	sbrc	r21, 7
    180a:	04 d0       	rcall	.+8      	; 0x1814 <__divmodsi4_neg2>
    180c:	d7 df       	rcall	.-82     	; 0x17bc <__udivmodsi4>
    180e:	0a d0       	rcall	.+20     	; 0x1824 <__divmodsi4_neg1>
    1810:	00 1c       	adc	r0, r0
    1812:	38 f4       	brcc	.+14     	; 0x1822 <__divmodsi4_exit>

00001814 <__divmodsi4_neg2>:
    1814:	50 95       	com	r21
    1816:	40 95       	com	r20
    1818:	30 95       	com	r19
    181a:	21 95       	neg	r18
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	4f 4f       	sbci	r20, 0xFF	; 255
    1820:	5f 4f       	sbci	r21, 0xFF	; 255

00001822 <__divmodsi4_exit>:
    1822:	08 95       	ret

00001824 <__divmodsi4_neg1>:
    1824:	f6 f7       	brtc	.-4      	; 0x1822 <__divmodsi4_exit>
    1826:	90 95       	com	r25
    1828:	80 95       	com	r24
    182a:	70 95       	com	r23
    182c:	61 95       	neg	r22
    182e:	7f 4f       	sbci	r23, 0xFF	; 255
    1830:	8f 4f       	sbci	r24, 0xFF	; 255
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	08 95       	ret

00001836 <__prologue_saves__>:
    1836:	2f 92       	push	r2
    1838:	3f 92       	push	r3
    183a:	4f 92       	push	r4
    183c:	5f 92       	push	r5
    183e:	6f 92       	push	r6
    1840:	7f 92       	push	r7
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	ca 1b       	sub	r28, r26
    1860:	db 0b       	sbc	r29, r27
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	09 94       	ijmp

0000186e <__epilogue_restores__>:
    186e:	2a 88       	ldd	r2, Y+18	; 0x12
    1870:	39 88       	ldd	r3, Y+17	; 0x11
    1872:	48 88       	ldd	r4, Y+16	; 0x10
    1874:	5f 84       	ldd	r5, Y+15	; 0x0f
    1876:	6e 84       	ldd	r6, Y+14	; 0x0e
    1878:	7d 84       	ldd	r7, Y+13	; 0x0d
    187a:	8c 84       	ldd	r8, Y+12	; 0x0c
    187c:	9b 84       	ldd	r9, Y+11	; 0x0b
    187e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1880:	b9 84       	ldd	r11, Y+9	; 0x09
    1882:	c8 84       	ldd	r12, Y+8	; 0x08
    1884:	df 80       	ldd	r13, Y+7	; 0x07
    1886:	ee 80       	ldd	r14, Y+6	; 0x06
    1888:	fd 80       	ldd	r15, Y+5	; 0x05
    188a:	0c 81       	ldd	r16, Y+4	; 0x04
    188c:	1b 81       	ldd	r17, Y+3	; 0x03
    188e:	aa 81       	ldd	r26, Y+2	; 0x02
    1890:	b9 81       	ldd	r27, Y+1	; 0x01
    1892:	ce 0f       	add	r28, r30
    1894:	d1 1d       	adc	r29, r1
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	ed 01       	movw	r28, r26
    18a2:	08 95       	ret

000018a4 <__tablejump2__>:
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31

000018a8 <__tablejump__>:
    18a8:	05 90       	lpm	r0, Z+
    18aa:	f4 91       	lpm	r31, Z+
    18ac:	e0 2d       	mov	r30, r0
    18ae:	09 94       	ijmp

000018b0 <_exit>:
    18b0:	f8 94       	cli

000018b2 <__stop_program>:
    18b2:	ff cf       	rjmp	.-2      	; 0x18b2 <__stop_program>
