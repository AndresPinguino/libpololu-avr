#include <PololuQTRLineSensors.h>
#include <OrangutanPushbuttons.h>
#include <OrangutanMotors.h>
#include <OrangutanLEDs.h>
#include <OrangutanLCD.h>
#include <OrangutanBuzzer.h>
#include <OrangutanAnalog.h>
#include <avr/pgmspace.h>

OrangutanLCD lcd;
PololuQTRLineSensors_RC qtr;
OrangutanPushbuttons buttons;
OrangutanMotors motors;
OrangutanLEDs leds;
OrangutanBuzzer buzzer;
OrangutanAnalog analog;

unsigned char __attribute__ ((progmem)) LcdCustomChar[] =
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0. 0/8 full progress block
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, // 1. 1/8 full progress block
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, // 2. 2/8 full progress block
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, // 3. 3/8 full progress block
  0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, // 4. 4/8 full progress block
  0x00, 0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, // 5. 5/8 full progress block
  0x00, 0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, // 6. 6/8 full progress block
  0x00, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, // 7. 7/8 full progress block
};

#define LCD_CGRAM   6


void LCDLoadCustomChar(unsigned char* lcdCustomCharArray, unsigned char romCharNum, unsigned char lcdCharNum)
{
  register unsigned char i;

  // multiply the character index by 8
  lcdCharNum = (lcdCharNum<<3);	// each character occupies 8 bytes
  romCharNum = (romCharNum<<3);	// each character occupies 8 bytes

  // copy the 8 bytes into CG (character generator) RAM

  for(i=0; i<8; i++)
  {
    // set CG RAM address
    lcd.send_cmd((1<<LCD_CGRAM) | (lcdCharNum+i));
    // write character data
    lcd.send_data( pgm_read_byte(lcdCustomCharArray+romCharNum+i));
  }
}

void display_readings(const unsigned int *calibrated_values)
{
  unsigned char i;

  for(i=0;i<5;i++) {
    unsigned char c = calibrated_values[i]/142;
    lcd.send_data(c);
  }
}


void setup()
{
  lcd.clear();
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,0,0);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,1,1);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,2,2);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,3,3);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,4,4);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,5,5);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,6,6);
  LCDLoadCustomChar((unsigned char*)LcdCustomChar,7,7);
  lcd.clear();
}